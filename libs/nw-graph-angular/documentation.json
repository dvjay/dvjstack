{
    "pipes": [],
    "interfaces": [
        {
            "name": "ChangeLayoutPayload",
            "id": "interface-ChangeLayoutPayload-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "prevLayoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "prevLayoutTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ChangeLayoutPayload",
            "id": "interface-ChangeLayoutPayload-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "prevLayoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "prevLayoutTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ChangeLayoutPayload-1"
        },
        {
            "name": "CurrentMouseOverNodeOrEdge",
            "id": "interface-CurrentMouseOverNodeOrEdge-611dff34dcec16521d1f325f2c787edf",
            "file": "libs/nw-graph-angular/src/lib/services/node-relation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject, Observable } from 'rxjs'; \r\nimport { INode, IEdge } from '../models/nw-data';\r\n\r\n@Injectable() export class NodeRelationService {\r\n    private notificationMoveOverSource = new Subject<CurrentMouseOverNodeOrEdge>(); \r\n    private notificationMoveOutsource = new Subject<CurrentMouseOverNodeOrEdge>();\r\n    \r\n    notificationMoveOver$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOutsource.asObservable();\r\n    // currentMoveOverNode: node = null; \r\n    // currentMoveOverEdge: link = null;\r\n    \r\n    notificationMouseOver(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    \r\n    notificationMouseOut(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n}\r\n\r\nexport interface CurrentMouseOverNodeOrEdge {\r\n    node?: INode; \r\n    edge?: IEdge; \r\n    potentialSelectedNodes?: INode[]\r\n}\r\n",
            "properties": [
                {
                    "name": "edge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "potentialSelectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "CurrentMouseOverNodeOrEdge",
            "id": "interface-CurrentMouseOverNodeOrEdge-4e2c08a1c29f5ba630611be527073d5f-1",
            "file": "libs/nw-graph-angular5/src/app/services/node-relation.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs'; \r\nimport { Observable } from 'rxjs/Observable';\r\nimport { INode, IEdge } from '../models/nw-data';\r\n\r\n@Injectable() export class NodeRelationService {\r\n    private notificationMoveOverSource = new Subject<CurrentMouseOverNodeOrEdge>(); \r\n    private notificationMoveOutsource = new Subject<CurrentMouseOverNodeOrEdge>();\r\n    \r\n    notificationMoveOver$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOutsource.asObservable();\r\n    // currentMoveOverNode: node = null; \r\n    // currentMoveOverEdge: link = null;\r\n    \r\n    notificationMouseOver(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    \r\n    notificationMouseOut(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n}\r\n\r\nexport interface CurrentMouseOverNodeOrEdge {\r\n    node?: INode; \r\n    edge?: IEdge; \r\n    potentialSelectedNodes?: INode[]\r\n}\r\n",
            "properties": [
                {
                    "name": "edge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "potentialSelectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CurrentMouseOverNodeOrEdge-1"
        },
        {
            "name": "ExternalDataPayload",
            "id": "interface-ExternalDataPayload-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "maxNodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "ExternalDataPayload",
            "id": "interface-ExternalDataPayload-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "maxNodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ExternalDataPayload-1"
        },
        {
            "name": "GraphAdapter",
            "id": "interface-GraphAdapter-9f75fbe6eebcf0970b0a3a52000fa2e3",
            "file": "libs/nw-graph-angular/src/lib/models/graph-adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INwData } from \"./nw-data\";\r\n\r\nexport interface GraphAdapter {\r\n    initialize(options: GraphOptions): void;\r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number): void;\r\n}\r\n\r\nexport interface GraphOptions {\r\n    width: number; \r\n    height: number; \r\n    nodeRadius: number; \r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "attachNodesPosition",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "GraphAdapter",
            "id": "interface-GraphAdapter-86eb98365311ad402d1923b0ce2058c8-1",
            "file": "libs/nw-graph-angular5/src/app/models/graph-adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INwData } from \"./nw-data\";\r\n\r\nexport interface GraphAdapter {\r\n    initialize(options: GraphOptions): void;\r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number): Promise<void>;\r\n}\r\n\r\nexport interface GraphOptions {\r\n    width: number; \r\n    height: number; \r\n    nodeRadius: number; \r\n}",
            "properties": [],
            "indexSignatures": [],
            "kind": 165,
            "methods": [
                {
                    "name": "attachNodesPosition",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphAdapter-1"
        },
        {
            "name": "GraphLog",
            "id": "interface-GraphLog-f7827c2ec3bda4c7e79c7adce0350f79",
            "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const nwGraphErrorName = \"NwGraphError\";\r\n\r\nexport interface GraphLog {\r\n    id: number; \r\n    entityId?: string; \r\n    nodeIds?: string[]; \r\n    logType: GraphLogType; \r\n    source: string; \r\n    message: string; \r\n    messageDesc: string; \r\n    timestamp: Date;\r\n}\r\n\r\nexport class GraphError extends Error {\r\n    logObj: GraphLog; \r\n    constructor(logobj: GraphLog, ...params: string[]) {\r\n        super(...params); \r\n        this.logObj = logobj; \r\n        this.name = nwGraphErrorName;\r\n    }\r\n}\r\n\r\nexport function extractGraphLogFromError(err: Error | GraphError): GraphLog {\r\n    if(err.name === nwGraphErrorName) {\r\n        return (err as GraphError).logObj;\r\n    } else { \r\n        return { id: generateUniqueId(), logType: GraphLogType.Error, \r\n                    message: err.message, source: \"Unknown\",\r\n                    messageDesc: err.message, \r\n                    timestamp: new Date() } as GraphLog;\r\n    }\r\n}\r\n\r\nexport function generateUniqueId(): number {\r\n    return Date.now() + Math.random();\r\n}\r\n\r\nexport enum GraphLogType {\r\n    Info = 0, Warning = 1, Error = 2, RetryableError = 3\r\n}\r\n\r\nexport enum GraphLogErrorSeverity {\r\n    Low = 0, Medium = 1, High = 2, Critical = 3\r\n}\r\n",
            "properties": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "logType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLogType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "messageDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "GraphLog",
            "id": "interface-GraphLog-f7827c2ec3bda4c7e79c7adce0350f79-1",
            "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export const nwGraphErrorName = \"NwGraphError\";\r\n\r\nexport interface GraphLog {\r\n    id: number; \r\n    entityId?: string; \r\n    nodeIds?: string[]; \r\n    logType: GraphLogType; \r\n    source: string; \r\n    message: string; \r\n    messageDesc: string; \r\n    timestamp: Date;\r\n}\r\n\r\nexport class GraphError extends Error {\r\n    logObj: GraphLog; \r\n    constructor(logobj: GraphLog, ...params: string[]) {\r\n        super(...params); \r\n        this.logObj = logobj; \r\n        this.name = nwGraphErrorName;\r\n    }\r\n}\r\n\r\nexport function extractGraphLogFromError(err: Error | GraphError): GraphLog {\r\n    if(err.name === nwGraphErrorName) {\r\n        return (err as GraphError).logObj;\r\n    } else { \r\n        return { id: generateUniqueId(), logType: GraphLogType.Error, \r\n                    message: err.message, source: \"Unknown\",\r\n                    messageDesc: err.message, \r\n                    timestamp: new Date() } as GraphLog;\r\n    }\r\n}\r\n\r\nexport function generateUniqueId(): number {\r\n    return Date.now() + Math.random();\r\n}\r\n\r\nexport enum GraphLogType {\r\n    Info = 0, Warning = 1, Error = 2, RetryableError = 3\r\n}\r\n\r\nexport enum GraphLogErrorSeverity {\r\n    Low = 0, Medium = 1, High = 2, Critical = 3\r\n}\r\n",
            "properties": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "logType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLogType",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "messageDesc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphLog-1"
        },
        {
            "name": "GraphOptions",
            "id": "interface-GraphOptions-9f75fbe6eebcf0970b0a3a52000fa2e3",
            "file": "libs/nw-graph-angular/src/lib/models/graph-adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INwData } from \"./nw-data\";\r\n\r\nexport interface GraphAdapter {\r\n    initialize(options: GraphOptions): void;\r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number): void;\r\n}\r\n\r\nexport interface GraphOptions {\r\n    width: number; \r\n    height: number; \r\n    nodeRadius: number; \r\n}",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodeRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "GraphOptions",
            "id": "interface-GraphOptions-86eb98365311ad402d1923b0ce2058c8-1",
            "file": "libs/nw-graph-angular5/src/app/models/graph-adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INwData } from \"./nw-data\";\r\n\r\nexport interface GraphAdapter {\r\n    initialize(options: GraphOptions): void;\r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number): Promise<void>;\r\n}\r\n\r\nexport interface GraphOptions {\r\n    width: number; \r\n    height: number; \r\n    nodeRadius: number; \r\n}",
            "properties": [
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nodeRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphOptions-1"
        },
        {
            "name": "GraphUserInfo",
            "id": "interface-GraphUserInfo-a6f687dc4537d014e5778a9620163f42",
            "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport {Observable} from 'rxjs/Observable';\r\n \r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\ninterface GraphUserInfo {\r\n    userId?: string;\r\n    fluCodes?: string[];\r\n    nodes?: string[];\r\n    exAttributes?: string[];\r\n    authToken?: string[];\r\n}\r\n\r\nexport const AppConstants = {\r\n    user_object: 'user_object',\r\n    access_token: 'access_token'\r\n}\r\n \r\n@Injectable()\r\nexport class NetworkGraphHostService {\r\n    // const baseUrl = 'http://localhost:3001/gfcranalytics';\r\n    baseUrl = 'http://localhost:3001';\r\n    localStoreUserObject: any;\r\n    defaultEntitlementMap: any;\r\n    defaultAuthToken: string;\r\n \r\n    constructor(private http:HttpClient) {\r\n        this.defaultEntitlementMap = {\r\n            appUser: {\r\n                userEntitlementMap: {\r\n                    FIELD: [],\r\n                    FLU: [],\r\n                    NODE: ['entity', 'party', 'address', 'phone', 'email', 'ssn', 'itn', 'ein', 'account', 'case']\r\n                }\r\n            },\r\n            uid: \"\"\r\n        };\r\n        this.defaultAuthToken = 'empty';\r\n     }\r\n    // get_network_nodes?node_id=90057&node_type=gfctEntity&num_hops=2&max_nodes=100&flucodes=CNS_RTL_BNK&flucodes=DBAC_AML_CDC&vertices\r\n\r\n    getNwConfig(): Observable<any> {\r\n        const url = this.baseUrl + '/get_application_config?appID=entitiesgraph';\r\n        return this.http.get(url);\r\n    }\r\n\r\n    getNwNodes(nodeId: string, nwConfig: any, numHops: number): Observable<any> {\r\n        const rootNodeType = 'gfctEntity';\r\n        const maxNodes = nwConfig.maxNodeCount;\r\n        const userObject = this.getUserObject();\r\n        const nodeTypes = this.transformNodeTypes(userObject.nodes);\r\n        return this.http.get(this.baseUrl + `/get_network_nodes?node_id=${nodeId}&node_type=${rootNodeType}&num_hops=${numHops}&max_nodes=${maxNodes}${this.flucodesQueryString(userObject.fluCodes)}${this.verticesQueryString(nodeTypes)}`);\r\n    }\r\n\r\n    private getUserObject(): GraphUserInfo {\r\n        const localStoreUserStr = localStorage.getItem(AppConstants.user_object);\r\n        if (typeof localStoreUserStr === 'string') {\r\n            this.localStoreUserObject = JSON.parse(localStoreUserStr);\r\n        }\r\n        const userObject = this.mapLocalToUserobject(); \r\n        /*Auth Token Begin*/ \r\n        const xToken: string = sessionStorage.getItem(AppConstants.access_token); \r\n        //const xToken: string = localstorage.getItem(AppConstants.x_auth_token_header); \r\n        userObject.authToken = typeof xToken === 'string'? [xToken] : [this.defaultAuthToken];\r\n        /*Auth Token End*/ \r\n        /*Max Nodes*/ \r\n        return userObject;\r\n    }\r\n    \r\n    private mapLocalToUserobject(): GraphUserInfo {\r\n        const userobject = {} as GraphUserInfo; \r\n        let localUserEntitlementMap;\r\n\r\n        if(this.localStoreUserObject &&\r\n            this.localStoreUserObject.appUser && \r\n            this.localStoreUserObject.appUser.userEntitlementMap && \r\n            Array.isArray(this.localStoreUserObject.appUser.userEntitlementMap.FIELD) && \r\n            Array.isArray(this.localStoreUserObject.appUser.userEntitlementMap.NODE) && \r\n            Array.isArray (this.localStoreUserObject.appUser.userEntitlementMap.FLU)) {\r\n                localUserEntitlementMap = this.localStoreUserObject.appUser.userEntitlementMap;\r\n        } else {\r\n            localUserEntitlementMap = this.defaultEntitlementMap.appUser.userEntitlementMap;\r\n        }\r\n        \r\n        userobject.exAttributes = localUserEntitlementMap.FIELD; \r\n        userobject.nodes = localUserEntitlementMap.NODE; \r\n        userobject.fluCodes = localUserEntitlementMap.FLU; \r\n        userobject.userId = this.localStoreUserObject && this.localStoreUserObject.uid ? \r\n                        this.localStoreUserObject.uid : \"\";\r\n        return userobject;\r\n    } \r\n    \r\n    private transformNodeTypes(nodeTypes: string[]): string[] {\r\n        const gfctNodeTypes = new Set<string>();\r\n        for (const nType of nodeTypes) {\r\n            switch (nType) {\r\n                case 'entity':\r\n                    gfctNodeTypes.add('gfctEntity')\r\n                    break;\r\n                case 'party':\r\n                    gfctNodeTypes.add('gfctParty')\r\n                    break;\r\n                case 'address':\r\n                    gfctNodeTypes.add('gfctAddress')\r\n                    break;\r\n                case 'phone':\r\n                    gfctNodeTypes.add('gfctPhone')\r\n                    break;\r\n                case 'email':\r\n                    gfctNodeTypes.add('gfctEmail')\r\n                    break;\r\n                case 'ssn':\r\n                    gfctNodeTypes.add('gfctSSN')\r\n                    break;\r\n                case 'itn':\r\n                    gfctNodeTypes.add('gfctITN')\r\n                    break;\r\n                case 'ein':\r\n                    gfctNodeTypes.add('gfctEIN')\r\n                    break;\r\n                case 'account':\r\n                    gfctNodeTypes.add('gfctAccount')\r\n                    break;\r\n                case 'case':\r\n                    gfctNodeTypes.add('gfctCase')\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return Array.from(gfctNodeTypes);\r\n    }\r\n\r\n    private verticesQueryString(nodeTypes: string[]): string {\r\n        let qString = \"\";\r\n        for (const nType of nodeTypes) {\r\n            qString = qString + `&vertices=${nType}`;\r\n        }\r\n        return qString;\r\n    }\r\n\r\n    private flucodesQueryString(fluCodes: string[]): string {\r\n        let qString = \"\";\r\n        for (const fluCode of fluCodes) {\r\n            qString = qString + `&flucodes=${fluCode}`;\r\n        }\r\n        return qString;\r\n    }\r\n}",
            "properties": [
                {
                    "name": "authToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "exAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "fluCodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "GraphUserInfo",
            "id": "interface-GraphUserInfo-bf11063aa12106c233bb3bc21ea918b9-1",
            "file": "libs/nw-graph-angular/src/lib/models/graph-user-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export default interface GraphUserInfo {\r\n    userId?: string;\r\n    fluCodes?: string[];\r\n    nodes?: string[];\r\n    exAttributes?: string[];\r\n    authToken?: string[];\r\n    maxNodes?: string;\r\n}",
            "properties": [
                {
                    "name": "authToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "exAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fluCodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "maxNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphUserInfo-1"
        },
        {
            "name": "GraphUserInfo",
            "id": "interface-GraphUserInfo-bf11063aa12106c233bb3bc21ea918b9-2",
            "file": "libs/nw-graph-angular5/src/app/models/graph-user-info.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export default interface GraphUserInfo {\r\n    userId?: string;\r\n    fluCodes?: string[];\r\n    nodes?: string[];\r\n    exAttributes?: string[];\r\n    authToken?: string[];\r\n    maxNodes?: string;\r\n}",
            "properties": [
                {
                    "name": "authToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "exAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "fluCodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "maxNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "GraphUserInfo-2"
        },
        {
            "name": "IEdge",
            "id": "interface-IEdge-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "linkId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "sourceNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "targetNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 64
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-99564d38c8b84dc2a17b2b3702c2cafc",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 163,
            "methods": [],
            "extends": "SimulationLinkDatum"
        },
        {
            "name": "IEdge",
            "id": "interface-IEdge-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "linkId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "sourceNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | string",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "targetNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 63
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-74cf643b64b8533812ea55423a58d9dd",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 163,
            "methods": [],
            "extends": "SimulationLinkDatum",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IEdge-1"
        },
        {
            "name": "INode",
            "id": "interface-INode-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "neighboursStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NeighboursStateType",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "nodeDescAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INodeDescAttribute",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "nodeRawObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "nodeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "r",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "r0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "sourceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NodeId>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "targetIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NodeId>",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-99564d38c8b84dc2a17b2b3702c2cafc",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 163,
            "methods": [],
            "extends": "SimulationNodeDatum"
        },
        {
            "name": "INode",
            "id": "interface-INode-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "collapsed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "neighboursStatus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NeighboursStateType",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nodeDescAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INodeDescAttribute",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "nodeRawObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nodeType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "r",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "sourceIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NodeId>",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "targetIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<NodeId>",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [
                {
                    "id": "index-declaration-74cf643b64b8533812ea55423a58d9dd",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 163,
            "methods": [],
            "extends": "SimulationNodeDatum",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "INode-1"
        },
        {
            "name": "INodeAttribute",
            "id": "interface-INodeAttribute-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "rawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INodeAttribute",
            "id": "interface-INodeAttribute-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "rawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "INodeAttribute-1"
        },
        {
            "name": "INodeDescAttribute",
            "id": "interface-INodeDescAttribute-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "attribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INodeDescAttribute",
            "id": "interface-INodeDescAttribute-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "attribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "INodeDescAttribute-1"
        },
        {
            "name": "INodeType",
            "id": "interface-INodeType-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INodeAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INodeType",
            "id": "interface-INodeType-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INodeAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "INodeType-1"
        },
        {
            "name": "INwData",
            "id": "interface-INwData-99564d38c8b84dc2a17b2b3702c2cafc",
            "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number;\r\n    r0?: number;\r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "edges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<EdgeId | IEdge>",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<NodeId | INode>",
                    "optional": false,
                    "description": "",
                    "line": 77
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "INwData",
            "id": "interface-INwData-74cf643b64b8533812ea55423a58d9dd-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SimulationNodeDatum, SimulationLinkDatum } from 'd3-force'; \r\n\r\n// import { SimulationLinkDatum, SimulationNodeDatum } from \"d3\";\r\n\r\nexport enum NeighboursStateType {\r\n    NOT_LOADED, \r\n    LOADING, \r\n    LOADING_THEN_EXPAND, \r\n    LOADING_FAILED, \r\n    LOADED\r\n}\r\n\r\nexport interface INode extends SimulationNodeDatum {\r\n    id?: string; \r\n    type?: string; \r\n    label?: string; \r\n    r?: number; \r\n    neighboursStatus?: NeighboursStateType; \r\n    sourceIds?: Array<NodeId>; \r\n    targetIds?: Array<NodeId>; \r\n    [key: string]: any;\r\n    nodeId: string; \r\n    nodeType: string; \r\n    title: string; \r\n    nodeRawObject: any; \r\n    collapsed: boolean; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeDescAttribute: INodeDescAttribute;\r\n    layoutId: number;\r\n}\r\n\r\nexport type NodeId = INode['id']; \r\nexport interface INodeDescAttribute {\r\n    attribute: string; \r\n    title: string;\r\n}\r\nexport interface INodeAttribute{\r\n    key: string; \r\n    displayName: string; \r\n    rawPath: string; \r\n    tooltip: boolean;\r\n}\r\n\r\nexport type NodeAttributeId = INodeAttribute['key'];\r\n\r\nexport interface INodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: INodeAttribute[]; \r\n    // alerts:\r\n}\r\n\r\nexport interface IEdge extends SimulationLinkDatum<SimulationNodeDatum> {\r\n    index?: number; \r\n    id: string; \r\n    source: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string; \r\n    target: {x?: number, y?: number, fx?: number, fy?: number, vx?: number, vy?: number} | string;\r\n    // sourceNodeId: string; \r\n    // targetNodeId: string; \r\n    title?: string; \r\n    [key: string]: any;\r\n    // Hack \r\n    sourceNodeId: string; \r\n    targetNodeId: string; \r\n    linkId: string; \r\n    name: string;\r\n    layoutId: number;\r\n}\r\n\r\nexport type EdgeId = IEdge['id'];\r\n\r\nexport interface INwData {\r\n    nodes: Map<NodeId, INode>; \r\n    edges: Map<EdgeId, IEdge>;\r\n}\r\n\r\nexport function cloneNwData(data: INwData) {\r\n    const clonedNwData = {...data};\r\n    const clonedNodes = new Map<NodeId, INode>();\r\n    const clonedEdges = new Map<EdgeId, IEdge>();\r\n\r\n    for (const [key, value] of clonedNwData.nodes) {\r\n        clonedNodes.set(key, {...value});\r\n    }\r\n\r\n    for (const [key, value] of clonedNwData.edges) {\r\n        clonedEdges.set(key, {...value});\r\n    }\r\n}",
            "properties": [
                {
                    "name": "edges",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<EdgeId | IEdge>",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Map<NodeId | INode>",
                    "optional": false,
                    "description": "",
                    "line": 76
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "INwData-1"
        },
        {
            "name": "LayoutChangeMessage",
            "id": "interface-LayoutChangeMessage-5b5b29a1c66e291522094f5164e86660",
            "file": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "properties": [
                {
                    "name": "currentLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "previousLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LayoutChangeMessage",
            "id": "interface-LayoutChangeMessage-ba02448d08b5c788624af3bacc17ab3a-1",
            "file": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "properties": [
                {
                    "name": "currentLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "previousLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LayoutChangeMessage-1"
        },
        {
            "name": "LoadNodesPayload",
            "id": "interface-LoadNodesPayload-b9ca8786e2db854545418a746282b24c",
            "file": "libs/nw-graph-angular/src/lib/models/load-nodes-payload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode } from './nw-data';\r\n\r\nexport interface LoadNodesPayload {\r\n    rootNodeId: string;\r\n    nodesToLoad: INode[];\r\n    currentVisibleNodes: INode[];\r\n    loadByClick: boolean;\r\n}\r\n\r\nexport interface TransformInfo {\r\n    x: number; \r\n    y: number; \r\n    k: number;\r\n}",
            "properties": [
                {
                    "name": "currentVisibleNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loadByClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nodesToLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "LoadNodesPayload",
            "id": "interface-LoadNodesPayload-b9ca8786e2db854545418a746282b24c-1",
            "file": "libs/nw-graph-angular5/src/app/models/load-nodes-payload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode } from './nw-data';\r\n\r\nexport interface LoadNodesPayload {\r\n    rootNodeId: string;\r\n    nodesToLoad: INode[];\r\n    currentVisibleNodes: INode[];\r\n    loadByClick: boolean;\r\n}\r\n\r\nexport interface TransformInfo {\r\n    x: number; \r\n    y: number; \r\n    k: number;\r\n}",
            "properties": [
                {
                    "name": "currentVisibleNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "loadByClick",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "nodesToLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadNodesPayload-1"
        },
        {
            "name": "NodeRequest",
            "id": "interface-NodeRequest-8f51a0c86f605408b24ef3586665c42c",
            "file": "libs/nw-graph-angular/src/lib/models/node-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NodeRequest {\r\n    id: string;\r\n    idType: IdTypes;\r\n    depth: number;\r\n    nodeAttributes: any;\r\n}\r\n\r\nexport enum IdTypes {\r\n    node = 1,\r\n    entity,\r\n    party\r\n}",
            "properties": [
                {
                    "name": "depth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "idType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IdTypes",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NodeRequest",
            "id": "interface-NodeRequest-8f51a0c86f605408b24ef3586665c42c-1",
            "file": "libs/nw-graph-angular5/src/app/models/node-request.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface NodeRequest {\r\n    id: string;\r\n    idType: IdTypes;\r\n    depth: number;\r\n    nodeAttributes: any;\r\n}\r\n\r\nexport enum IdTypes {\r\n    node = 1,\r\n    entity,\r\n    party\r\n}",
            "properties": [
                {
                    "name": "depth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "idType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IdTypes",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NodeRequest-1"
        },
        {
            "name": "NotificationMessage",
            "id": "interface-NotificationMessage-5b5b29a1c66e291522094f5164e86660",
            "file": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "properties": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nodeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NotificationMessage",
            "id": "interface-NotificationMessage-ba02448d08b5c788624af3bacc17ab3a-1",
            "file": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "properties": [
                {
                    "name": "entityId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "nodeIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NotificationMessage-1"
        },
        {
            "name": "NwAttribute",
            "id": "interface-NwAttribute-82273dfae789bad426b6602590984bb6",
            "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number;\r\n    rootNodeRadius: number;\r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttributeKey: string; \r\n    nodeTypeAttributeKey: string; \r\n    nodeTitleAttributeKey: string; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttributeKey: string; \r\n    edgeTargetIdAttributeKey: string; \r\n    edgeTitleAttributeKey: string; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "rawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 79
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NwAttribute",
            "id": "interface-NwAttribute-3272812aebb6268fb5cd5bc228b97eb0-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number; \r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttribute: NwAttribute | null; \r\n    nodeTypeAttribute: NwAttribute | null; \r\n    nodeTitleAttribute: NwAttribute | null; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttribute: NwAttribute | null; \r\n    edgeTargetIdAttribute: NwAttribute | null; \r\n    edgeTitleAttribute: NwAttribute | null; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "rawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 78
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwAttribute-1"
        },
        {
            "name": "NwConfig",
            "id": "interface-NwConfig-82273dfae789bad426b6602590984bb6",
            "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number;\r\n    rootNodeRadius: number;\r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttributeKey: string; \r\n    nodeTypeAttributeKey: string; \r\n    nodeTitleAttributeKey: string; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttributeKey: string; \r\n    edgeTargetIdAttributeKey: string; \r\n    edgeTitleAttributeKey: string; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "autoExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "displayLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "edge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwEdge | null",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "maxNodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "maxSelectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwNode | null",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "nodeRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "numHops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rootNodeRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "viewportHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NwConfig",
            "id": "interface-NwConfig-3272812aebb6268fb5cd5bc228b97eb0-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number; \r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttribute: NwAttribute | null; \r\n    nodeTypeAttribute: NwAttribute | null; \r\n    nodeTitleAttribute: NwAttribute | null; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttribute: NwAttribute | null; \r\n    edgeTargetIdAttribute: NwAttribute | null; \r\n    edgeTitleAttribute: NwAttribute | null; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "autoExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "displayLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "edge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwEdge | null",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "maxNodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "maxSelectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwNode | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "nodeRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "numHops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "viewportHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwConfig-1"
        },
        {
            "name": "NwEdge",
            "id": "interface-NwEdge-82273dfae789bad426b6602590984bb6",
            "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number;\r\n    rootNodeRadius: number;\r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttributeKey: string; \r\n    nodeTypeAttributeKey: string; \r\n    nodeTitleAttributeKey: string; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttributeKey: string; \r\n    edgeTargetIdAttributeKey: string; \r\n    edgeTitleAttributeKey: string; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "edgeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "edgeSourceIdAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "edgeTargetIdAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "edgeTitleAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "parentRawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 60
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NwEdge",
            "id": "interface-NwEdge-3272812aebb6268fb5cd5bc228b97eb0-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number; \r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttribute: NwAttribute | null; \r\n    nodeTypeAttribute: NwAttribute | null; \r\n    nodeTitleAttribute: NwAttribute | null; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttribute: NwAttribute | null; \r\n    edgeTargetIdAttribute: NwAttribute | null; \r\n    edgeTitleAttribute: NwAttribute | null; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "edgeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "edgeSourceIdAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "edgeTargetIdAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "edgeTitleAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "parentRawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 59
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwEdge-1"
        },
        {
            "name": "NwNode",
            "id": "interface-NwNode-82273dfae789bad426b6602590984bb6",
            "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number;\r\n    rootNodeRadius: number;\r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttributeKey: string; \r\n    nodeTypeAttributeKey: string; \r\n    nodeTitleAttributeKey: string; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttributeKey: string; \r\n    edgeTargetIdAttributeKey: string; \r\n    edgeTitleAttributeKey: string; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "nodeIdAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "nodeTitleAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "nodeTypeAttributeKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwNodeType[]",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "parentRawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NwNode",
            "id": "interface-NwNode-3272812aebb6268fb5cd5bc228b97eb0-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number; \r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttribute: NwAttribute | null; \r\n    nodeTypeAttribute: NwAttribute | null; \r\n    nodeTitleAttribute: NwAttribute | null; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttribute: NwAttribute | null; \r\n    edgeTargetIdAttribute: NwAttribute | null; \r\n    edgeTitleAttribute: NwAttribute | null; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "nodeIdAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "nodeTitleAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "nodeTypeAttribute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwNodeType[]",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "parentRawPath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwNode-1"
        },
        {
            "name": "NwNodeType",
            "id": "interface-NwNodeType-82273dfae789bad426b6602590984bb6",
            "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number;\r\n    rootNodeRadius: number;\r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttributeKey: string; \r\n    nodeTypeAttributeKey: string; \r\n    nodeTitleAttributeKey: string; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttributeKey: string; \r\n    edgeTargetIdAttributeKey: string; \r\n    edgeTitleAttributeKey: string; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 72
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "NwNodeType",
            "id": "interface-NwNodeType-3272812aebb6268fb5cd5bc228b97eb0-1",
            "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EMPTY_STRING } from \"../utils\";\r\n\r\nexport const defaultNwConfig: Readonly<NwConfig> = Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n});\r\n\r\nexport const defaultNwNodeConfig: Readonly<NwNode> = Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n});\r\n\r\nexport const defaultNwEdgeConfig: Readonly<NwEdge> = Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n});\r\n\r\nexport const defaultNwAttribute: Readonly<NwAttribute> = Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n});\r\n    \r\nexport interface NwConfig {\r\n    maxSelectedNodes: number; \r\n    displayLabel: boolean;\r\n    autoExpand: boolean; \r\n    numHops: number; \r\n    maxNodeCount: number; \r\n    viewportHeight: number; \r\n    nodeRadius: number; \r\n    node: NwNode | null; \r\n    edge: NwEdge | null;\r\n}\r\n\r\nexport interface NwNode {\r\n    parentRawPath: string[]; \r\n    nodeIdAttribute: NwAttribute | null; \r\n    nodeTypeAttribute: NwAttribute | null; \r\n    nodeTitleAttribute: NwAttribute | null; \r\n    nodeTypes: NwNodeType[];\r\n}\r\n\r\nexport interface NwEdge { \r\n    parentRawPath: string[]; \r\n    edgeSourceIdAttribute: NwAttribute | null; \r\n    edgeTargetIdAttribute: NwAttribute | null; \r\n    edgeTitleAttribute: NwAttribute | null; \r\n    edgeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwNodeType {\r\n    name: string; \r\n    displayName: string; \r\n    color: string; \r\n    imagePath: string; \r\n    nodeAttributes: NwAttribute[];\r\n}\r\n\r\nexport interface NwAttribute {\r\n    key?: string; \r\n    displayName?: string; \r\n    rawPath: string[] | undefined; \r\n    tooltip?: boolean;\r\n}",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "displayName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "imagePath",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "nodeAttributes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwAttribute[]",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwNodeType-1"
        },
        {
            "name": "NwRawConfig",
            "id": "interface-NwRawConfig-af67475b83d16236f8541655bb23c1d1",
            "file": "libs/nw-graph-angular/src/lib/services/config-parser.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs';\r\nimport { defaultNwAttribute, defaultNwEdgeConfig, defaultNwNodeConfig, NwAttribute, NwEdge, NwNodeType } from '../models/nw-config'; \r\nimport { defaultNwConfig, NwConfig, NwNode} from \"../models/nw-config\"; \r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, toBoolean, toPositiveInteger } from \"../utils\"; \r\n\r\ninterface NwRawConfig {\r\n    [key: string]: any;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigParserService {\r\n    public nwRawConfig: any; \r\n    public nwConfig: NwConfig = {...defaultNwConfig, node: null, edge: null}; \r\n    public nwNodeTypes = new Map<string, NwNodeType>();\r\n    public nwNodeTypeRawPath: string[] | null = null;\r\n    public processNodeWithUnknownNodeType = false;\r\n    private notificationNumHops = new Subject<number>();\r\n    notificationNumHops$: Observable<number> = this.notificationNumHops.asObservable();\r\n    notififyNumHopsChange(message: number | undefined) {\r\n        if(!this.nwConfig) {\r\n            this.nwConfig = {...defaultNwConfig, node: null, edge: null};\r\n        }\r\n        this.nwConfig.numHops = typeof message === 'number'? message : this.nwConfig.numHops;\r\n        this.notificationNumHops.next(this.nwConfig.numHops);\r\n    }\r\n\r\n    private notificationUpdated = new Subject<number>();\r\n    notificationUpdated$ = this.notificationUpdated.asObservable();\r\n    notifyUpdated() {\r\n        this.notificationUpdated.next();\r\n    }\r\n\r\n    public parseConfig(config: any) {\r\n        if(typeof config === 'object' && config !== null) {\r\n            this.nwRawConfig = config; \r\n            this.setProcessNodeWithUnknownNodeType();\r\n            this.setMandatoryConfig(); \r\n            this.setNodeConfig(); \r\n            this.setNodeTypesConfig(); \r\n            this.setEdgeConfig();\r\n            this.setEdgeAttributesConfig(); \r\n        } else {\r\n            this.nwRawConfig = undefined; \r\n            console.error(\"Invalid config!\");\r\n        }\r\n    }\r\n\r\n    private setProcessNodeWithUnknownNodeType() { \r\n        this.processNodeWithUnknownNodeType = this.nwRawConfig && this.nwRawConfig.processNodeWithUnknownNodeType === true? true : false;\r\n    }\r\n        \r\n    private setMandatoryConfig() { \r\n        if(typeof this.nwRawConfig === 'object' && this.nwRawConfig !== null) {\r\n            this.nwConfig.maxSelectedNodes = toPositiveInteger(this.nwRawConfig.maxSelectedNodes, defaultNwConfig.maxSelectedNodes); \r\n            this.nwConfig.displayLabel = toBoolean(this.nwRawConfig.displayLabel, defaultNwConfig.displayLabel); \r\n            this.nwConfig.autoExpand = toBoolean(this.nwRawConfig.autoExpand, defaultNwConfig.autoExpand); \r\n            this.nwConfig.numHops = toPositiveInteger(this.nwRawConfig.numHops, defaultNwConfig.numHops); \r\n            this.nwConfig.maxNodeCount = toPositiveInteger(this.nwRawConfig.maxNodeCount, defaultNwConfig.maxNodeCount);\r\n            this.nwConfig.viewportHeight = toPositiveInteger(this.nwRawConfig.viewportHeight, defaultNwConfig.viewportHeight); \r\n            this.nwConfig.nodeRadius = toPositiveInteger(this.nwRawConfig.nodeRadius, defaultNwConfig.nodeRadius);\r\n            this.nwConfig.rootNodeRadius = toPositiveInteger(this.nwRawConfig.rootNodeRadius, defaultNwConfig.rootNodeRadius);\r\n        }\r\n    }\r\n\r\n    private setNodeConfig() {\r\n        let nodeRawConfig = (this.nwRawConfig && this.nwRawConfig.node? this.nwRawConfig.node: {}) as NwNode;\r\n        this.nwConfig.node = {...defaultNwNodeConfig};\r\n\r\n        if(isArrayOfNonEmptyStrings(nodeRawConfig.parentRawPath)) {\r\n            this.nwConfig.node.parentRawPath = nodeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeIdAttributeKey === 'string' && nodeRawConfig.nodeIdAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeIdAttributeKey = nodeRawConfig.nodeIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeIdAttributeKey for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeTypeAttributeKey === 'string' && nodeRawConfig.nodeTypeAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeTypeAttributeKey = nodeRawConfig.nodeTypeAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeTypeAttributeKey for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeTitleAttributeKey === 'string' && nodeRawConfig.nodeTitleAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeTitleAttributeKey = nodeRawConfig.nodeTitleAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeTitleAttributeKey for Nodes\");\r\n        }\r\n    }\r\n    \r\n    private setNodeTypesConfig() { \r\n        let nodeTypesRawConfig = (this.nwRawConfig && this.nwRawConfig.node \r\n                                    && Array.isArray((this.nwRawConfig.node as NwNode).nodeTypes) ? (this.nwRawConfig.node as NwNode).nodeTypes: []) as NwNodeType[]; \r\n        for (const nodeTypeFromConfig of nodeTypesRawConfig) {\r\n            let nodeType: NwNodeType; \r\n            let nodeAttributes = []; \r\n            let nodeAttributesRawConfig = Array.isArray(nodeTypeFromConfig.nodeAttributes) ? nodeTypeFromConfig.nodeAttributes: []; \r\n            \r\n            for(const nAttr of nodeAttributesRawConfig) {\r\n                const nodeAttribute = {\r\n                    key: typeof nAttr.key === 'string'? nAttr.key: EMPTY_STRING, \r\n                    displayName: typeof nAttr.displayName === 'string'? nAttr.displayName: EMPTY_STRING, \r\n                    rawPath: Array.isArray(nAttr.rawPath)? nAttr.rawPath: [],\r\n                    tooltip: typeof nAttr.tooltip === 'boolean'? nAttr.tooltip: false \r\n                    };\r\n                nodeAttributes.push(nodeAttribute);\r\n                if(this.nwConfig && this.nwConfig.node && this.nwConfig.node.nodeTypeAttributeKey) {\r\n                    if(this.nwConfig.node.nodeTypeAttributeKey === nodeAttribute.key) {\r\n                        if(this.nwNodeTypeRawPath) {\r\n                            if(this.nwNodeTypeRawPath.join('') !== nodeAttribute.rawPath.join('')) {\r\n                                console.error(\"nodeTypeAttributeKey's rawPath must be same in every nodeType's nodeAttributes\");\r\n                            }\r\n                        } else {\r\n                            this.nwNodeTypeRawPath = nodeAttribute.rawPath;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.error(\"nodeTypeAttributeKey is missing in config\");\r\n                }\r\n            }\r\n            nodeType = {\r\n                name: typeof nodeTypeFromConfig.name === 'string'? nodeTypeFromConfig.name : EMPTY_STRING, \r\n                displayName: typeof nodeTypeFromConfig.displayName === 'string'? nodeTypeFromConfig.displayName : EMPTY_STRING, \r\n                color: typeof nodeTypeFromConfig.color === 'string'? nodeTypeFromConfig.color : EMPTY_STRING, \r\n                imagePath: typeof nodeTypeFromConfig.imagePath === 'string'? nodeTypeFromConfig.imagePath: EMPTY_STRING, \r\n                nodeAttributes: nodeAttributes\r\n            };\r\n            if(nodeType && typeof nodeType.name === 'string' && nodeType.name.length > 0) {\r\n                this.nwNodeTypes.set(nodeType.name, nodeType);\r\n            }\r\n            if(this.nwConfig && this.nwConfig.node && Array.isArray(this.nwConfig.node.nodeTypes)) { \r\n                this.nwConfig.node.nodeTypes.push(nodeType);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setEdgeAttributesConfig() { \r\n        let edgeAttributesRawConfig = (this.nwRawConfig && this.nwRawConfig.edge && Array.isArray((this.nwRawConfig.edge as NwEdge).edgeAttributes) ? (this.nwRawConfig.edge as NwEdge).edgeAttributes: []) as NwAttribute[]; \r\n        \r\n        for(const edgeAttributeFromConfig of edgeAttributesRawConfig) { \r\n            if(this.nwConfig && this.nwConfig.edge && Array.isArray(this.nwConfig.edge.edgeAttributes)) { \r\n                this.nwConfig.edge.edgeAttributes.push({\r\n                    key: typeof edgeAttributeFromConfig.key === 'string'? edgeAttributeFromConfig.key: EMPTY_STRING, \r\n                    displayName: typeof edgeAttributeFromConfig.displayName === 'string'? \r\n                    edgeAttributeFromConfig.displayName : EMPTY_STRING, \r\n                    rawPath: Array.isArray(edgeAttributeFromConfig.rawPath) ? edgeAttributeFromConfig.rawPath: [], \r\n                    tooltip: typeof edgeAttributeFromConfig.tooltip === 'string'? edgeAttributeFromConfig.tooltip : false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEdgeConfig() {\r\n        let edgeRawConfig = (this.nwRawConfig && this.nwRawConfig.edge? this.nwRawConfig.edge: {}) as NwEdge;\r\n        this.nwConfig.edge = {...defaultNwEdgeConfig};\r\n        if(this.nwConfig && this.nwConfig.edge && isArrayOfNonEmptyStrings(edgeRawConfig.parentRawPath)) {\r\n            this.nwConfig.edge.parentRawPath = edgeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeSourceIdAttributeKey === 'string' && edgeRawConfig.edgeSourceIdAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeSourceIdAttributeKey = edgeRawConfig.edgeSourceIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeSourceIdAttributeKey for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeTargetIdAttributeKey === 'string' && edgeRawConfig.edgeTargetIdAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeTargetIdAttributeKey = edgeRawConfig.edgeTargetIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeTargetIdAttributeKey for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeTitleAttributeKey === 'string' && edgeRawConfig.edgeTitleAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeTitleAttributeKey = edgeRawConfig.edgeTitleAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeTitleAttributeKey for Edges\");\r\n        }\r\n    }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-af67475b83d16236f8541655bb23c1d1",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": []
        },
        {
            "name": "NwRawConfig",
            "id": "interface-NwRawConfig-1623b551e790e7a1bf9163134a631e8c-1",
            "file": "libs/nw-graph-angular5/src/app/services/config-parser.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { defaultNwAttribute, defaultNwEdgeConfig, defaultNwNodeConfig, NwAttribute, NwEdge, NwNodeType } from '../models/nw-config'; \r\nimport { defaultNwConfig, NwConfig, NwNode} from \"../models/nw-config\"; \r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, isStringNullorEmpty, toBoolean, toPositiveInteger } from \"../utils\"; \r\n\r\ninterface NwRawConfig {\r\n    [key: string]: any;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigParserService {\r\n    public nwRawConfig: any; \r\n    public nwConfig: NwConfig = {...defaultNwConfig, node: null, edge: null}; \r\n    public nwNodeTypes = new Map<string, NwNodeType>();\r\n    public processNodeWithUnknownNodeType = false;\r\n    private notificationNumHops = new Subject<number>();\r\n    notificationNumHops$: Observable<number> = this.notificationNumHops.asObservable();\r\n    notififyNumHopsChange(message: number | undefined) {\r\n        if(!this.nwConfig) {\r\n            this.nwConfig = {...defaultNwConfig, node: null, edge: null};\r\n        }\r\n        this.nwConfig.numHops = typeof message === 'number'? message : this.nwConfig.numHops;\r\n        this.notificationNumHops.next(this.nwConfig.numHops);\r\n    }\r\n\r\n    private notificationUpdated = new Subject<number>();\r\n    notificationUpdated$ = this.notificationUpdated.asObservable();\r\n    notifyUpdated() {\r\n        this.notificationUpdated.next();\r\n    }\r\n\r\n    public parseConfig(config: any) {\r\n        if(typeof config === 'object' && config !== null) {\r\n            this.nwRawConfig = config; \r\n            this.setProcessNodeWithUnknownNodeType();\r\n            this.setMandatoryConfig(); \r\n            this.setNodeConfig(); \r\n            this.setNodeTypesConfig(); \r\n            this.setEdgeConfig();\r\n            this.setEdgeAttributesConfig(); \r\n        } else {\r\n            this.nwRawConfig = undefined; \r\n            console.error(\"Invalid config!\");\r\n        }\r\n    }\r\n\r\n    private setProcessNodeWithUnknownNodeType() { \r\n        this.processNodeWithUnknownNodeType = this.nwRawConfig && this.nwRawConfig.processNodeWithUnknownNodeType === true? true : false;\r\n    }\r\n        \r\n    private setMandatoryConfig() { \r\n        if(typeof this.nwRawConfig === 'object' && this.nwRawConfig !== null) {\r\n            this.nwConfig.maxSelectedNodes = toPositiveInteger(this.nwRawConfig.maxSelectedNodes, defaultNwConfig.maxSelectedNodes); \r\n            this.nwConfig.displayLabel = toBoolean(this.nwRawConfig.displayLabel, defaultNwConfig.displayLabel); \r\n            this.nwConfig.autoExpand = toBoolean(this.nwRawConfig.autoExpand, defaultNwConfig.autoExpand); \r\n            this.nwConfig.numHops = toPositiveInteger(this.nwRawConfig.numHops, defaultNwConfig.numHops); \r\n            this.nwConfig.maxNodeCount = toPositiveInteger(this.nwRawConfig.maxNodeCount, defaultNwConfig.maxNodeCount);\r\n            this.nwConfig.viewportHeight = toPositiveInteger(this.nwRawConfig.viewportHeight, defaultNwConfig.viewportHeight); \r\n            this.nwConfig.nodeRadius = toPositiveInteger(this.nwRawConfig.nodeRadius, defaultNwConfig.nodeRadius);\r\n        }\r\n    }\r\n\r\n    private setNodeConfig() {\r\n        let nodeRawConfig = (this.nwRawConfig && this.nwRawConfig.node? this.nwRawConfig.node: {}) as NwNode;\r\n        this.nwConfig.node = {...defaultNwNodeConfig};\r\n\r\n        if(isArrayOfNonEmptyStrings(nodeRawConfig.parentRawPath)) {\r\n            this.nwConfig.node.parentRawPath = nodeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Nodes\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeIdAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeIdAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeIdAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeIdAttribute) {\r\n                this.nwConfig.node.nodeIdAttribute.rawPath = nodeRawConfig.nodeIdAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeIdAttribute.key)? this.nwConfig.node.nodeIdAttribute.key = nodeRawConfig.nodeIdAttribute.key: null; \r\n                !isStringNullorEmpty (nodeRawConfig.nodeIdAttribute.displayName)? this.nwConfig.node.nodeIdAttribute.displayName = nodeRawConfig.nodeIdAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeIdAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeIdAttribute.tooltip = nodeRawConfig.nodeIdAttribute.tooltip: null;\r\n            } \r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeIdAttribute\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeTypeAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeTypeAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeTypeAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeTypeAttribute) {\r\n                this.nwConfig.node.nodeTypeAttribute.rawPath = nodeRawConfig.nodeTypeAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTypeAttribute.key)? this.nwConfig.node.nodeTypeAttribute.key = nodeRawConfig.nodeTypeAttribute.key: null; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTypeAttribute.displayName)? this.nwConfig.node.nodeTypeAttribute.displayName = nodeRawConfig.nodeTypeAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeTypeAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeTypeAttribute.tooltip = nodeRawConfig.nodeTypeAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeTypeAttribute\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeTitleAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeTitleAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeTitleAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeTitleAttribute) {\r\n                this.nwConfig.node.nodeTitleAttribute.rawPath = nodeRawConfig.nodeTitleAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTitleAttribute.key)? this.nwConfig.node.nodeTitleAttribute.key = nodeRawConfig.nodeTitleAttribute.key : null; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTitleAttribute.displayName)? this.nwConfig.node.nodeTitleAttribute.displayName = nodeRawConfig.nodeTitleAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeTitleAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeTitleAttribute.tooltip = nodeRawConfig.nodeTitleAttribute.tooltip : null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeTitleAttribute\");\r\n        }\r\n    }\r\n    \r\n    private setNodeTypesConfig() { \r\n        let nodeTypesRawConfig = (this.nwRawConfig && this.nwRawConfig.node \r\n                                    && Array.isArray((this.nwRawConfig.node as NwNode).nodeTypes) ? (this.nwRawConfig.node as NwNode).nodeTypes: []) as NwNodeType[]; \r\n        for (const nodeTypeFromConfig of nodeTypesRawConfig) {\r\n            let nodeType: NwNodeType; \r\n            let nodeAttributes = []; \r\n            let nodeAttributesRawConfig = Array.isArray(nodeTypeFromConfig.nodeAttributes) ? nodeTypeFromConfig.nodeAttributes: []; \r\n            \r\n            for(const nAttr of nodeAttributesRawConfig) { \r\n                nodeAttributes.push({\r\n                    key: typeof nAttr.key === 'string'? nAttr.key: EMPTY_STRING, \r\n                    displayName: typeof nAttr.displayName === 'string'? nAttr.displayName: EMPTY_STRING, \r\n                    rawPath: Array.isArray(nAttr.rawPath)? nAttr.rawPath: [],\r\n                    tooltip: typeof nAttr.tooltip === 'boolean'? nAttr.tooltip: false \r\n                    });\r\n            }\r\n            nodeType = {\r\n                name: typeof nodeTypeFromConfig.name === 'string'? nodeTypeFromConfig.name : EMPTY_STRING, \r\n                displayName: typeof nodeTypeFromConfig.displayName === 'string'? nodeTypeFromConfig.displayName : EMPTY_STRING, \r\n                color: typeof nodeTypeFromConfig.color === 'string'? nodeTypeFromConfig.color : EMPTY_STRING, \r\n                imagePath: typeof nodeTypeFromConfig.imagePath === 'string'? nodeTypeFromConfig.imagePath: EMPTY_STRING, \r\n                nodeAttributes: nodeAttributes\r\n            };\r\n            if(nodeType && typeof nodeType.name === 'string' && nodeType.name.length > 0) {\r\n                this.nwNodeTypes.set(nodeType.name, nodeType);\r\n            }\r\n            if(this.nwConfig && this.nwConfig.node && Array.isArray(this.nwConfig.node.nodeTypes)) { \r\n                this.nwConfig.node.nodeTypes.push(nodeType);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setEdgeAttributesConfig() { \r\n        let edgeAttributesRawConfig = (this.nwRawConfig && this.nwRawConfig.edge && Array.isArray((this.nwRawConfig.edge as NwEdge).edgeAttributes) ? (this.nwRawConfig.edge as NwEdge).edgeAttributes: []) as NwAttribute[]; \r\n        \r\n        for(const edgeAttributeFromConfig of edgeAttributesRawConfig) { \r\n            if(this.nwConfig && this.nwConfig.edge && Array.isArray(this.nwConfig.edge.edgeAttributes)) { \r\n                this.nwConfig.edge.edgeAttributes.push({\r\n                    key: typeof edgeAttributeFromConfig.key === 'string'? edgeAttributeFromConfig.key: EMPTY_STRING, \r\n                    displayName: typeof edgeAttributeFromConfig.displayName === 'string'? \r\n                    edgeAttributeFromConfig.displayName : EMPTY_STRING, \r\n                    rawPath: Array.isArray(edgeAttributeFromConfig.rawPath) ? edgeAttributeFromConfig.rawPath: [], \r\n                    tooltip: typeof edgeAttributeFromConfig.tooltip === 'string'? edgeAttributeFromConfig.tooltip : false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEdgeConfig() {\r\n        let edgeRawConfig = (this.nwRawConfig && this.nwRawConfig.edge? this.nwRawConfig.edge: {}) as NwEdge;\r\n        this.nwConfig.edge = {...defaultNwEdgeConfig};\r\n        if(this.nwConfig && this.nwConfig.edge && isArrayOfNonEmptyStrings(edgeRawConfig.parentRawPath)) {\r\n            this.nwConfig.edge.parentRawPath = edgeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Edges\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeSourceIdAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeSourceIdAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeSourceIdAttribute = {...defaultNwAttribute};\r\n            if(edgeRawConfig && edgeRawConfig.edgeSourceIdAttribute) {\r\n                this.nwConfig.edge.edgeSourceIdAttribute.rawPath = edgeRawConfig.edgeSourceIdAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeSourceIdAttribute.key)? this.nwConfig.edge.edgeSourceIdAttribute.key = edgeRawConfig.edgeSourceIdAttribute.key : null; \r\n                !isStringNullorEmpty (edgeRawConfig.edgeSourceIdAttribute.displayName)? this.nwConfig.edge.edgeSourceIdAttribute.displayName = edgeRawConfig.edgeSourceIdAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeSourceIdAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeSourceIdAttribute.tooltip = edgeRawConfig.edgeSourceIdAttribute.tooltip: null;\r\n            }\r\n        } else { \r\n            console.error(\"Invalid rawPath in edge SourceIdAttribute\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeTargetIdAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeTargetIdAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeTargetIdAttribute = {...defaultNwAttribute}; \r\n            if(edgeRawConfig && edgeRawConfig.edgeTargetIdAttribute) {\r\n                this.nwConfig.edge.edgeTargetIdAttribute.rawPath = edgeRawConfig.edgeTargetIdAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTargetIdAttribute.key)? this.nwConfig.edge.edgeTargetIdAttribute.key = edgeRawConfig.edgeTargetIdAttribute.key: null; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTargetIdAttribute.displayName)? this.nwConfig.edge.edgeTargetIdAttribute.displayName = edgeRawConfig.edgeTargetIdAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeTargetIdAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeTargetIdAttribute.tooltip = edgeRawConfig.edgeTargetIdAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in edge TargetIdAttribute\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeTitleAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeTitleAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeTitleAttribute = {...defaultNwAttribute}; \r\n            if(edgeRawConfig && edgeRawConfig.edgeTitleAttribute) {\r\n                this.nwConfig.edge.edgeTitleAttribute.rawPath = edgeRawConfig.edgeTitleAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTitleAttribute.key)? this.nwConfig.edge.edgeTitleAttribute.key = edgeRawConfig.edgeTitleAttribute.key: null; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTitleAttribute.displayName)? this.nwConfig.edge.edgeTitleAttribute.displayName = edgeRawConfig.edgeTitleAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeTitleAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeTitleAttribute.tooltip = edgeRawConfig.edgeTitleAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in edgeTitleAttribute\");\r\n        }\r\n    }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-1623b551e790e7a1bf9163134a631e8c",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 172,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NwRawConfig-1"
        },
        {
            "name": "State",
            "id": "interface-State-e0c79b841ccde99aa7fee7394762ea5b",
            "file": "apps/demo-angular5/src/app/store/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MatTab } from '@angular/material';\r\n\r\nexport const STORE_APP_SLICE_NAME = 'app';\r\n\r\nexport interface State {\r\n    activeTabCustomer360: MatTab;\r\n}\r\n\r\nexport const initialState: State = {\r\n    activeTabCustomer360: null\r\n}",
            "properties": [
                {
                    "name": "activeTabCustomer360",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTab",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-103c8681aec8fefca42198f284aad990-1",
            "file": "libs/nw-graph-angular/src/lib/store/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode, IEdge, NodeId, EdgeId, INwData } from \"../models/nw-data\"; \r\nimport { GraphLog } from \"../models/graph-log\";\r\nimport { TransformInfo } from \"../models/load-nodes-payload\";\r\n// State for graph \r\nexport const STORE_GRAPH_SLICE_NAME = \"nwGraph\";\r\nexport interface State {\r\n    data: INwData | null;// Send to render the graph if rootNodeId is not null. \r\n    nodeTypes: string[];\r\n    autoNetworkExpand: boolean; \r\n    rootNodeId: string | undefined; \r\n    selectedNodes: INode[]; \r\n    excludedNodeTypes: string[]; \r\n    hideLabel: boolean;\r\n    logs: GraphLog[]; \r\n    maxNodesExceeded: boolean;\r\n    activeLayout: number;\r\n    layouts: INwData[];\r\n    layoutTransform: TransformInfo[];\r\n    hasLayoutLoaded: boolean[],\r\n    enableRender: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n};\r\n",
            "properties": [
                {
                    "name": "activeLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "autoNetworkExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "excludedNodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hasLayoutLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hideLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "layouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "layoutTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "logs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "maxNodesExceeded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "State",
            "id": "interface-State-82618b0dddd7e2a5c358b285922934a7-2",
            "file": "libs/nw-graph-angular5/src/app/store/state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode, IEdge, NodeId, EdgeId, INwData } from \"../models/nw-data\"; \r\nimport { GraphLog } from \"../models/graph-log\";\r\nimport { TransformInfo } from \"../models/transform-info\";\r\n// State for graph \r\nexport const STORE_GRAPH_SLICE_NAME = \"nwGraph\";\r\nexport interface State {\r\n    data: INwData | null;// Send to render the graph if rootNodeId is not null. \r\n    nodeTypes: string[];\r\n    autoNetworkExpand: boolean; \r\n    rootNodeId: string | undefined; \r\n    selectedNodes: INode[]; \r\n    excludedNodeTypes: string[]; \r\n    hideLabel: boolean;\r\n    logs: GraphLog[]; \r\n    maxNodesExceeded: boolean;\r\n    activeLayout: number;\r\n    layouts: INwData[];\r\n    layoutTransform: TransformInfo[];\r\n    hasLayoutLoaded: boolean[],\r\n    enableRender: boolean;\r\n}\r\n\r\nexport const initialState: State = {\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n};\r\n",
            "properties": [
                {
                    "name": "activeLayout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "autoNetworkExpand",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "excludedNodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "hasLayoutLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "hideLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "layouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "layoutTransform",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "logs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "maxNodesExceeded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nodeTypes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | undefined",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedNodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "State-2"
        },
        {
            "name": "Task",
            "id": "interface-Task-bc59ce92a67755b3a1b7141552637aac",
            "file": "libs/nw-graph-angular/src/lib/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id?: string;\r\n  title?: string;\r\n  state?: string;\r\n  updatedAt?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "Task",
            "id": "interface-Task-bc59ce92a67755b3a1b7141552637aac-1",
            "file": "libs/nw-graph-angular5/src/app/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id?: string;\r\n  title?: string;\r\n  state?: string;\r\n  updatedAt?: Date;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Task-1"
        },
        {
            "name": "Task",
            "id": "interface-Task-4f401b949902159eaa5c3d2c785a4c4c-2",
            "file": "libs/nw-graph-angular/src/lib/components/sidebar/filter/filter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from './../../../store/state';\r\nimport { Subscription } from \"rxjs\";\r\nimport { NwNodeType } from \"../../../models/nw-config\";\r\nimport { ConfigParserService } from \"../../../services/config-parser.service\";\r\nimport * as graphSelectors from '../../../store/selectors';\r\nimport { take } from \"rxjs/operators\";\r\nimport { ExcludeNodeTypes } from \"../../../store/actions\";\r\n\r\nexport interface Task {\r\n    type: null | NwNodeType; \r\n    included: boolean; \r\n    subtasks?: Task[];\r\n}\r\n\r\n@Component({\r\n    selector: 'sidebar-filter', \r\n    templateUrl: './filter.component.html', \r\n    styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent implements OnInit, OnDestroy { \r\n    task: Task = {\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    };\r\n    \r\n    allComplete: boolean = true; \r\n    excludedNodeTypes: string[] = []; \r\n    notificationUpdatedSub: Subscription | undefined; \r\n    \r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.store$.select(graphSelectors.selectExcludedNodeTypes).pipe(take(1)).subscribe((nTypes) => {\r\n            this.excludedNodeTypes = nTypes;\r\n            this.loadNodeTypes(this.excludedNodeTypes); \r\n        }); \r\n        this.notificationUpdatedSub = this.configParserService.notificationUpdated$.subscribe(() => {\r\n            this.loadNodeTypes(this.excludedNodeTypes);\r\n        })\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.notificationUpdatedSub) {\r\n            this.notificationUpdatedSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    loadNodeTypes(excludedNodeTypes: string[]) {\r\n        const newSubTasks: Task [] = []; \r\n        this.configParserService.nwNodeTypes.forEach((value, key) => {\r\n            newSubTasks.push({ type: value, included: excludedNodeTypes.indexOf(key) === -1 ? true : false });\r\n        }); \r\n        this.task.subtasks = newSubTasks;\r\n    }\r\n    \r\n    updateAllComplete() {\r\n        this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.included); \r\n        if(this.allComplete) {\r\n            this.store$.dispatch(new ExcludeNodeTypes([]));\r\n         } else { \r\n            const nTypes: string[] = []; \r\n            if(Array.isArray(this.task.subtasks)) {\r\n                this.task.subtasks.forEach(x => {\r\n                    if(!x.included && x.type) { \r\n                        nTypes.push(x.type.name);\r\n                    }\r\n                }); \r\n            }\r\n            this.store$.dispatch(new ExcludeNodeTypes(nTypes));\r\n        }\r\n    }\r\n    someComplete() : boolean {\r\n        if(this.task.subtasks == null) { \r\n            return false; \r\n        } \r\n        return this.task.subtasks.filter(t => t.included).length > 0 && !this.allComplete;\r\n    }\r\n    \r\n    get allPossibleNodeTypes(): string[] { \r\n        const nTypes: string[] = []; \r\n        if(Array.isArray(this.task.subtasks)) {\r\n            this.task.subtasks.forEach(x => {\r\n                if(x.type) {\r\n                    nTypes.push(x.type.name); \r\n                }\r\n            }); \r\n        }\r\n        return nTypes;\r\n    }\r\n    \r\n    setAll(included: boolean) {\r\n        this.allComplete = included; \r\n        if(this.task.subtasks == null) { \r\n            return; \r\n        } \r\n        this.task.subtasks.forEach(t => t.included = included); \r\n        if(this.allComplete) { \r\n            this.store$.dispatch(new ExcludeNodeTypes([])); \r\n        } else { \r\n            this.store$.dispatch(new ExcludeNodeTypes(this.allPossibleNodeTypes)); \r\n        }\r\n    }\r\n}\r\n        \r\n",
            "properties": [
                {
                    "name": "included",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subtasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | NwNodeType",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Task-2"
        },
        {
            "name": "Task",
            "id": "interface-Task-4f401b949902159eaa5c3d2c785a4c4c-3",
            "file": "libs/nw-graph-angular5/src/app/components/sidebar/filter/filter.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from './../../../store/state';\r\nimport { Subscription } from \"rxjs\";\r\nimport { NwNodeType } from \"../../../models/nw-config\";\r\nimport { ConfigParserService } from \"../../../services/config-parser.service\";\r\nimport * as graphSelectors from '../../../store/selectors';\r\nimport { take } from \"rxjs/operators\";\r\nimport { ExcludeNodeTypes } from \"../../../store/actions\";\r\n\r\nexport interface Task {\r\n    type: null | NwNodeType; \r\n    included: boolean; \r\n    subtasks?: Task[];\r\n}\r\n\r\n@Component({\r\n    selector: 'sidebar-filter', \r\n    templateUrl: './filter.component.html', \r\n    styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent implements OnInit, OnDestroy { \r\n    task: Task = {\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    };\r\n    \r\n    allComplete: boolean = true; \r\n    excludedNodeTypes: string[] = []; \r\n    notificationUpdatedSub: Subscription | undefined; \r\n    \r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.store$.select(graphSelectors.selectExcludedNodeTypes).pipe(take(1)).subscribe((nTypes) => {\r\n            this.excludedNodeTypes = nTypes;\r\n            this.loadNodeTypes(this.excludedNodeTypes); \r\n        }); \r\n        this.notificationUpdatedSub = this.configParserService.notificationUpdated$.subscribe(() => {\r\n            this.loadNodeTypes(this.excludedNodeTypes);\r\n        })\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.notificationUpdatedSub) {\r\n            this.notificationUpdatedSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    loadNodeTypes(excludedNodeTypes: string[]) {\r\n        const newSubTasks: Task [] = []; \r\n        this.configParserService.nwNodeTypes.forEach((value, key) => {\r\n            newSubTasks.push({ type: value, included: excludedNodeTypes.indexOf(key) === -1 ? true : false });\r\n        }); \r\n        this.task.subtasks = newSubTasks;\r\n    }\r\n    \r\n    updateAllComplete() {\r\n        this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.included); \r\n        if(this.allComplete) {\r\n            this.store$.dispatch(new ExcludeNodeTypes([]));\r\n         } else { \r\n            const nTypes: string[] = []; \r\n            if(Array.isArray(this.task.subtasks)) {\r\n                this.task.subtasks.forEach(x => {\r\n                    if(!x.included && x.type) { \r\n                        nTypes.push(x.type.name);\r\n                    }\r\n                }); \r\n            }\r\n            this.store$.dispatch(new ExcludeNodeTypes(nTypes));\r\n        }\r\n    }\r\n    someComplete() : boolean {\r\n        if(this.task.subtasks == null) { \r\n            return false; \r\n        } \r\n        return this.task.subtasks.filter(t => t.included).length > 0 && !this.allComplete;\r\n    }\r\n    \r\n    get allPossibleNodeTypes(): string[] { \r\n        const nTypes: string[] = []; \r\n        if(Array.isArray(this.task.subtasks)) {\r\n            this.task.subtasks.forEach(x => {\r\n                if(x.type) {\r\n                    nTypes.push(x.type.name); \r\n                }\r\n            }); \r\n        }\r\n        return nTypes;\r\n    }\r\n    \r\n    setAll(included: boolean) {\r\n        this.allComplete = included; \r\n        if(this.task.subtasks == null) { \r\n            return; \r\n        } \r\n        this.task.subtasks.forEach(t => t.included = included); \r\n        if(this.allComplete) { \r\n            this.store$.dispatch(new ExcludeNodeTypes([])); \r\n        } else { \r\n            this.store$.dispatch(new ExcludeNodeTypes(this.allPossibleNodeTypes)); \r\n        }\r\n    }\r\n}\r\n        \r\n",
            "properties": [
                {
                    "name": "included",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subtasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "null | NwNodeType",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "Task-3"
        },
        {
            "name": "TransformInfo",
            "id": "interface-TransformInfo-b9ca8786e2db854545418a746282b24c",
            "file": "libs/nw-graph-angular/src/lib/models/load-nodes-payload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode } from './nw-data';\r\n\r\nexport interface LoadNodesPayload {\r\n    rootNodeId: string;\r\n    nodesToLoad: INode[];\r\n    currentVisibleNodes: INode[];\r\n    loadByClick: boolean;\r\n}\r\n\r\nexport interface TransformInfo {\r\n    x: number; \r\n    y: number; \r\n    k: number;\r\n}",
            "properties": [
                {
                    "name": "k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": []
        },
        {
            "name": "TransformInfo",
            "id": "interface-TransformInfo-b9ca8786e2db854545418a746282b24c-1",
            "file": "libs/nw-graph-angular5/src/app/models/load-nodes-payload.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { INode } from './nw-data';\r\n\r\nexport interface LoadNodesPayload {\r\n    rootNodeId: string;\r\n    nodesToLoad: INode[];\r\n    currentVisibleNodes: INode[];\r\n    loadByClick: boolean;\r\n}\r\n\r\nexport interface TransformInfo {\r\n    x: number; \r\n    y: number; \r\n    k: number;\r\n}",
            "properties": [
                {
                    "name": "k",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "x",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "y",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 163,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TransformInfo-1"
        }
    ],
    "injectables": [
        {
            "name": "ConfigParserService",
            "id": "injectable-ConfigParserService-af67475b83d16236f8541655bb23c1d1",
            "file": "libs/nw-graph-angular/src/lib/services/config-parser.service.ts",
            "properties": [
                {
                    "name": "notificationNumHops",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationNumHops$",
                    "defaultValue": "this.notificationNumHops.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "notificationUpdated",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationUpdated$",
                    "defaultValue": "this.notificationUpdated.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nwConfig",
                    "defaultValue": "{...defaultNwConfig, node: null, edge: null}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwConfig",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nwNodeTypeRawPath",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | null",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nwNodeTypes",
                    "defaultValue": "new Map<string, NwNodeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nwRawConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "processNodeWithUnknownNodeType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notififyNumHopsChange",
                    "args": [
                        {
                            "name": "message",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notifyUpdated",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEdgeAttributesConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setEdgeConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setMandatoryConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setNodeConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setNodeTypesConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setProcessNodeWithUnknownNodeType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs';\r\nimport { defaultNwAttribute, defaultNwEdgeConfig, defaultNwNodeConfig, NwAttribute, NwEdge, NwNodeType } from '../models/nw-config'; \r\nimport { defaultNwConfig, NwConfig, NwNode} from \"../models/nw-config\"; \r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, toBoolean, toPositiveInteger } from \"../utils\"; \r\n\r\ninterface NwRawConfig {\r\n    [key: string]: any;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigParserService {\r\n    public nwRawConfig: any; \r\n    public nwConfig: NwConfig = {...defaultNwConfig, node: null, edge: null}; \r\n    public nwNodeTypes = new Map<string, NwNodeType>();\r\n    public nwNodeTypeRawPath: string[] | null = null;\r\n    public processNodeWithUnknownNodeType = false;\r\n    private notificationNumHops = new Subject<number>();\r\n    notificationNumHops$: Observable<number> = this.notificationNumHops.asObservable();\r\n    notififyNumHopsChange(message: number | undefined) {\r\n        if(!this.nwConfig) {\r\n            this.nwConfig = {...defaultNwConfig, node: null, edge: null};\r\n        }\r\n        this.nwConfig.numHops = typeof message === 'number'? message : this.nwConfig.numHops;\r\n        this.notificationNumHops.next(this.nwConfig.numHops);\r\n    }\r\n\r\n    private notificationUpdated = new Subject<number>();\r\n    notificationUpdated$ = this.notificationUpdated.asObservable();\r\n    notifyUpdated() {\r\n        this.notificationUpdated.next();\r\n    }\r\n\r\n    public parseConfig(config: any) {\r\n        if(typeof config === 'object' && config !== null) {\r\n            this.nwRawConfig = config; \r\n            this.setProcessNodeWithUnknownNodeType();\r\n            this.setMandatoryConfig(); \r\n            this.setNodeConfig(); \r\n            this.setNodeTypesConfig(); \r\n            this.setEdgeConfig();\r\n            this.setEdgeAttributesConfig(); \r\n        } else {\r\n            this.nwRawConfig = undefined; \r\n            console.error(\"Invalid config!\");\r\n        }\r\n    }\r\n\r\n    private setProcessNodeWithUnknownNodeType() { \r\n        this.processNodeWithUnknownNodeType = this.nwRawConfig && this.nwRawConfig.processNodeWithUnknownNodeType === true? true : false;\r\n    }\r\n        \r\n    private setMandatoryConfig() { \r\n        if(typeof this.nwRawConfig === 'object' && this.nwRawConfig !== null) {\r\n            this.nwConfig.maxSelectedNodes = toPositiveInteger(this.nwRawConfig.maxSelectedNodes, defaultNwConfig.maxSelectedNodes); \r\n            this.nwConfig.displayLabel = toBoolean(this.nwRawConfig.displayLabel, defaultNwConfig.displayLabel); \r\n            this.nwConfig.autoExpand = toBoolean(this.nwRawConfig.autoExpand, defaultNwConfig.autoExpand); \r\n            this.nwConfig.numHops = toPositiveInteger(this.nwRawConfig.numHops, defaultNwConfig.numHops); \r\n            this.nwConfig.maxNodeCount = toPositiveInteger(this.nwRawConfig.maxNodeCount, defaultNwConfig.maxNodeCount);\r\n            this.nwConfig.viewportHeight = toPositiveInteger(this.nwRawConfig.viewportHeight, defaultNwConfig.viewportHeight); \r\n            this.nwConfig.nodeRadius = toPositiveInteger(this.nwRawConfig.nodeRadius, defaultNwConfig.nodeRadius);\r\n            this.nwConfig.rootNodeRadius = toPositiveInteger(this.nwRawConfig.rootNodeRadius, defaultNwConfig.rootNodeRadius);\r\n        }\r\n    }\r\n\r\n    private setNodeConfig() {\r\n        let nodeRawConfig = (this.nwRawConfig && this.nwRawConfig.node? this.nwRawConfig.node: {}) as NwNode;\r\n        this.nwConfig.node = {...defaultNwNodeConfig};\r\n\r\n        if(isArrayOfNonEmptyStrings(nodeRawConfig.parentRawPath)) {\r\n            this.nwConfig.node.parentRawPath = nodeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeIdAttributeKey === 'string' && nodeRawConfig.nodeIdAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeIdAttributeKey = nodeRawConfig.nodeIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeIdAttributeKey for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeTypeAttributeKey === 'string' && nodeRawConfig.nodeTypeAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeTypeAttributeKey = nodeRawConfig.nodeTypeAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeTypeAttributeKey for Nodes\");\r\n        }\r\n        if(nodeRawConfig && typeof nodeRawConfig.nodeTitleAttributeKey === 'string' && nodeRawConfig.nodeTitleAttributeKey.length > 0) {\r\n            this.nwConfig.node.nodeTitleAttributeKey = nodeRawConfig.nodeTitleAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid nodeTitleAttributeKey for Nodes\");\r\n        }\r\n    }\r\n    \r\n    private setNodeTypesConfig() { \r\n        let nodeTypesRawConfig = (this.nwRawConfig && this.nwRawConfig.node \r\n                                    && Array.isArray((this.nwRawConfig.node as NwNode).nodeTypes) ? (this.nwRawConfig.node as NwNode).nodeTypes: []) as NwNodeType[]; \r\n        for (const nodeTypeFromConfig of nodeTypesRawConfig) {\r\n            let nodeType: NwNodeType; \r\n            let nodeAttributes = []; \r\n            let nodeAttributesRawConfig = Array.isArray(nodeTypeFromConfig.nodeAttributes) ? nodeTypeFromConfig.nodeAttributes: []; \r\n            \r\n            for(const nAttr of nodeAttributesRawConfig) {\r\n                const nodeAttribute = {\r\n                    key: typeof nAttr.key === 'string'? nAttr.key: EMPTY_STRING, \r\n                    displayName: typeof nAttr.displayName === 'string'? nAttr.displayName: EMPTY_STRING, \r\n                    rawPath: Array.isArray(nAttr.rawPath)? nAttr.rawPath: [],\r\n                    tooltip: typeof nAttr.tooltip === 'boolean'? nAttr.tooltip: false \r\n                    };\r\n                nodeAttributes.push(nodeAttribute);\r\n                if(this.nwConfig && this.nwConfig.node && this.nwConfig.node.nodeTypeAttributeKey) {\r\n                    if(this.nwConfig.node.nodeTypeAttributeKey === nodeAttribute.key) {\r\n                        if(this.nwNodeTypeRawPath) {\r\n                            if(this.nwNodeTypeRawPath.join('') !== nodeAttribute.rawPath.join('')) {\r\n                                console.error(\"nodeTypeAttributeKey's rawPath must be same in every nodeType's nodeAttributes\");\r\n                            }\r\n                        } else {\r\n                            this.nwNodeTypeRawPath = nodeAttribute.rawPath;\r\n                        }\r\n                    }\r\n                } else {\r\n                    console.error(\"nodeTypeAttributeKey is missing in config\");\r\n                }\r\n            }\r\n            nodeType = {\r\n                name: typeof nodeTypeFromConfig.name === 'string'? nodeTypeFromConfig.name : EMPTY_STRING, \r\n                displayName: typeof nodeTypeFromConfig.displayName === 'string'? nodeTypeFromConfig.displayName : EMPTY_STRING, \r\n                color: typeof nodeTypeFromConfig.color === 'string'? nodeTypeFromConfig.color : EMPTY_STRING, \r\n                imagePath: typeof nodeTypeFromConfig.imagePath === 'string'? nodeTypeFromConfig.imagePath: EMPTY_STRING, \r\n                nodeAttributes: nodeAttributes\r\n            };\r\n            if(nodeType && typeof nodeType.name === 'string' && nodeType.name.length > 0) {\r\n                this.nwNodeTypes.set(nodeType.name, nodeType);\r\n            }\r\n            if(this.nwConfig && this.nwConfig.node && Array.isArray(this.nwConfig.node.nodeTypes)) { \r\n                this.nwConfig.node.nodeTypes.push(nodeType);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setEdgeAttributesConfig() { \r\n        let edgeAttributesRawConfig = (this.nwRawConfig && this.nwRawConfig.edge && Array.isArray((this.nwRawConfig.edge as NwEdge).edgeAttributes) ? (this.nwRawConfig.edge as NwEdge).edgeAttributes: []) as NwAttribute[]; \r\n        \r\n        for(const edgeAttributeFromConfig of edgeAttributesRawConfig) { \r\n            if(this.nwConfig && this.nwConfig.edge && Array.isArray(this.nwConfig.edge.edgeAttributes)) { \r\n                this.nwConfig.edge.edgeAttributes.push({\r\n                    key: typeof edgeAttributeFromConfig.key === 'string'? edgeAttributeFromConfig.key: EMPTY_STRING, \r\n                    displayName: typeof edgeAttributeFromConfig.displayName === 'string'? \r\n                    edgeAttributeFromConfig.displayName : EMPTY_STRING, \r\n                    rawPath: Array.isArray(edgeAttributeFromConfig.rawPath) ? edgeAttributeFromConfig.rawPath: [], \r\n                    tooltip: typeof edgeAttributeFromConfig.tooltip === 'string'? edgeAttributeFromConfig.tooltip : false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEdgeConfig() {\r\n        let edgeRawConfig = (this.nwRawConfig && this.nwRawConfig.edge? this.nwRawConfig.edge: {}) as NwEdge;\r\n        this.nwConfig.edge = {...defaultNwEdgeConfig};\r\n        if(this.nwConfig && this.nwConfig.edge && isArrayOfNonEmptyStrings(edgeRawConfig.parentRawPath)) {\r\n            this.nwConfig.edge.parentRawPath = edgeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeSourceIdAttributeKey === 'string' && edgeRawConfig.edgeSourceIdAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeSourceIdAttributeKey = edgeRawConfig.edgeSourceIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeSourceIdAttributeKey for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeTargetIdAttributeKey === 'string' && edgeRawConfig.edgeTargetIdAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeTargetIdAttributeKey = edgeRawConfig.edgeTargetIdAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeTargetIdAttributeKey for Edges\");\r\n        }\r\n        if(edgeRawConfig && typeof edgeRawConfig.edgeTitleAttributeKey === 'string' && edgeRawConfig.edgeTitleAttributeKey.length > 0) {\r\n            this.nwConfig.edge.edgeTitleAttributeKey = edgeRawConfig.edgeTitleAttributeKey;\r\n        } else {\r\n            console.error(\"Invalid edgeTitleAttributeKey for Edges\");\r\n        }\r\n    }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "ConfigParserService",
            "id": "injectable-ConfigParserService-1623b551e790e7a1bf9163134a631e8c-1",
            "file": "libs/nw-graph-angular5/src/app/services/config-parser.service.ts",
            "properties": [
                {
                    "name": "notificationNumHops",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationNumHops$",
                    "defaultValue": "this.notificationNumHops.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<number>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "notificationUpdated",
                    "defaultValue": "new Subject<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationUpdated$",
                    "defaultValue": "this.notificationUpdated.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nwConfig",
                    "defaultValue": "{...defaultNwConfig, node: null, edge: null}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NwConfig",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nwNodeTypes",
                    "defaultValue": "new Map<string, NwNodeType>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nwRawConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "processNodeWithUnknownNodeType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notififyNumHopsChange",
                    "args": [
                        {
                            "name": "message",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notifyUpdated",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "parseConfig",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setEdgeAttributesConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setEdgeConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setMandatoryConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setNodeConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setNodeTypesConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setProcessNodeWithUnknownNodeType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { defaultNwAttribute, defaultNwEdgeConfig, defaultNwNodeConfig, NwAttribute, NwEdge, NwNodeType } from '../models/nw-config'; \r\nimport { defaultNwConfig, NwConfig, NwNode} from \"../models/nw-config\"; \r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, isStringNullorEmpty, toBoolean, toPositiveInteger } from \"../utils\"; \r\n\r\ninterface NwRawConfig {\r\n    [key: string]: any;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigParserService {\r\n    public nwRawConfig: any; \r\n    public nwConfig: NwConfig = {...defaultNwConfig, node: null, edge: null}; \r\n    public nwNodeTypes = new Map<string, NwNodeType>();\r\n    public processNodeWithUnknownNodeType = false;\r\n    private notificationNumHops = new Subject<number>();\r\n    notificationNumHops$: Observable<number> = this.notificationNumHops.asObservable();\r\n    notififyNumHopsChange(message: number | undefined) {\r\n        if(!this.nwConfig) {\r\n            this.nwConfig = {...defaultNwConfig, node: null, edge: null};\r\n        }\r\n        this.nwConfig.numHops = typeof message === 'number'? message : this.nwConfig.numHops;\r\n        this.notificationNumHops.next(this.nwConfig.numHops);\r\n    }\r\n\r\n    private notificationUpdated = new Subject<number>();\r\n    notificationUpdated$ = this.notificationUpdated.asObservable();\r\n    notifyUpdated() {\r\n        this.notificationUpdated.next();\r\n    }\r\n\r\n    public parseConfig(config: any) {\r\n        if(typeof config === 'object' && config !== null) {\r\n            this.nwRawConfig = config; \r\n            this.setProcessNodeWithUnknownNodeType();\r\n            this.setMandatoryConfig(); \r\n            this.setNodeConfig(); \r\n            this.setNodeTypesConfig(); \r\n            this.setEdgeConfig();\r\n            this.setEdgeAttributesConfig(); \r\n        } else {\r\n            this.nwRawConfig = undefined; \r\n            console.error(\"Invalid config!\");\r\n        }\r\n    }\r\n\r\n    private setProcessNodeWithUnknownNodeType() { \r\n        this.processNodeWithUnknownNodeType = this.nwRawConfig && this.nwRawConfig.processNodeWithUnknownNodeType === true? true : false;\r\n    }\r\n        \r\n    private setMandatoryConfig() { \r\n        if(typeof this.nwRawConfig === 'object' && this.nwRawConfig !== null) {\r\n            this.nwConfig.maxSelectedNodes = toPositiveInteger(this.nwRawConfig.maxSelectedNodes, defaultNwConfig.maxSelectedNodes); \r\n            this.nwConfig.displayLabel = toBoolean(this.nwRawConfig.displayLabel, defaultNwConfig.displayLabel); \r\n            this.nwConfig.autoExpand = toBoolean(this.nwRawConfig.autoExpand, defaultNwConfig.autoExpand); \r\n            this.nwConfig.numHops = toPositiveInteger(this.nwRawConfig.numHops, defaultNwConfig.numHops); \r\n            this.nwConfig.maxNodeCount = toPositiveInteger(this.nwRawConfig.maxNodeCount, defaultNwConfig.maxNodeCount);\r\n            this.nwConfig.viewportHeight = toPositiveInteger(this.nwRawConfig.viewportHeight, defaultNwConfig.viewportHeight); \r\n            this.nwConfig.nodeRadius = toPositiveInteger(this.nwRawConfig.nodeRadius, defaultNwConfig.nodeRadius);\r\n        }\r\n    }\r\n\r\n    private setNodeConfig() {\r\n        let nodeRawConfig = (this.nwRawConfig && this.nwRawConfig.node? this.nwRawConfig.node: {}) as NwNode;\r\n        this.nwConfig.node = {...defaultNwNodeConfig};\r\n\r\n        if(isArrayOfNonEmptyStrings(nodeRawConfig.parentRawPath)) {\r\n            this.nwConfig.node.parentRawPath = nodeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Nodes\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeIdAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeIdAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeIdAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeIdAttribute) {\r\n                this.nwConfig.node.nodeIdAttribute.rawPath = nodeRawConfig.nodeIdAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeIdAttribute.key)? this.nwConfig.node.nodeIdAttribute.key = nodeRawConfig.nodeIdAttribute.key: null; \r\n                !isStringNullorEmpty (nodeRawConfig.nodeIdAttribute.displayName)? this.nwConfig.node.nodeIdAttribute.displayName = nodeRawConfig.nodeIdAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeIdAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeIdAttribute.tooltip = nodeRawConfig.nodeIdAttribute.tooltip: null;\r\n            } \r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeIdAttribute\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeTypeAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeTypeAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeTypeAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeTypeAttribute) {\r\n                this.nwConfig.node.nodeTypeAttribute.rawPath = nodeRawConfig.nodeTypeAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTypeAttribute.key)? this.nwConfig.node.nodeTypeAttribute.key = nodeRawConfig.nodeTypeAttribute.key: null; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTypeAttribute.displayName)? this.nwConfig.node.nodeTypeAttribute.displayName = nodeRawConfig.nodeTypeAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeTypeAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeTypeAttribute.tooltip = nodeRawConfig.nodeTypeAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeTypeAttribute\");\r\n        }\r\n\r\n        if(nodeRawConfig && nodeRawConfig.nodeTitleAttribute && isArrayOfNonEmptyStrings(nodeRawConfig.nodeTitleAttribute.rawPath)) { \r\n            this.nwConfig.node.nodeTitleAttribute = {...defaultNwAttribute}; \r\n            if(nodeRawConfig && nodeRawConfig.nodeTitleAttribute) {\r\n                this.nwConfig.node.nodeTitleAttribute.rawPath = nodeRawConfig.nodeTitleAttribute.rawPath; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTitleAttribute.key)? this.nwConfig.node.nodeTitleAttribute.key = nodeRawConfig.nodeTitleAttribute.key : null; \r\n                !isStringNullorEmpty(nodeRawConfig.nodeTitleAttribute.displayName)? this.nwConfig.node.nodeTitleAttribute.displayName = nodeRawConfig.nodeTitleAttribute.displayName : null; \r\n                typeof nodeRawConfig.nodeTitleAttribute.tooltip === 'boolean'? this.nwConfig.node.nodeTitleAttribute.tooltip = nodeRawConfig.nodeTitleAttribute.tooltip : null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in nodeTitleAttribute\");\r\n        }\r\n    }\r\n    \r\n    private setNodeTypesConfig() { \r\n        let nodeTypesRawConfig = (this.nwRawConfig && this.nwRawConfig.node \r\n                                    && Array.isArray((this.nwRawConfig.node as NwNode).nodeTypes) ? (this.nwRawConfig.node as NwNode).nodeTypes: []) as NwNodeType[]; \r\n        for (const nodeTypeFromConfig of nodeTypesRawConfig) {\r\n            let nodeType: NwNodeType; \r\n            let nodeAttributes = []; \r\n            let nodeAttributesRawConfig = Array.isArray(nodeTypeFromConfig.nodeAttributes) ? nodeTypeFromConfig.nodeAttributes: []; \r\n            \r\n            for(const nAttr of nodeAttributesRawConfig) { \r\n                nodeAttributes.push({\r\n                    key: typeof nAttr.key === 'string'? nAttr.key: EMPTY_STRING, \r\n                    displayName: typeof nAttr.displayName === 'string'? nAttr.displayName: EMPTY_STRING, \r\n                    rawPath: Array.isArray(nAttr.rawPath)? nAttr.rawPath: [],\r\n                    tooltip: typeof nAttr.tooltip === 'boolean'? nAttr.tooltip: false \r\n                    });\r\n            }\r\n            nodeType = {\r\n                name: typeof nodeTypeFromConfig.name === 'string'? nodeTypeFromConfig.name : EMPTY_STRING, \r\n                displayName: typeof nodeTypeFromConfig.displayName === 'string'? nodeTypeFromConfig.displayName : EMPTY_STRING, \r\n                color: typeof nodeTypeFromConfig.color === 'string'? nodeTypeFromConfig.color : EMPTY_STRING, \r\n                imagePath: typeof nodeTypeFromConfig.imagePath === 'string'? nodeTypeFromConfig.imagePath: EMPTY_STRING, \r\n                nodeAttributes: nodeAttributes\r\n            };\r\n            if(nodeType && typeof nodeType.name === 'string' && nodeType.name.length > 0) {\r\n                this.nwNodeTypes.set(nodeType.name, nodeType);\r\n            }\r\n            if(this.nwConfig && this.nwConfig.node && Array.isArray(this.nwConfig.node.nodeTypes)) { \r\n                this.nwConfig.node.nodeTypes.push(nodeType);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private setEdgeAttributesConfig() { \r\n        let edgeAttributesRawConfig = (this.nwRawConfig && this.nwRawConfig.edge && Array.isArray((this.nwRawConfig.edge as NwEdge).edgeAttributes) ? (this.nwRawConfig.edge as NwEdge).edgeAttributes: []) as NwAttribute[]; \r\n        \r\n        for(const edgeAttributeFromConfig of edgeAttributesRawConfig) { \r\n            if(this.nwConfig && this.nwConfig.edge && Array.isArray(this.nwConfig.edge.edgeAttributes)) { \r\n                this.nwConfig.edge.edgeAttributes.push({\r\n                    key: typeof edgeAttributeFromConfig.key === 'string'? edgeAttributeFromConfig.key: EMPTY_STRING, \r\n                    displayName: typeof edgeAttributeFromConfig.displayName === 'string'? \r\n                    edgeAttributeFromConfig.displayName : EMPTY_STRING, \r\n                    rawPath: Array.isArray(edgeAttributeFromConfig.rawPath) ? edgeAttributeFromConfig.rawPath: [], \r\n                    tooltip: typeof edgeAttributeFromConfig.tooltip === 'string'? edgeAttributeFromConfig.tooltip : false\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setEdgeConfig() {\r\n        let edgeRawConfig = (this.nwRawConfig && this.nwRawConfig.edge? this.nwRawConfig.edge: {}) as NwEdge;\r\n        this.nwConfig.edge = {...defaultNwEdgeConfig};\r\n        if(this.nwConfig && this.nwConfig.edge && isArrayOfNonEmptyStrings(edgeRawConfig.parentRawPath)) {\r\n            this.nwConfig.edge.parentRawPath = edgeRawConfig.parentRawPath;\r\n        } else {\r\n            console.error(\"Invalid parentRawPath for Edges\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeSourceIdAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeSourceIdAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeSourceIdAttribute = {...defaultNwAttribute};\r\n            if(edgeRawConfig && edgeRawConfig.edgeSourceIdAttribute) {\r\n                this.nwConfig.edge.edgeSourceIdAttribute.rawPath = edgeRawConfig.edgeSourceIdAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeSourceIdAttribute.key)? this.nwConfig.edge.edgeSourceIdAttribute.key = edgeRawConfig.edgeSourceIdAttribute.key : null; \r\n                !isStringNullorEmpty (edgeRawConfig.edgeSourceIdAttribute.displayName)? this.nwConfig.edge.edgeSourceIdAttribute.displayName = edgeRawConfig.edgeSourceIdAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeSourceIdAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeSourceIdAttribute.tooltip = edgeRawConfig.edgeSourceIdAttribute.tooltip: null;\r\n            }\r\n        } else { \r\n            console.error(\"Invalid rawPath in edge SourceIdAttribute\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeTargetIdAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeTargetIdAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeTargetIdAttribute = {...defaultNwAttribute}; \r\n            if(edgeRawConfig && edgeRawConfig.edgeTargetIdAttribute) {\r\n                this.nwConfig.edge.edgeTargetIdAttribute.rawPath = edgeRawConfig.edgeTargetIdAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTargetIdAttribute.key)? this.nwConfig.edge.edgeTargetIdAttribute.key = edgeRawConfig.edgeTargetIdAttribute.key: null; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTargetIdAttribute.displayName)? this.nwConfig.edge.edgeTargetIdAttribute.displayName = edgeRawConfig.edgeTargetIdAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeTargetIdAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeTargetIdAttribute.tooltip = edgeRawConfig.edgeTargetIdAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in edge TargetIdAttribute\");\r\n        }\r\n        if(edgeRawConfig && edgeRawConfig.edgeTitleAttribute && isArrayOfNonEmptyStrings(edgeRawConfig.edgeTitleAttribute.rawPath)) { \r\n            this.nwConfig.edge.edgeTitleAttribute = {...defaultNwAttribute}; \r\n            if(edgeRawConfig && edgeRawConfig.edgeTitleAttribute) {\r\n                this.nwConfig.edge.edgeTitleAttribute.rawPath = edgeRawConfig.edgeTitleAttribute.rawPath; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTitleAttribute.key)? this.nwConfig.edge.edgeTitleAttribute.key = edgeRawConfig.edgeTitleAttribute.key: null; \r\n                !isStringNullorEmpty(edgeRawConfig.edgeTitleAttribute.displayName)? this.nwConfig.edge.edgeTitleAttribute.displayName = edgeRawConfig.edgeTitleAttribute.displayName : null; \r\n                typeof edgeRawConfig.edgeTitleAttribute.tooltip === 'boolean'? this.nwConfig.edge.edgeTitleAttribute.tooltip = edgeRawConfig.edgeTitleAttribute.tooltip: null;\r\n            }\r\n        } else {\r\n            console.error(\"Invalid rawPath in edgeTitleAttribute\");\r\n        }\r\n    }\r\n}\r\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ConfigParserService-1"
        },
        {
            "name": "D3Service",
            "id": "injectable-D3Service-cadb3a70373c8b82fa75491a3ffd9e0a",
            "file": "libs/nw-graph-angular/src/lib/services/d3.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "applyDraggableBehaviour",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graph",
                            "type": "GraphEngineService | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graph",
                            "type": "GraphEngineService | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyZoomableBehaviour",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "containerElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transformVal",
                            "type": "TransformInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBind a pan/zoom behaviour to svg element",
                    "description": "<p>Bind a pan/zoom behaviour to svg element</p>\n",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformVal",
                            "type": "TransformInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graphBounds",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: any; X: any; y: any; Y: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDraggableBehaviour",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeZoomableBehaviour",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerZoomToFit",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Selection, select, event } from 'd3-selection';\r\nimport { zoom, zoomTransform, zoomIdentity} from 'd3-zoom'; \r\nimport { drag } from 'd3-drag'; \r\nimport { INode} from '../models/nw-data'; \r\nimport { GraphEngineService } from './graph-engine.service';\r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\n\r\n@Injectable() \r\nexport class D3Service {\r\n    constructor() { }\r\n    /** Bind a pan/zoom behaviour to svg element */ \r\n    applyZoomableBehaviour(svgElement: any, containerElement: any, transformVal: TransformInfo) {\r\n        let svg, container: Selection<any, any, null, undefined>, zoomed, zm;\r\n        svg = select(svgElement); \r\n        svg.on(\".zoom\", null);\r\n        container = select(containerElement);\r\n        \r\n        console.log(\"test transform\", container.attr('transform'));\r\n        // console.log(\"test transform2\", zmT);\r\n        zoomed = () => {\r\n            const transfrm = event.transform;\r\n            container.attr('transform', `translate(${transfrm.x}, ${transfrm.y}) scale(${transfrm.k})`);\r\n        }\r\n        zm = zoom().extent([[0,0],[300,300]]).on('zoom', zoomed); \r\n        svg.call(zm); \r\n        svg.on(\"dblclick.zoom\", null);\r\n        if(transformVal && transformVal.x && transformVal.y && transformVal.k) {\r\n            svg.call(zm.transform, zoomIdentity.translate(transformVal.x, transformVal.y).scale(transformVal.k));\r\n        } else {\r\n            svg.call(zm.transform, zoomIdentity.translate(0, 0).scale(1));\r\n        }\r\n    }\r\n\r\n    removeZoomableBehaviour(svgElement: any) {\r\n        select(svgElement).on(\".zoom\", null);\r\n    }\r\n    \r\n    triggerZoomToFit(svgElement: any) {\r\n        // console.log(svgElement);\r\n    }\r\n    \r\n    graphBounds(nodes: INode[]) { \r\n        var x = Number.POSITIVE_INFINITY, X = Number. NEGATIVE_INFINITY, y = Number.POSITIVE_INFINITY, Y = Number.NEGATIVE_INFINITY; \r\n        nodes.forEach((v: any) => {\r\n            x = Math.min(x, v.x - 50 / 2); \r\n            X = Math.max(X, v.x + 50 / 2); \r\n            y = Math.min(y, v.y - 50 / 2); \r\n            Y = Math.max(Y, v.y + 50 / 2);\r\n        });\r\n        return { x: x, X: X, y: y, Y: Y };\r\n    }\r\n    \r\n    applyDraggableBehaviour(element: any, node: INode | undefined, graph: GraphEngineService | undefined) {\r\n        const d3element = select(element);\r\n\r\n        function started() {\r\n            /** Preventing propogation of dragstart to parent elements */\r\n            event.sourceEvent.stopPropagation();\r\n\r\n            if(graph && !event.active) {\r\n                graph.nodes!.forEach(n => {\r\n                    n.fx = n.x;\r\n                    n.fy = n.y;\r\n                });\r\n                graph.simulation.alphaTarget(0.1).restart();\r\n            }\r\n\r\n            event.on('drag', dragged).on('end', ended);\r\n\r\n            function dragged() {\r\n                if(node) {\r\n                    node.fx = event.x;\r\n                    node.fy = event.y;\r\n                }\r\n            }\r\n            \r\n            function ended() { \r\n                if (graph && !event.active) {\r\n                    graph.simulation.alphaTarget(0);\r\n                    setTimeout(() => {\r\n                        graph.simulation.stop();\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n        \r\n        d3element.call(drag()\r\n            .on('start', started));\r\n    }\r\n    removeDraggableBehaviour(element: any) {\r\n        const d3element = select(element);\r\n        d3element.on('drag', null);\r\n    }\r\n    \r\n    createTooltip(element: any, node: INode) {\r\n        const d3element = select(element); \r\n        let titleElem = d3element.select(\"title\");\r\n\r\n        if(Array.isArray(node.nodeDescAttributes) && node.nodeDescAttributes.length > 0) {\r\n            let textElems = titleElem.selectAll(\"text\") \r\n                .data(node.nodeDescAttributes).enter().append(\"text\");\r\n            textElems.append(\"tspan\").text((d: any) => d.title + \": \").attr(\"font-weight\", \"bold\");\r\n            textElems.append(\"tspan\").text((d: any) => {\r\n                                return (typeof node[d.attribute] === 'undefined'? '-' : node[d.attribute]) + \"\\n\";\r\n            });\r\n        } else {\r\n            titleElem.selectAll(\"text\") \r\n                .data([node.label])\r\n                .enter().append(\"text\")\r\n                .text((d: any) => d);\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable"
        },
        {
            "name": "D3Service",
            "id": "injectable-D3Service-7f6f6f7dce0f5325a238b86ef2e64088-1",
            "file": "libs/nw-graph-angular5/src/app/services/d3.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "applyDraggableBehaviour",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graph",
                            "type": "GraphEngineService | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graph",
                            "type": "GraphEngineService | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "applyZoomableBehaviour",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "containerElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "transformVal",
                            "type": "TransformInfo",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nBind a pan/zoom behaviour to svg element",
                    "description": "<p>Bind a pan/zoom behaviour to svg element</p>\n",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "containerElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "transformVal",
                            "type": "TransformInfo",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createTooltip",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graphBounds",
                    "args": [
                        {
                            "name": "nodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{ x: any; X: any; y: any; Y: any; }",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeDraggableBehaviour",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeZoomableBehaviour",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "triggerZoomToFit",
                    "args": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "svgElement",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Selection, select, event } from 'd3-selection';\r\nimport { zoom, zoomTransform, zoomIdentity} from 'd3-zoom'; \r\nimport { drag } from 'd3-drag'; \r\nimport { INode} from '../models/nw-data'; \r\nimport { GraphEngineService } from './graph-engine.service';\r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\n\r\n@Injectable() \r\nexport class D3Service {\r\n    constructor() { }\r\n    /** Bind a pan/zoom behaviour to svg element */ \r\n    applyZoomableBehaviour(svgElement: any, containerElement: any, transformVal: TransformInfo) {\r\n        let svg, container: Selection<any, any, null, undefined>, zoomed, zm;\r\n        svg = select(svgElement); \r\n        svg.on(\".zoom\", null);\r\n        container = select(containerElement);\r\n        \r\n        console.log(\"test transform\", container.attr('transform'));\r\n        // console.log(\"test transform2\", zmT);\r\n        zoomed = () => {\r\n            const transfrm = event.transform;\r\n            container.attr('transform', `translate(${transfrm.x}, ${transfrm.y}) scale(${transfrm.k})`);\r\n        }\r\n        zm = zoom().on('zoom', zoomed); \r\n        svg.call(zm); \r\n        svg.on(\"dblclick.zoom\", null);\r\n        if(transformVal && transformVal.x && transformVal.y && transformVal.k) {\r\n            svg.call(zm.transform, zoomIdentity.translate(transformVal.x, transformVal.y).scale(transformVal.k));\r\n        } else {\r\n            svg.call(zm.transform, zoomIdentity.translate(0, 0).scale(1));\r\n        }\r\n    }\r\n\r\n    removeZoomableBehaviour(svgElement: any) {\r\n        select(svgElement).on(\".zoom\", null);\r\n    }\r\n    \r\n    triggerZoomToFit(svgElement: any) {\r\n        // console.log(svgElement);\r\n    }\r\n    \r\n    graphBounds(nodes: INode[]) { \r\n        var x = Number.POSITIVE_INFINITY, X = Number. NEGATIVE_INFINITY, y = Number.POSITIVE_INFINITY, Y = Number.NEGATIVE_INFINITY; \r\n        nodes.forEach((v: any) => {\r\n            x = Math.min(x, v.x - 50 / 2); \r\n            X = Math.max(X, v.x + 50 / 2); \r\n            y = Math.min(y, v.y - 50 / 2); \r\n            Y = Math.max(Y, v.y + 50 / 2);\r\n        });\r\n        return { x: x, X: X, y: y, Y: Y };\r\n    }\r\n    \r\n    applyDraggableBehaviour(element: any, node: INode | undefined, graph: GraphEngineService | undefined) {\r\n        const d3element = select(element);\r\n\r\n        function started() {\r\n            /** Preventing propogation of dragstart to parent elements */\r\n            event.sourceEvent.stopPropagation();\r\n\r\n            if(graph && !event.active) {\r\n                graph.nodes!.forEach(n => {\r\n                    n.fx = n.x;\r\n                    n.fy = n.y;\r\n                });\r\n                graph.simulation.alphaTarget(0.1).restart();\r\n            }\r\n\r\n            event.on('drag', dragged).on('end', ended);\r\n\r\n            function dragged() {\r\n                if(node) {\r\n                    node.fx = event.x;\r\n                    node.fy = event.y;\r\n                }\r\n            }\r\n            \r\n            function ended() { \r\n                if (graph && !event.active) {\r\n                    graph.simulation.alphaTarget(0);\r\n                    setTimeout(() => {\r\n                        graph.simulation.stop();\r\n                    }, 0);\r\n                }\r\n            }\r\n        }\r\n        \r\n        d3element.call(drag()\r\n            .on('start', started));\r\n    }\r\n    removeDraggableBehaviour(element: any) {\r\n        const d3element = select(element);\r\n        d3element.on('drag', null);\r\n    }\r\n    \r\n    createTooltip(element: any, node: INode) {\r\n        const d3element = select(element); \r\n        let titleElem = d3element.select(\"title\");\r\n\r\n        if(Array.isArray(node.nodeDescAttributes) && node.nodeDescAttributes.length > 0) {\r\n            let textElems = titleElem.selectAll(\"text\") \r\n                .data(node.nodeDescAttributes).enter().append(\"text\");\r\n            textElems.append(\"tspan\").text((d: any) => d.title + \": \").attr(\"font-weight\", \"bold\");\r\n            textElems.append(\"tspan\").text((d: any) => {\r\n                                return (typeof node[d.attribute] === 'undefined'? '-' : node[d.attribute]) + \"\\n\";\r\n            });\r\n        } else {\r\n            titleElem.selectAll(\"text\") \r\n                .data([node.label])\r\n                .enter().append(\"text\")\r\n                .text((d: any) => d);\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 10
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "D3Service-1"
        },
        {
            "name": "DataBuilderService",
            "id": "injectable-DataBuilderService-c0ecb4015f34c6c1a33a32af2f90c043",
            "file": "libs/nw-graph-angular/src/lib/services/data-builder.service.ts",
            "properties": [
                {
                    "name": "nwData",
                    "defaultValue": "{\r\n        nodes: new Map<NodeId, INode>(),\r\n        edges: new Map<EdgeId, IEdge>()\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNetworkData",
                    "args": [
                        {
                            "name": "rawData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNwEdgeValid",
                    "args": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeCollection",
                            "type": "Map<NodeId | INode>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeCollection",
                            "type": "Map<NodeId | INode>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNwNodeValid",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNwEdgeAttributesFromRawNode",
                    "args": [
                        {
                            "name": "rawEdge",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawEdge",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNwNodeAttributesFromRawNode",
                    "args": [
                        {
                            "name": "rawNode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawNode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SanitizeNwData",
                    "args": [
                        {
                            "name": "nwData",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nwData",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeNwEdge",
                    "args": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeNwNode",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "rootNodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "rootNodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAddNodeWithUnknownNodeType",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { EdgeId, IEdge, INode, INwData, NeighboursStateType, NodeId } from \"../models/nw-data\";\r\nimport { ConfigParserService } from \"./config-parser.service\";\r\nimport {get as lodashGet } from \"lodash\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { NwAttribute } from '../models/nw-config';\r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, isStringNullorEmpty } from \"../utils\";\r\n\r\n@Injectable()\r\nexport class DataBuilderService {\r\n    public nwData: INwData = {\r\n        nodes: new Map<NodeId, INode>(),\r\n        edges: new Map<EdgeId, IEdge>()\r\n    };\r\n\r\n    constructor(private nwConfigParser: ConfigParserService) {}\r\n\r\n    public getNetworkData(rawData: any) {\r\n        if(\r\n            this.nwConfigParser && \r\n            this.nwConfigParser.nwConfig && \r\n            this.nwConfigParser.nwConfig.node && \r\n            this.nwConfigParser.nwConfig.edge\r\n        ) {\r\n            const nodeCollection = lodashGet(rawData, this.nwConfigParser.nwConfig.node.parentRawPath, null);\r\n            const edgeCollection = lodashGet(rawData, this.nwConfigParser.nwConfig.edge.parentRawPath, null); \r\n            // Node \r\n            if(Array.isArray(nodeCollection)) { \r\n                for (const rawNode of nodeCollection) {\r\n                    const newNode = {} as INode; \r\n                    this.loadNwNodeAttributesFromRawNode(rawNode, newNode); \r\n                    this.sanitizeNwNode(newNode, this.nwConfigParser.nwConfig.nodeRadius, this.nwConfigParser.nwConfig.rootNodeRadius); \r\n                    if(this.isNwNodeValid(newNode) && this.shouldAddNodeWithUnknownNodeType(newNode)) {\r\n                        this.nwData.nodes.set(newNode.id, newNode);\r\n                    }\r\n                }\r\n            }\r\n            // Edge \r\n            if(Array.isArray(edgeCollection)) { \r\n                for(const rawEdge of edgeCollection) {\r\n                    const newEdge = {} as IEdge; \r\n                    this.loadNwEdgeAttributesFromRawNode(rawEdge, newEdge); \r\n                    this.sanitizeNwEdge(newEdge); \r\n                    if (this.isNwEdgeValid(newEdge, this.nwData.nodes)) {\r\n                        this.nwData.edges.set(newEdge.id, newEdge);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.SanitizeNwData(this.nwData); \r\n        return this.nwData;\r\n    }\r\n\r\n    private loadNwEdgeAttributesFromRawNode(rawEdge: any, nwEdge: IEdge) {\r\n        let eAttrs: NwAttribute[] = [];\r\n        if(this.nwConfigParser && this.nwConfigParser.nwConfig && this.nwConfigParser.nwConfig.edge) { \r\n            eAttrs = this.nwConfigParser.nwConfig.edge.edgeAttributes;\r\n        }\r\n        if(Array.isArray(eAttrs)) { \r\n            for (const eAttr of eAttrs) { \r\n                if(eAttr && eAttr.key && !isStringNullorEmpty(eAttr.key)) {\r\n                    nwEdge[eAttr.key] = lodashGet(rawEdge, eAttr.rawPath as string[], null);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(this.nwConfigParser && this.nwConfigParser.nwConfig && this.nwConfigParser.nwConfig.edge \r\n                    && this.nwConfigParser.nwConfig.edge.edgeSourceIdAttributeKey\r\n                    && this.nwConfigParser.nwConfig.edge.edgeSourceIdAttributeKey\r\n                    && this.nwConfigParser.nwConfig.edge.edgeSourceIdAttributeKey) {\r\n            // Set Edge Source ID\r\n            nwEdge.sourceNodeId = nwEdge[this.nwConfigParser.nwConfig.edge.edgeSourceIdAttributeKey];\r\n            // Set Edge target Type\r\n            nwEdge.targetNodeId = nwEdge[this.nwConfigParser.nwConfig.edge.edgeTargetIdAttributeKey];\r\n            // Set Edge Title\r\n            nwEdge.title = nwEdge[this.nwConfigParser.nwConfig.edge.edgeTitleAttributeKey];\r\n        } else {\r\n            console.error(\"Mandatory attributes: sourceNodeId, targetNodeId and title are missing\");\r\n        }\r\n    }\r\n\r\n    private loadNwNodeAttributesFromRawNode(rawNode: any, nwNode: INode) {\r\n        const nodeType = lodashGet(rawNode, this.nwConfigParser.nwNodeTypeRawPath as string[], EMPTY_STRING); \r\n        const nodeTypeConfig = this.nwConfigParser.nwNodeTypes.get(nodeType);\r\n\r\n        const nAttrs = nodeTypeConfig && nodeTypeConfig.nodeAttributes? nodeTypeConfig.nodeAttributes : undefined; \r\n        nwNode.nodeDescAttributes = [];\r\n        nwNode.nodeRawObject = {};\r\n        if(Array.isArray(nAttrs)) { \r\n            for(const nAttr of nAttrs) {\r\n                if (nAttr && nAttr.key && !isStringNullorEmpty(nAttr.key) && isArrayOfNonEmptyStrings(nAttr.rawPath)) {\r\n                    nwNode[nAttr.key] = lodashGet(rawNode, nAttr.rawPath as string[], EMPTY_STRING); \r\n                    nwNode.nodeRawObject[nAttr.key] = typeof nwNode[nAttr.key] === 'string'\r\n                                                        || typeof nwNode[nAttr.key] === 'number' \r\n                                                        || typeof nwNode[nAttr.key] === 'boolean'? nwNode[nAttr.key]:\r\n                                                            EMPTY_STRING; \r\n                    if(nAttr.tooltip === true) { \r\n                        nwNode.nodeDescAttributes.push({\r\n                            attribute: nAttr.key, \r\n                            title: typeof nAttr.displayName === 'string'? nAttr.displayName : EMPTY_STRING\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if(this.nwConfigParser \r\n                && this.nwConfigParser.nwConfig \r\n                && this.nwConfigParser.nwConfig.node \r\n                && this.nwConfigParser.nwConfig.node.nodeIdAttributeKey\r\n                && this.nwConfigParser.nwConfig.node.nodeTypeAttributeKey\r\n                && this.nwConfigParser.nwConfig.node.nodeTypeAttributeKey) {\r\n            // Set Node ID \r\n            nwNode.id = nwNode[this.nwConfigParser.nwConfig.node.nodeIdAttributeKey];\r\n            // Set Node Type\r\n            nwNode.type = nwNode[this.nwConfigParser.nwConfig.node.nodeTypeAttributeKey];\r\n            // Set Node Title \r\n            nwNode.label = nwNode[this.nwConfigParser.nwConfig.node.nodeTitleAttributeKey];\r\n            // Set Node type name \r\n            nwNode.title = nodeType;\r\n        } else {\r\n            console.error(\"Mandatory attributes: NodeId, NodeType and NodeLabel are missing\");\r\n        }\r\n        // Set color \r\n        nwNode.color = nodeTypeConfig && typeof nodeTypeConfig.color === 'string'? nodeTypeConfig.color : EMPTY_STRING; \r\n        // Set ImagePath \r\n        nwNode.imagePath = nodeTypeConfig && typeof nodeTypeConfig.imagePath === 'string'? nodeTypeConfig.imagePath: EMPTY_STRING;\r\n    }\r\n\r\n    private sanitizeNwNode(nwNode: INode, nodeRadius: number, rootNodeRadius: number) { \r\n        if(typeof nwNode === 'object') {\r\n            nwNode.id = nwNode && (typeof nwNode.id === 'string' || typeof nwNode.id === 'number') ? \r\n                        nwNode.id.toString(): EMPTY_STRING; \r\n            nwNode.type = nwNode && (typeof nwNode.type === 'string' || typeof nwNode.type === 'number') ? \r\n                        nwNode.type.toString(): EMPTY_STRING; \r\n            nwNode.r = nodeRadius;\r\n            nwNode.r0 = rootNodeRadius;\r\n            nwNode.sourceIds = []; \r\n            nwNode.targetIds = []; \r\n            nwNode.neighboursStatus = NeighboursStateType.LOADED; \r\n            // Hack for now \r\n            nwNode.nodeId = nwNode.id!; \r\n            nwNode.nodeType = nwNode.type!;\r\n            nwNode.collapsed = false;\r\n        }\r\n    }\r\n    private sanitizeNwEdge(nwEdge: IEdge) { \r\n        if (typeof nwEdge === 'object') {\r\n            nwEdge.sourceNodeId = typeof nwEdge.sourceNodeId === 'string' || typeof nwEdge.sourceNodeId === 'number' ? \r\n                nwEdge.sourceNodeId.toString() : EMPTY_STRING; \r\n            nwEdge.targetNodeId = typeof nwEdge.targetNodeId === 'string' || typeof nwEdge.targetNodeId === 'number' ? \r\n                nwEdge.targetNodeId.toString() : EMPTY_STRING; \r\n            nwEdge.title = typeof nwEdge.title === 'string' || typeof nwEdge.title === 'number' ? \r\n                nwEdge.title.toString() : EMPTY_STRING; \r\n            nwEdge.id = typeof nwEdge.id === 'string' || typeof nwEdge.id === 'number' ? \r\n                nwEdge.id.toString() : uuidv4(); \r\n            nwEdge.name = nwEdge.title!; \r\n            nwEdge.linkId = nwEdge.id; \r\n            nwEdge.source = nwEdge.sourceNodeId;\r\n            nwEdge.target = nwEdge.targetNodeId;\r\n        }\r\n    }\r\n    private isNwNodeValid(nwNode: INode): boolean {\r\n        let idValid = false;\r\n        let typeValid = false;\r\n        if(nwNode) {\r\n            // Validating Node ID\r\n            if(typeof nwNode.id === 'string' && nwNode.id.trim().length > 0) {\r\n                idValid = true;\r\n            }\r\n            // Validating Node Type\r\n            if(typeof nwNode.type === 'string' && nwNode.type.trim().length > 0) {\r\n                typeValid = true;\r\n            }\r\n            return idValid && typeValid;        \r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private shouldAddNodeWithUnknownNodeType(nwNode: INode): boolean {\r\n        if(this.nwConfigParser) {\r\n            const processNodeWithUnknownNodeType = this.nwConfigParser.processNodeWithUnknownNodeType;\r\n            if(processNodeWithUnknownNodeType === true) {\r\n                return true;\r\n            } else {\r\n                if(this.nwConfigParser.nwNodeTypes.has(nwNode.nodeType)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n\r\n    private isNwEdgeValid(nwEdge: IEdge, nodeCollection: Map<NodeId, INode>) {\r\n        let sourceValid = false;\r\n        let targetValid = false;\r\n        if(nwEdge) {\r\n            // Validating Source Node ID\r\n            if(nodeCollection.has(nwEdge.sourceNodeId)) {\r\n                sourceValid = true;\r\n            }\r\n            // Validating Target Node Type \r\n            if(nodeCollection.has(nwEdge.targetNodeId)) {\r\n                targetValid = true;\r\n            }\r\n            return sourceValid && targetValid; \r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n    SanitizeNwData(nwData: INwData) {\r\n        const invalidEdgeIds: string[] = []; \r\n        nwData.edges.forEach(edge => { \r\n            if(isStringNullorEmpty(edge.sourceNodeId) || isStringNullorEmpty(edge.targetNodeId)) {\r\n                invalidEdgeIds.push(edge.id); \r\n            } else { \r\n                if(nwData.nodes.has(edge.sourceNodeId) && nwData.nodes.has(edge.targetNodeId)) {\r\n                    const sourceNode = nwData.nodes.get(edge.sourceNodeId); \r\n                    const targetNode = nwData.nodes.get(edge.targetNodeId); \r\n                    if(sourceNode && targetNode && Array.isArray(sourceNode.targetIds) \r\n                            && Array.isArray(targetNode.sourceIds)) {\r\n                                sourceNode.targetIds.indexOf(edge.targetNodeId) === -1? sourceNode.targetIds.push(edge.targetNodeId) : null;\r\n                                targetNode.sourceIds.indexOf(edge.sourceNodeId) === -1? targetNode.sourceIds.push(edge.sourceNodeId) : null; \r\n                    } else {\r\n                        invalidEdgeIds.push(edge.id);\r\n                    }\r\n                } else {\r\n                    invalidEdgeIds.push(edge.id);\r\n                }\r\n            }\r\n        }); \r\n        invalidEdgeIds.forEach(id => { \r\n            if(nwData.edges.has(id)) {\r\n                nwData.edges.delete(id);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nwConfigParser",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "nwConfigParser",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "DataBuilderService",
            "id": "injectable-DataBuilderService-f956ecac8fad6afdb2f874988270cc4a-1",
            "file": "libs/nw-graph-angular5/src/app/services/data-builder.service.ts",
            "properties": [
                {
                    "name": "nwData",
                    "defaultValue": "{\r\n        nodes: new Map<NodeId, INode>(),\r\n        edges: new Map<EdgeId, IEdge>()\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getNetworkData",
                    "args": [
                        {
                            "name": "rawData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawData",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNwEdgeValid",
                    "args": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeCollection",
                            "type": "Map<NodeId | INode>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 213,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeCollection",
                            "type": "Map<NodeId | INode>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isNwNodeValid",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNwEdgeAttributesFromRawNode",
                    "args": [
                        {
                            "name": "rawEdge",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawEdge",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadNwNodeAttributesFromRawNode",
                    "args": [
                        {
                            "name": "rawNode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "rawNode",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "SanitizeNwData",
                    "args": [
                        {
                            "name": "nwData",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 230,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nwData",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeNwEdge",
                    "args": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwEdge",
                            "type": "IEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sanitizeNwNode",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeRadius",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldAddNodeWithUnknownNodeType",
                    "args": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nwNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from \"@angular/core\";\r\nimport { EdgeId, IEdge, INode, INwData, NeighboursStateType, NodeId } from \"../models/nw-data\";\r\nimport { ConfigParserService } from \"./config-parser.service\";\r\nimport {get as lodashGet } from \"lodash\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { NwAttribute } from '../models/nw-config';\r\nimport { EMPTY_STRING, isArrayOfNonEmptyStrings, isStringNullorEmpty } from \"../utils\";\r\n\r\n@Injectable()\r\nexport class DataBuilderService {\r\n    public nwData: INwData = {\r\n        nodes: new Map<NodeId, INode>(),\r\n        edges: new Map<EdgeId, IEdge>()\r\n    };\r\n\r\n    constructor(private nwConfigParser: ConfigParserService) {}\r\n\r\n    public getNetworkData(rawData: any) {\r\n        if(\r\n            this.nwConfigParser && \r\n            this.nwConfigParser.nwConfig && \r\n            this.nwConfigParser.nwConfig.node && \r\n            this.nwConfigParser.nwConfig.edge\r\n        ) {\r\n            const nodeCollection = lodashGet(rawData, this.nwConfigParser.nwConfig.node.parentRawPath, null);\r\n            const edgeCollection = lodashGet(rawData, this.nwConfigParser.nwConfig.edge.parentRawPath, null); \r\n            // Node \r\n            if(Array.isArray(nodeCollection)) { \r\n                for (const rawNode of nodeCollection) {\r\n                    const newNode = {} as INode; \r\n                    this.loadNwNodeAttributesFromRawNode(rawNode, newNode); \r\n                    this.sanitizeNwNode(newNode, this.nwConfigParser.nwConfig.nodeRadius); \r\n                    if(this.isNwNodeValid(newNode) && this.shouldAddNodeWithUnknownNodeType(newNode)) {\r\n                        this.nwData.nodes.set(newNode.id, newNode);\r\n                    }\r\n                }\r\n            }\r\n            // Edge \r\n            if(Array.isArray(edgeCollection)) { \r\n                for(const rawEdge of edgeCollection) {\r\n                    const newEdge = {} as IEdge; \r\n                    this.loadNwEdgeAttributesFromRawNode(rawEdge, newEdge); \r\n                    this.sanitizeNwEdge(newEdge); \r\n                    if (this.isNwEdgeValid(newEdge, this.nwData.nodes)) {\r\n                        this.nwData.edges.set(newEdge.id, newEdge);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this.SanitizeNwData(this.nwData); \r\n        return this.nwData;\r\n    }\r\n\r\n    private loadNwEdgeAttributesFromRawNode(rawEdge: any, nwEdge: IEdge) {\r\n        let edgeSourceRawPath: string[] | undefined = []; \r\n        let edgeTargetRawPath: string[] | undefined = []; \r\n        let edgeTitleRawPath: string[] | undefined= []; \r\n        let eAttrs: NwAttribute[] = []; \r\n        if(this.nwConfigParser && this.nwConfigParser.nwConfig && this.nwConfigParser.nwConfig.edge) { \r\n            edgeSourceRawPath = (this.nwConfigParser.nwConfig.edge.edgeSourceIdAttribute \r\n                                    && this.nwConfigParser.nwConfig.edge.edgeSourceIdAttribute.rawPath)? \r\n                                    this.nwConfigParser.nwConfig.edge.edgeSourceIdAttribute.rawPath : undefined;\r\n            edgeTargetRawPath = (this.nwConfigParser.nwConfig.edge.edgeTargetIdAttribute \r\n                                    && this.nwConfigParser.nwConfig.edge.edgeTargetIdAttribute.rawPath)?\r\n                                    this.nwConfigParser.nwConfig.edge.edgeTargetIdAttribute.rawPath: undefined; \r\n            edgeTitleRawPath = (this.nwConfigParser.nwConfig.edge.edgeTitleAttribute \r\n                                    && this.nwConfigParser.nwConfig.edge.edgeTitleAttribute.rawPath)?\r\n                                    this.nwConfigParser.nwConfig.edge.edgeTitleAttribute.rawPath: undefined; \r\n            eAttrs = this.nwConfigParser.nwConfig.edge.edgeAttributes;\r\n        }\r\n        if(Array.isArray(eAttrs)) { \r\n            for (const eAttr of eAttrs) { \r\n                if(eAttr && eAttr.key && !isStringNullorEmpty(eAttr.key)) {\r\n                    nwEdge[eAttr.key] = lodashGet(rawEdge, eAttr.rawPath as string[], null);\r\n                }\r\n            }\r\n        }\r\n        // Set Edge Source ID \r\n        if(isArrayOfNonEmptyStrings(edgeSourceRawPath)) {\r\n            nwEdge.sourceNodeId = lodashGet(rawEdge, edgeSourceRawPath as string[], EMPTY_STRING);\r\n        }\r\n        // Set Edge target Type \r\n        if(isArrayOfNonEmptyStrings(edgeTargetRawPath)) {\r\n            nwEdge.targetNodeId = lodashGet(rawEdge, edgeTargetRawPath as string[], EMPTY_STRING);\r\n        }\r\n        // Set Edge Title \r\n        if(isArrayOfNonEmptyStrings(edgeTitleRawPath)) {\r\n            nwEdge.title = lodashGet(rawEdge, edgeTitleRawPath as string[], EMPTY_STRING);\r\n        }\r\n    }\r\n\r\n    private loadNwNodeAttributesFromRawNode(rawNode: any, nwNode: INode) {\r\n        let nodeIdRawPath: string[] | undefined; \r\n        let nodeTypeRawPath: string[] | undefined; \r\n        let nodeTitleRawPath: string[] | undefined;\r\n        \r\n        if(this.nwConfigParser && this.nwConfigParser.nwConfig && this.nwConfigParser.nwConfig.node) { \r\n            nodeIdRawPath = this.nwConfigParser.nwConfig.node.nodeIdAttribute ?\r\n                                this.nwConfigParser.nwConfig.node.nodeIdAttribute.rawPath: undefined; \r\n            nodeTypeRawPath = this.nwConfigParser.nwConfig.node.nodeTypeAttribute ?\r\n                                this.nwConfigParser.nwConfig.node.nodeTypeAttribute.rawPath: undefined; \r\n            nodeTitleRawPath = this.nwConfigParser.nwConfig.node.nodeTitleAttribute ?\r\n                                this.nwConfigParser.nwConfig.node.nodeTitleAttribute.rawPath: undefined;\r\n        }\r\n        const nodeType = lodashGet(rawNode, nodeTypeRawPath as string[], EMPTY_STRING); \r\n        const nodeTypeConfig = this.nwConfigParser.nwNodeTypes.get(nodeType);\r\n\r\n        const nAttrs = nodeTypeConfig && nodeTypeConfig.nodeAttributes? nodeTypeConfig.nodeAttributes : undefined; \r\n        nwNode.nodeDescAttributes = []; \r\n        nwNode.nodeRawObject = {}; \r\n        if(Array.isArray(nAttrs)) { \r\n            for(const nAttr of nAttrs) { \r\n                if (nAttr && nAttr.key && !isStringNullorEmpty(nAttr.key) && isArrayOfNonEmptyStrings(nAttr.rawPath)) {\r\n                    nwNode[nAttr.key] = lodashGet(rawNode, nAttr.rawPath as string[], EMPTY_STRING); \r\n                    nwNode.nodeRawObject[nAttr.key] = typeof nwNode[nAttr.key] === 'string'\r\n                                                        || typeof nwNode[nAttr.key] === 'number' \r\n                                                        || typeof nwNode[nAttr.key] === 'boolean'? nwNode[nAttr.key]:\r\n                                                            EMPTY_STRING; \r\n                    if(nAttr.tooltip === true) { \r\n                        nwNode.nodeDescAttributes.push({\r\n                            attribute: nAttr.key, \r\n                            title: typeof nAttr.displayName === 'string'? nAttr.displayName : EMPTY_STRING\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Set Node ID \r\n        if(isArrayOfNonEmptyStrings(nodeIdRawPath)) {\r\n            nwNode.id = lodashGet(rawNode, nodeIdRawPath as string[], EMPTY_STRING);\r\n        }\r\n        // Set Node Type \r\n        if(isArrayOfNonEmptyStrings(nodeTypeRawPath)) {\r\n            nwNode.type = lodashGet(rawNode, nodeTypeRawPath as string[], EMPTY_STRING);\r\n        }\r\n        // Set Node Title \r\n        if(isArrayOfNonEmptyStrings(nodeTitleRawPath)) {\r\n            nwNode.label = lodashGet(rawNode, nodeTitleRawPath as string[], EMPTY_STRING);\r\n        }\r\n        // Set Node type name \r\n        nwNode.title = nodeType; \r\n        // Set color \r\n        nwNode.color = nodeTypeConfig && typeof nodeTypeConfig.color === 'string'? nodeTypeConfig.color : EMPTY_STRING; \r\n        // Set ImagePath \r\n        nwNode.imagePath = nodeTypeConfig && typeof nodeTypeConfig.imagePath === 'string'? nodeTypeConfig.imagePath: EMPTY_STRING;\r\n    }\r\n\r\n    private sanitizeNwNode(nwNode: INode, nodeRadius: number) { \r\n        if(typeof nwNode === 'object') {\r\n            nwNode.id = nwNode && (typeof nwNode.id === 'string' || typeof nwNode.id === 'number') ? \r\n                        nwNode.id.toString(): EMPTY_STRING; \r\n            nwNode.type = nwNode && (typeof nwNode.type === 'string' || typeof nwNode.type === 'number') ? \r\n                        nwNode.type.toString(): EMPTY_STRING; \r\n            nwNode.r = nodeRadius;\r\n            nwNode.sourceIds = []; \r\n            nwNode.targetIds = []; \r\n            nwNode.neighboursStatus = NeighboursStateType.LOADED; \r\n            // Hack for now \r\n            nwNode.nodeId = nwNode.id!; \r\n            nwNode.nodeType = nwNode.type!;\r\n            nwNode.collapsed = false;\r\n        }\r\n    }\r\n    private sanitizeNwEdge(nwEdge: IEdge) { \r\n        if (typeof nwEdge === 'object') {\r\n            nwEdge.sourceNodeId = typeof nwEdge.sourceNodeId === 'string' || typeof nwEdge.sourceNodeId === 'number' ? \r\n                nwEdge.sourceNodeId.toString() : EMPTY_STRING; \r\n            nwEdge.targetNodeId = typeof nwEdge.targetNodeId === 'string' || typeof nwEdge.targetNodeId === 'number' ? \r\n                nwEdge.targetNodeId.toString() : EMPTY_STRING; \r\n            nwEdge.title = typeof nwEdge.title === 'string' || typeof nwEdge.title === 'number' ? \r\n                nwEdge.title.toString() : EMPTY_STRING; \r\n            nwEdge.id = typeof nwEdge.id === 'string' || typeof nwEdge.id === 'number' ? \r\n                nwEdge.id.toString() : uuidv4(); \r\n            nwEdge.name = nwEdge.title!; \r\n            nwEdge.linkId = nwEdge.id; \r\n            nwEdge.source = nwEdge.sourceNodeId;\r\n            nwEdge.target = nwEdge.targetNodeId;\r\n        }\r\n    }\r\n    private isNwNodeValid(nwNode: INode): boolean {\r\n        let idValid = false;\r\n        let typeValid = false;\r\n        if(nwNode) {\r\n            // Validating Node ID\r\n            if(typeof nwNode.id === 'string' && nwNode.id.trim().length > 0) {\r\n                idValid = true;\r\n            }\r\n            // Validating Node Type\r\n            if(typeof nwNode.type === 'string' && nwNode.type.trim().length > 0) {\r\n                typeValid = true;\r\n            }\r\n            return idValid && typeValid;        \r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private shouldAddNodeWithUnknownNodeType(nwNode: INode): boolean {\r\n        if(this.nwConfigParser) {\r\n            const processNodeWithUnknownNodeType = this.nwConfigParser.processNodeWithUnknownNodeType;\r\n            if(processNodeWithUnknownNodeType === true) {\r\n                return true;\r\n            } else {\r\n                if(this.nwConfigParser.nwNodeTypes.has(nwNode.nodeType)) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            }\r\n        } \r\n        return false;\r\n    }\r\n\r\n    private isNwEdgeValid(nwEdge: IEdge, nodeCollection: Map<NodeId, INode>) {\r\n        let sourceValid = false;\r\n        let targetValid = false;\r\n        if(nwEdge) {\r\n            // Validating Source Node ID\r\n            if(nodeCollection.has(nwEdge.sourceNodeId)) {\r\n                sourceValid = true;\r\n            }\r\n            // Validating Target Node Type \r\n            if(nodeCollection.has(nwEdge.targetNodeId)) {\r\n                targetValid = true;\r\n            }\r\n            return sourceValid && targetValid; \r\n        } else { \r\n            return false;\r\n        }\r\n    }\r\n    SanitizeNwData(nwData: INwData) {\r\n        const invalidEdgeIds: string[] = []; \r\n        nwData.edges.forEach(edge => { \r\n            if(isStringNullorEmpty(edge.sourceNodeId) || isStringNullorEmpty(edge.targetNodeId)) {\r\n                invalidEdgeIds.push(edge.id); \r\n            } else { \r\n                if(nwData.nodes.has(edge.sourceNodeId) && nwData.nodes.has(edge.targetNodeId)) {\r\n                    const sourceNode = nwData.nodes.get(edge.sourceNodeId); \r\n                    const targetNode = nwData.nodes.get(edge.targetNodeId); \r\n                    if(sourceNode && targetNode && Array.isArray(sourceNode.targetIds) \r\n                            && Array.isArray(targetNode.sourceIds)) {\r\n                                sourceNode.targetIds.indexOf(edge.targetNodeId) === -1? sourceNode.targetIds.push(edge.targetNodeId) : null;\r\n                                targetNode.sourceIds.indexOf(edge.sourceNodeId) === -1? targetNode.sourceIds.push(edge.sourceNodeId) : null; \r\n                    } else {\r\n                        invalidEdgeIds.push(edge.id);\r\n                    }\r\n                } else {\r\n                    invalidEdgeIds.push(edge.id);\r\n                }\r\n            }\r\n        }); \r\n        invalidEdgeIds.forEach(id => { \r\n            if(nwData.edges.has(id)) {\r\n                nwData.edges.delete(id);\r\n            }\r\n        });\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nwConfigParser",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "nwConfigParser",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DataBuilderService-1"
        },
        {
            "name": "DispatchNodeLoadService",
            "id": "injectable-DispatchNodeLoadService-e6f14e43a6b076c78b1c911b1ed1e670",
            "file": "libs/nw-graph-angular/src/lib/services/dispatch-node-load.service.ts",
            "properties": [
                {
                    "name": "dispatchNodeLoad$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nodeLoadSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dispatchNodeLoad",
                    "args": [
                        {
                            "name": "payload",
                            "type": "LoadNodesPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "LoadNodesPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs'; \r\nimport { LoadNodesPayload } from '../models/load-nodes-payload';\r\n\r\n@Injectable() export class DispatchNodeLoadService {\r\n    private nodeLoadSource;\r\n    public dispatchNodeLoad$;\r\n    constructor() {\r\n        this.nodeLoadSource = new Subject<string[]>(); \r\n        this.dispatchNodeLoad$ = this.nodeLoadSource.asObservable();\r\n    }\r\n    \r\n    dispatchNodeLoad(payload: LoadNodesPayload) { \r\n        if(payload && Array.isArray(payload.nodesToLoad)) {\r\n            this.nodeLoadSource.next(payload.nodesToLoad.map((x: any) => x.nodeId));\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        },
        {
            "name": "DispatchNodeLoadService",
            "id": "injectable-DispatchNodeLoadService-e6f14e43a6b076c78b1c911b1ed1e670-1",
            "file": "libs/nw-graph-angular5/src/app/services/dispatch-node-load.service.ts",
            "properties": [
                {
                    "name": "dispatchNodeLoad$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nodeLoadSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "dispatchNodeLoad",
                    "args": [
                        {
                            "name": "payload",
                            "type": "LoadNodesPayload",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "payload",
                            "type": "LoadNodesPayload",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs'; \r\nimport { LoadNodesPayload } from '../models/load-nodes-payload';\r\n\r\n@Injectable() export class DispatchNodeLoadService {\r\n    private nodeLoadSource;\r\n    public dispatchNodeLoad$;\r\n    constructor() {\r\n        this.nodeLoadSource = new Subject<string[]>(); \r\n        this.dispatchNodeLoad$ = this.nodeLoadSource.asObservable();\r\n    }\r\n    \r\n    dispatchNodeLoad(payload: LoadNodesPayload) { \r\n        if(payload && Array.isArray(payload.nodesToLoad)) {\r\n            this.nodeLoadSource.next(payload.nodesToLoad.map((x: any) => x.nodeId));\r\n        }\r\n    }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DispatchNodeLoadService-1"
        },
        {
            "name": "FadeinNotificationService",
            "id": "injectable-FadeinNotificationService-f23e4834527831db15852b77e4cf84e0",
            "file": "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts",
            "properties": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "active",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "active",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Notification } from '../models/notification';\r\n\r\nconst ALL_NOTIFICATION_MESSAGES = [\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message));\r\n \r\n @Injectable() export class FadeinNotificationService {\r\n    notifications: Notification[] = [];\r\n    \r\n    canAdd() {\r\n        return this.notifications.length < ALL_NOTIFICATION_MESSAGES.length;\r\n    }\r\n    \r\n    canRemove() {\r\n        return this.notifications.length > 0;\r\n    }\r\n    \r\n    add(active = true) {\r\n        let note = ALL_NOTIFICATION_MESSAGES[this.notifications.length]; \r\n        this.notifications.push(note); \r\n        setTimeout(() => {\r\n            this.remove(); \r\n        }, 3000);\r\n    }\r\n    \r\n    remove() {\r\n        this.notifications. length -= 1;\r\n    }\r\n }",
            "type": "injectable"
        },
        {
            "name": "FadeinNotificationService",
            "id": "injectable-FadeinNotificationService-f23e4834527831db15852b77e4cf84e0-1",
            "file": "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts",
            "properties": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Notification[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "active",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "active",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "canAdd",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "canRemove",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Notification } from '../models/notification';\r\n\r\nconst ALL_NOTIFICATION_MESSAGES = [\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message));\r\n \r\n @Injectable() export class FadeinNotificationService {\r\n    notifications: Notification[] = [];\r\n    \r\n    canAdd() {\r\n        return this.notifications.length < ALL_NOTIFICATION_MESSAGES.length;\r\n    }\r\n    \r\n    canRemove() {\r\n        return this.notifications.length > 0;\r\n    }\r\n    \r\n    add(active = true) {\r\n        let note = ALL_NOTIFICATION_MESSAGES[this.notifications.length]; \r\n        this.notifications.push(note); \r\n        setTimeout(() => {\r\n            this.remove(); \r\n        }, 3000);\r\n    }\r\n    \r\n    remove() {\r\n        this.notifications. length -= 1;\r\n    }\r\n }",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FadeinNotificationService-1"
        },
        {
            "name": "GraphEngineService",
            "id": "injectable-GraphEngineService-07bffa779c3194403144bbfacfe03aa5",
            "file": "libs/nw-graph-angular/src/lib/services/graph-engine.service.ts",
            "properties": [
                {
                    "name": "adapter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphAdapter | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filteredData",
                    "defaultValue": "{ nodes: new Map<string, INode>(), edges: new Map<string, IEdge>() }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "{ width: 2000, height: 725, nodeRadius: 30 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphOptions",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "simulation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ticker",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initSimulation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "nodesEqual",
                    "args": [
                        {
                            "name": "previousNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "previousNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderGraph",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulationRequired",
                    "args": [
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGraph",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shouldRender",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldRender",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { GraphOptions } from '../models/graph-adapter';\r\nimport { EventEmitter, Injectable } from '@angular/core'; \r\nimport { forceSimulation, forceManyBody, forceCollide, forceLink } from 'd3-force';\r\nimport { INode, IEdge, INwData } from '../models/nw-data'; \r\nimport { GraphAdapter } from '../models/graph-adapter';\r\n//import d3ForceAdapter from '../graph-adapters/d3-force.adapter'; \r\nimport WebcolaAdapter from '../graph-adapters/webcola/webcola.adapter';\r\n\r\n@Injectable() \r\nexport class GraphEngineService {\r\n    // public simulation: d3.Simulation<any, any>; \r\n    public simulation: any; \r\n    private adapter: GraphAdapter | undefined;\r\n    //public data: INwData = {nodes: new Map<string, node>(), edges: new Map<string, link>() }; \r\n    public filteredData: INwData = { nodes: new Map<string, INode>(), edges: new Map<string, IEdge>() }; \r\n    // public dataSource: Event Emitter<INwData> = new EventEmitter(); \r\n    public ticker: EventEmitter<any> = new EventEmitter(); \r\n    public options: GraphOptions = { width: 2000, height: 725, nodeRadius: 30 }; \r\n    public nodes: INode[] | undefined; \r\n    public links: IEdge[] | undefined;\r\n    \r\n    constructor() {\r\n        //this.adapter = new d3ForceAdapter(this.options.width, this.options.height, this.nodeRadius); \r\n        this.adapter = new WebcolaAdapter(this.options); \r\n        this.initSimulation();\r\n    }\r\n    \r\n    private initSimulation() { \r\n        if (!this.simulation) { \r\n            this.simulation = forceSimulation([])\r\n                .force(\"charge\", forceManyBody().strength(-2000))\r\n                .force('collide', forceCollide().radius(this.options.nodeRadius)) \r\n                .force(\"link\", forceLink([]).id(function (d: any) { return d.id; })) \r\n                .stop();\r\n\r\n            this.simulation.on('tick', () => {\r\n                this.ticker.emit({nodes: this.nodes, links: this.links });\r\n            });\r\n            this.simulation.on('end', function () {\r\n                // console.log(\"Simulation ended\");\r\n            });\r\n        }\r\n    }\r\n\r\n    updateGraph(data: INwData, nodeTypes: string[], layoutId: number, shouldRender: boolean = false) {\r\n        if(!data || !data.nodes || !data.nodes.size) {\r\n            // console.log(\"check 1\");\r\n            // console.log(data);\r\n            this.nodes = []; \r\n            this.links = []; \r\n            this.ticker.emit({nodes: this.nodes, links: this.links }); \r\n            return;\r\n        }\r\n        if(!this.simulationRequired(Array.from(data.nodes.values()))) {\r\n            // console.log(\"check 2\");\r\n            // console.log(data);\r\n            this.nodes = []; \r\n            this.links = []; \r\n            this.ticker.emit({nodes: this.nodes, links: this.links }); \r\n            this.renderGraph(data);\r\n            return;\r\n        }\r\n        // console.log(\"check 3\");\r\n        // console.log(data);\r\n        this.adapter!.attachNodesPosition(data, nodeTypes, layoutId);\r\n        if(shouldRender) {\r\n            this.renderGraph(data);\r\n        }\r\n    }\r\n\r\n    renderGraph(data: INwData) {\r\n        this.nodes = Array.from(data.nodes.values()); \r\n        this.links = Array.from(data.edges.values()); \r\n        this.simulation.stop().nodes(this.nodes); \r\n        let forceLinks = this.simulation.force(\"link\") as any; \r\n        forceLinks.links(this.links); \r\n        this.simulation.alpha(0).restart();\r\n    }\r\n    \r\n    nodesEqual(previousNodes: INode[], currentNodes: INode[]): boolean { \r\n        if(previousNodes === currentNodes) {\r\n            return true;\r\n        }\r\n        if(previousNodes == null || currentNodes == null) {\r\n            return false;\r\n        }\r\n        if(previousNodes.length != currentNodes.length) {\r\n            return false;\r\n        }\r\n        for(let i = 0; i < currentNodes.length; ++i) { \r\n            if (previousNodes.indexOf(currentNodes[i]) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    simulationRequired(currentNodes: INode[]): boolean { \r\n        if(Array.isArray(currentNodes) && currentNodes.length > 0) { \r\n            for(const iterator of currentNodes) { \r\n                if(typeof iterator.x == 'undefined') {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "type": "injectable"
        },
        {
            "name": "GraphEngineService",
            "id": "injectable-GraphEngineService-f4eb00b83df42434a07d2b4e48469f2c-1",
            "file": "libs/nw-graph-angular5/src/app/services/graph-engine.service.ts",
            "properties": [
                {
                    "name": "adapter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphAdapter | undefined",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "filteredData",
                    "defaultValue": "{ nodes: new Map<string, INode>(), edges: new Map<string, IEdge>() }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INwData",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "options",
                    "defaultValue": "{ width: 2000, height: 725, nodeRadius: 30 }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphOptions",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "simulation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "ticker",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<any>",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "initSimulation",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "nodesEqual",
                    "args": [
                        {
                            "name": "previousNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "previousNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "renderGraph",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "simulationRequired",
                    "args": [
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currentNodes",
                            "type": "INode[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateGraph",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "shouldRender",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "shouldRender",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { GraphOptions } from '../models/graph-adapter';\r\nimport { EventEmitter, Injectable } from '@angular/core'; \r\nimport { forceSimulation, forceManyBody, forceCollide, forceLink } from 'd3-force';\r\nimport { INode, IEdge, INwData } from '../models/nw-data'; \r\nimport { GraphAdapter } from '../models/graph-adapter';\r\n//import d3ForceAdapter from '../graph-adapters/d3-force.adapter'; \r\nimport WebcolaAdapter from '../graph-adapters/webcola/webcola.adapter';\r\n\r\n@Injectable() \r\nexport class GraphEngineService {\r\n    // public simulation: d3.Simulation<any, any>; \r\n    public simulation: any; \r\n    private adapter: GraphAdapter | undefined;\r\n    //public data: INwData = {nodes: new Map<string, node>(), edges: new Map<string, link>() }; \r\n    public filteredData: INwData = { nodes: new Map<string, INode>(), edges: new Map<string, IEdge>() }; \r\n    // public dataSource: Event Emitter<INwData> = new EventEmitter(); \r\n    public ticker: EventEmitter<any> = new EventEmitter(); \r\n    public options: GraphOptions = { width: 2000, height: 725, nodeRadius: 30 }; \r\n    public nodes: INode[] | undefined; \r\n    public links: IEdge[] | undefined;\r\n    \r\n    constructor() {\r\n        //this.adapter = new d3ForceAdapter(this.options.width, this.options.height, this.nodeRadius); \r\n        this.adapter = new WebcolaAdapter(this.options); \r\n        this.initSimulation();\r\n    }\r\n    \r\n    private initSimulation() { \r\n        if (!this.simulation) { \r\n            this.simulation = forceSimulation([])\r\n                .force(\"charge\", forceManyBody().strength(-2000))\r\n                .force('collide', forceCollide().radius(this.options.nodeRadius)) \r\n                .force(\"link\", forceLink([]).id(function (d: any) { return d.id; })) \r\n                .stop();\r\n\r\n            this.simulation.on('tick', () => {\r\n                this.ticker.emit({nodes: this.nodes, links: this.links });\r\n            });\r\n            this.simulation.on('end', function () {\r\n                // console.log(\"Simulation ended\");\r\n            });\r\n        }\r\n    }\r\n\r\n    async updateGraph(data: INwData, nodeTypes: string[], layoutId: number, shouldRender: boolean = false) {\r\n        if(!data || !data.nodes || !data.nodes.size) {\r\n            // console.log(\"check 1\");\r\n            // console.log(data);\r\n            this.nodes = []; \r\n            this.links = []; \r\n            this.ticker.emit({nodes: this.nodes, links: this.links }); \r\n            return;\r\n        }\r\n        if(!this.simulationRequired(Array.from(data.nodes.values()))) {\r\n            // console.log(\"check 2\");\r\n            // console.log(data);\r\n            this.nodes = []; \r\n            this.links = []; \r\n            this.ticker.emit({nodes: this.nodes, links: this.links }); \r\n            this.renderGraph(data);\r\n            return;\r\n        }\r\n        // console.log(\"check 3\");\r\n        // console.log(data);\r\n        await this.adapter!.attachNodesPosition(data, nodeTypes, layoutId);\r\n        if(shouldRender) {\r\n            this.renderGraph(data);\r\n        }\r\n    }\r\n\r\n    renderGraph(data: INwData) {\r\n        this.nodes = Array.from(data.nodes.values()); \r\n        this.links = Array.from(data.edges.values()); \r\n        this.simulation.stop().nodes(this.nodes); \r\n        let forceLinks = this.simulation.force(\"link\") as any; \r\n        forceLinks.links(this.links); \r\n        this.simulation.alpha(0).restart();\r\n    }\r\n    \r\n    nodesEqual(previousNodes: INode[], currentNodes: INode[]): boolean { \r\n        if(previousNodes === currentNodes) {\r\n            return true;\r\n        }\r\n        if(previousNodes == null || currentNodes == null) {\r\n            return false;\r\n        }\r\n        if(previousNodes.length != currentNodes.length) {\r\n            return false;\r\n        }\r\n        for(let i = 0; i < currentNodes.length; ++i) { \r\n            if (previousNodes.indexOf(currentNodes[i]) < 0) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    simulationRequired(currentNodes: INode[]): boolean { \r\n        if(Array.isArray(currentNodes) && currentNodes.length > 0) { \r\n            for(const iterator of currentNodes) { \r\n                if(typeof iterator.x == 'undefined') {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphEngineService-1"
        },
        {
            "name": "NetworkGraphEffects",
            "id": "injectable-NetworkGraphEffects-85fe0ffc4b053878b9787ff3b7379312",
            "file": "libs/nw-graph-angular/src/lib/store/effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Injectable()\r\nexport class NetworkGraphEffects {\r\n    constructor(private actions$: Actions) {\r\n        \r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NetworkGraphEffects",
            "id": "injectable-NetworkGraphEffects-85fe0ffc4b053878b9787ff3b7379312-1",
            "file": "libs/nw-graph-angular5/src/app/store/effects.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions } from '@ngrx/effects';\r\n\r\n@Injectable()\r\nexport class NetworkGraphEffects {\r\n    constructor(private actions$: Actions) {\r\n        \r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NetworkGraphEffects-1"
        },
        {
            "name": "NetworkGraphHostService",
            "id": "injectable-NetworkGraphHostService-a6f687dc4537d014e5778a9620163f42",
            "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3001'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "defaultAuthToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "defaultEntitlementMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "localStoreUserObject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methods": [
                {
                    "name": "flucodesQueryString",
                    "args": [
                        {
                            "name": "fluCodes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "fluCodes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNwConfig",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getNwNodes",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nwConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "numHops",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nwConfig",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "numHops",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserObject",
                    "args": [],
                    "optional": false,
                    "returnType": "GraphUserInfo",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "mapLocalToUserobject",
                    "args": [],
                    "optional": false,
                    "returnType": "GraphUserInfo",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "transformNodeTypes",
                    "args": [
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verticesQueryString",
                    "args": [
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport {Observable} from 'rxjs/Observable';\r\n \r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\n\r\ninterface GraphUserInfo {\r\n    userId?: string;\r\n    fluCodes?: string[];\r\n    nodes?: string[];\r\n    exAttributes?: string[];\r\n    authToken?: string[];\r\n}\r\n\r\nexport const AppConstants = {\r\n    user_object: 'user_object',\r\n    access_token: 'access_token'\r\n}\r\n \r\n@Injectable()\r\nexport class NetworkGraphHostService {\r\n    // const baseUrl = 'http://localhost:3001/gfcranalytics';\r\n    baseUrl = 'http://localhost:3001';\r\n    localStoreUserObject: any;\r\n    defaultEntitlementMap: any;\r\n    defaultAuthToken: string;\r\n \r\n    constructor(private http:HttpClient) {\r\n        this.defaultEntitlementMap = {\r\n            appUser: {\r\n                userEntitlementMap: {\r\n                    FIELD: [],\r\n                    FLU: [],\r\n                    NODE: ['entity', 'party', 'address', 'phone', 'email', 'ssn', 'itn', 'ein', 'account', 'case']\r\n                }\r\n            },\r\n            uid: \"\"\r\n        };\r\n        this.defaultAuthToken = 'empty';\r\n     }\r\n    // get_network_nodes?node_id=90057&node_type=gfctEntity&num_hops=2&max_nodes=100&flucodes=CNS_RTL_BNK&flucodes=DBAC_AML_CDC&vertices\r\n\r\n    getNwConfig(): Observable<any> {\r\n        const url = this.baseUrl + '/get_application_config?appID=entitiesgraph';\r\n        return this.http.get(url);\r\n    }\r\n\r\n    getNwNodes(nodeId: string, nwConfig: any, numHops: number): Observable<any> {\r\n        const rootNodeType = 'gfctEntity';\r\n        const maxNodes = nwConfig.maxNodeCount;\r\n        const userObject = this.getUserObject();\r\n        const nodeTypes = this.transformNodeTypes(userObject.nodes);\r\n        return this.http.get(this.baseUrl + `/get_network_nodes?node_id=${nodeId}&node_type=${rootNodeType}&num_hops=${numHops}&max_nodes=${maxNodes}${this.flucodesQueryString(userObject.fluCodes)}${this.verticesQueryString(nodeTypes)}`);\r\n    }\r\n\r\n    private getUserObject(): GraphUserInfo {\r\n        const localStoreUserStr = localStorage.getItem(AppConstants.user_object);\r\n        if (typeof localStoreUserStr === 'string') {\r\n            this.localStoreUserObject = JSON.parse(localStoreUserStr);\r\n        }\r\n        const userObject = this.mapLocalToUserobject(); \r\n        /*Auth Token Begin*/ \r\n        const xToken: string = sessionStorage.getItem(AppConstants.access_token); \r\n        //const xToken: string = localstorage.getItem(AppConstants.x_auth_token_header); \r\n        userObject.authToken = typeof xToken === 'string'? [xToken] : [this.defaultAuthToken];\r\n        /*Auth Token End*/ \r\n        /*Max Nodes*/ \r\n        return userObject;\r\n    }\r\n    \r\n    private mapLocalToUserobject(): GraphUserInfo {\r\n        const userobject = {} as GraphUserInfo; \r\n        let localUserEntitlementMap;\r\n\r\n        if(this.localStoreUserObject &&\r\n            this.localStoreUserObject.appUser && \r\n            this.localStoreUserObject.appUser.userEntitlementMap && \r\n            Array.isArray(this.localStoreUserObject.appUser.userEntitlementMap.FIELD) && \r\n            Array.isArray(this.localStoreUserObject.appUser.userEntitlementMap.NODE) && \r\n            Array.isArray (this.localStoreUserObject.appUser.userEntitlementMap.FLU)) {\r\n                localUserEntitlementMap = this.localStoreUserObject.appUser.userEntitlementMap;\r\n        } else {\r\n            localUserEntitlementMap = this.defaultEntitlementMap.appUser.userEntitlementMap;\r\n        }\r\n        \r\n        userobject.exAttributes = localUserEntitlementMap.FIELD; \r\n        userobject.nodes = localUserEntitlementMap.NODE; \r\n        userobject.fluCodes = localUserEntitlementMap.FLU; \r\n        userobject.userId = this.localStoreUserObject && this.localStoreUserObject.uid ? \r\n                        this.localStoreUserObject.uid : \"\";\r\n        return userobject;\r\n    } \r\n    \r\n    private transformNodeTypes(nodeTypes: string[]): string[] {\r\n        const gfctNodeTypes = new Set<string>();\r\n        for (const nType of nodeTypes) {\r\n            switch (nType) {\r\n                case 'entity':\r\n                    gfctNodeTypes.add('gfctEntity')\r\n                    break;\r\n                case 'party':\r\n                    gfctNodeTypes.add('gfctParty')\r\n                    break;\r\n                case 'address':\r\n                    gfctNodeTypes.add('gfctAddress')\r\n                    break;\r\n                case 'phone':\r\n                    gfctNodeTypes.add('gfctPhone')\r\n                    break;\r\n                case 'email':\r\n                    gfctNodeTypes.add('gfctEmail')\r\n                    break;\r\n                case 'ssn':\r\n                    gfctNodeTypes.add('gfctSSN')\r\n                    break;\r\n                case 'itn':\r\n                    gfctNodeTypes.add('gfctITN')\r\n                    break;\r\n                case 'ein':\r\n                    gfctNodeTypes.add('gfctEIN')\r\n                    break;\r\n                case 'account':\r\n                    gfctNodeTypes.add('gfctAccount')\r\n                    break;\r\n                case 'case':\r\n                    gfctNodeTypes.add('gfctCase')\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return Array.from(gfctNodeTypes);\r\n    }\r\n\r\n    private verticesQueryString(nodeTypes: string[]): string {\r\n        let qString = \"\";\r\n        for (const nType of nodeTypes) {\r\n            qString = qString + `&vertices=${nType}`;\r\n        }\r\n        return qString;\r\n    }\r\n\r\n    private flucodesQueryString(fluCodes: string[]): string {\r\n        let qString = \"\";\r\n        for (const fluCode of fluCodes) {\r\n            qString = qString + `&flucodes=${fluCode}`;\r\n        }\r\n        return qString;\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "NodeRelationService",
            "id": "injectable-NodeRelationService-611dff34dcec16521d1f325f2c787edf",
            "file": "libs/nw-graph-angular/src/lib/services/node-relation.service.ts",
            "properties": [
                {
                    "name": "notificationMoveOut$",
                    "defaultValue": "this.notificationMoveOutsource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CurrentMouseOverNodeOrEdge>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notificationMoveOutsource",
                    "defaultValue": "new Subject<CurrentMouseOverNodeOrEdge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationMoveOver$",
                    "defaultValue": "this.notificationMoveOverSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CurrentMouseOverNodeOrEdge>",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "notificationMoveOverSource",
                    "defaultValue": "new Subject<CurrentMouseOverNodeOrEdge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notificationMouseOut",
                    "args": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationMouseOver",
                    "args": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject, Observable } from 'rxjs'; \r\nimport { INode, IEdge } from '../models/nw-data';\r\n\r\n@Injectable() export class NodeRelationService {\r\n    private notificationMoveOverSource = new Subject<CurrentMouseOverNodeOrEdge>(); \r\n    private notificationMoveOutsource = new Subject<CurrentMouseOverNodeOrEdge>();\r\n    \r\n    notificationMoveOver$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOutsource.asObservable();\r\n    // currentMoveOverNode: node = null; \r\n    // currentMoveOverEdge: link = null;\r\n    \r\n    notificationMouseOver(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    \r\n    notificationMouseOut(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n}\r\n\r\nexport interface CurrentMouseOverNodeOrEdge {\r\n    node?: INode; \r\n    edge?: IEdge; \r\n    potentialSelectedNodes?: INode[]\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "NodeRelationService",
            "id": "injectable-NodeRelationService-4e2c08a1c29f5ba630611be527073d5f-1",
            "file": "libs/nw-graph-angular5/src/app/services/node-relation.service.ts",
            "properties": [
                {
                    "name": "notificationMoveOut$",
                    "defaultValue": "this.notificationMoveOutsource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CurrentMouseOverNodeOrEdge>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "notificationMoveOutsource",
                    "defaultValue": "new Subject<CurrentMouseOverNodeOrEdge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationMoveOver$",
                    "defaultValue": "this.notificationMoveOverSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<CurrentMouseOverNodeOrEdge>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notificationMoveOverSource",
                    "defaultValue": "new Subject<CurrentMouseOverNodeOrEdge>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notificationMouseOut",
                    "args": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationMouseOver",
                    "args": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "CurrentMouseOverNodeOrEdge",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs'; \r\nimport { Observable } from 'rxjs/Observable';\r\nimport { INode, IEdge } from '../models/nw-data';\r\n\r\n@Injectable() export class NodeRelationService {\r\n    private notificationMoveOverSource = new Subject<CurrentMouseOverNodeOrEdge>(); \r\n    private notificationMoveOutsource = new Subject<CurrentMouseOverNodeOrEdge>();\r\n    \r\n    notificationMoveOver$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<CurrentMouseOverNodeOrEdge> = this.notificationMoveOutsource.asObservable();\r\n    // currentMoveOverNode: node = null; \r\n    // currentMoveOverEdge: link = null;\r\n    \r\n    notificationMouseOver(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    \r\n    notificationMouseOut(message: CurrentMouseOverNodeOrEdge) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n}\r\n\r\nexport interface CurrentMouseOverNodeOrEdge {\r\n    node?: INode; \r\n    edge?: IEdge; \r\n    potentialSelectedNodes?: INode[]\r\n}\r\n",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NodeRelationService-1"
        },
        {
            "name": "NotificationBrokerService",
            "id": "injectable-NotificationBrokerService-5b5b29a1c66e291522094f5164e86660",
            "file": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
            "properties": [
                {
                    "name": "notificationLayoutChange",
                    "defaultValue": "new Subject<LayoutChangeMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationLayoutChange$",
                    "defaultValue": "this.notificationLayoutChange.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LayoutChangeMessage>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notificationMoveOut$",
                    "defaultValue": "this.notificationMoveOutsource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NotificationMessage>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "notificationMoveOutsource",
                    "defaultValue": "new Subject<NotificationMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationMoveOver$",
                    "defaultValue": "this.notificationMoveOverSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NotificationMessage>",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "notificationMoveOverSource",
                    "defaultValue": "new Subject<NotificationMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 6,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notificationMouseout",
                    "args": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationMouseover",
                    "args": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "OnLayoutChange",
                    "args": [
                        {
                            "name": "message",
                            "type": "LayoutChangeMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "LayoutChangeMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "type": "injectable"
        },
        {
            "name": "NotificationBrokerService",
            "id": "injectable-NotificationBrokerService-ba02448d08b5c788624af3bacc17ab3a-1",
            "file": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
            "properties": [
                {
                    "name": "notificationLayoutChange",
                    "defaultValue": "new Subject<LayoutChangeMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationLayoutChange$",
                    "defaultValue": "this.notificationLayoutChange.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<LayoutChangeMessage>",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "notificationMoveOut$",
                    "defaultValue": "this.notificationMoveOutsource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NotificationMessage>",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "notificationMoveOutsource",
                    "defaultValue": "new Subject<NotificationMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "notificationMoveOver$",
                    "defaultValue": "this.notificationMoveOverSource.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<NotificationMessage>",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "notificationMoveOverSource",
                    "defaultValue": "new Subject<NotificationMessage>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "notificationMouseout",
                    "args": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "notificationMouseover",
                    "args": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "NotificationMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "OnLayoutChange",
                    "args": [
                        {
                            "name": "message",
                            "type": "LayoutChangeMessage",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "LayoutChangeMessage",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core'; \r\nimport { Subject } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\n@Injectable() \r\nexport class NotificationBrokerService {\r\n    private notificationMoveOverSource = new Subject<NotificationMessage>(); \r\n    private notificationMoveOutsource = new Subject<NotificationMessage>();\r\n    private notificationLayoutChange = new Subject<LayoutChangeMessage>();\r\n    \r\n    notificationMoveOver$: Observable<NotificationMessage> = this.notificationMoveOverSource.asObservable(); \r\n    notificationMoveOut$: Observable<NotificationMessage> = this.notificationMoveOutsource.asObservable();\r\n    notificationLayoutChange$: Observable<LayoutChangeMessage> = this.notificationLayoutChange.asObservable();\r\n    notificationMouseover(message: NotificationMessage) {\r\n        this.notificationMoveOverSource.next(message);\r\n    }\r\n    notificationMouseout(message: NotificationMessage) {\r\n        this.notificationMoveOutsource.next(message);\r\n    }\r\n    OnLayoutChange(message: LayoutChangeMessage) {\r\n        this.notificationLayoutChange.next(message);\r\n    }\r\n}\r\n\r\nexport interface NotificationMessage {\r\n    entityId?: string; \r\n    nodeIds?: string[];\r\n}\r\n\r\nexport interface LayoutChangeMessage {\r\n    currentLayout: number;\r\n    previousLayout: number;\r\n    enableRender: boolean;\r\n}",
            "type": "injectable",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NotificationBrokerService-1"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "ChangeActiveLayout",
            "id": "class-ChangeActiveLayout-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ChangeLayoutPayload",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 95,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ChangeLayoutPayload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeLayoutPayload",
                    "optional": false,
                    "description": "",
                    "line": 96,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.CHANGE_ACTIVE_LAYOUT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ChangeActiveLayout",
            "id": "class-ChangeActiveLayout-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ChangeLayoutPayload",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 81,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ChangeLayoutPayload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeLayoutPayload",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.CHANGE_ACTIVE_LAYOUT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ChangeActiveLayout-1"
        },
        {
            "name": "CollapseAllNodes",
            "id": "class-CollapseAllNodes-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 92,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.COLLAPSE_ALL_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CollapseNode",
            "id": "class-CollapseNode-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.COLLAPSE_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "CollapseNode",
            "id": "class-CollapseNode-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 59,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.COLLAPSE_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 59,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "CollapseNode-1"
        },
        {
            "name": "ExcludeNodeTypes",
            "id": "class-ExcludeNodeTypes-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 41,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXCLUDE_NODE_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ExcludeNodeTypes",
            "id": "class-ExcludeNodeTypes-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 38,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXCLUDE_NODE_TYPES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ExcludeNodeTypes-1"
        },
        {
            "name": "ExpandAllNodes",
            "id": "class-ExpandAllNodes-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 83,
                "jsdoctags": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_ALL_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 83,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ExpandNode",
            "id": "class-ExpandNode-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 45,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ExpandNode",
            "id": "class-ExpandNode-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "literal type",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ExpandNode-1"
        },
        {
            "name": "ExpandNodesAfterLoad",
            "id": "class-ExpandNodesAfterLoad-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 87,
                "jsdoctags": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_NODES_AFTER_LOAD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ExpandOnlyRootNode",
            "id": "class-ExpandOnlyRootNode-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_ONLY_ROOT_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ExpandOnlyRootNode",
            "id": "class-ExpandOnlyRootNode-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 77,
                "jsdoctags": [
                    {
                        "name": "enableRender",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "enableRender",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.EXPAND_ONLY_ROOT_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ExpandOnlyRootNode-1"
        },
        {
            "name": "GraphError",
            "id": "class-GraphError-f7827c2ec3bda4c7e79c7adce0350f79",
            "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export const nwGraphErrorName = \"NwGraphError\";\r\n\r\nexport interface GraphLog {\r\n    id: number; \r\n    entityId?: string; \r\n    nodeIds?: string[]; \r\n    logType: GraphLogType; \r\n    source: string; \r\n    message: string; \r\n    messageDesc: string; \r\n    timestamp: Date;\r\n}\r\n\r\nexport class GraphError extends Error {\r\n    logObj: GraphLog; \r\n    constructor(logobj: GraphLog, ...params: string[]) {\r\n        super(...params); \r\n        this.logObj = logobj; \r\n        this.name = nwGraphErrorName;\r\n    }\r\n}\r\n\r\nexport function extractGraphLogFromError(err: Error | GraphError): GraphLog {\r\n    if(err.name === nwGraphErrorName) {\r\n        return (err as GraphError).logObj;\r\n    } else { \r\n        return { id: generateUniqueId(), logType: GraphLogType.Error, \r\n                    message: err.message, source: \"Unknown\",\r\n                    messageDesc: err.message, \r\n                    timestamp: new Date() } as GraphLog;\r\n    }\r\n}\r\n\r\nexport function generateUniqueId(): number {\r\n    return Date.now() + Math.random();\r\n}\r\n\r\nexport enum GraphLogType {\r\n    Info = 0, Warning = 1, Error = 2, RetryableError = 3\r\n}\r\n\r\nexport enum GraphLogErrorSeverity {\r\n    Low = 0, Medium = 1, High = 2, Critical = 3\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logobj",
                        "type": "GraphLog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "logobj",
                        "type": "GraphLog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "logObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "GraphError",
            "id": "class-GraphError-f7827c2ec3bda4c7e79c7adce0350f79-1",
            "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export const nwGraphErrorName = \"NwGraphError\";\r\n\r\nexport interface GraphLog {\r\n    id: number; \r\n    entityId?: string; \r\n    nodeIds?: string[]; \r\n    logType: GraphLogType; \r\n    source: string; \r\n    message: string; \r\n    messageDesc: string; \r\n    timestamp: Date;\r\n}\r\n\r\nexport class GraphError extends Error {\r\n    logObj: GraphLog; \r\n    constructor(logobj: GraphLog, ...params: string[]) {\r\n        super(...params); \r\n        this.logObj = logobj; \r\n        this.name = nwGraphErrorName;\r\n    }\r\n}\r\n\r\nexport function extractGraphLogFromError(err: Error | GraphError): GraphLog {\r\n    if(err.name === nwGraphErrorName) {\r\n        return (err as GraphError).logObj;\r\n    } else { \r\n        return { id: generateUniqueId(), logType: GraphLogType.Error, \r\n                    message: err.message, source: \"Unknown\",\r\n                    messageDesc: err.message, \r\n                    timestamp: new Date() } as GraphLog;\r\n    }\r\n}\r\n\r\nexport function generateUniqueId(): number {\r\n    return Date.now() + Math.random();\r\n}\r\n\r\nexport enum GraphLogType {\r\n    Info = 0, Warning = 1, Error = 2, RetryableError = 3\r\n}\r\n\r\nexport enum GraphLogErrorSeverity {\r\n    Low = 0, Medium = 1, High = 2, Critical = 3\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "logobj",
                        "type": "GraphLog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "params",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "logobj",
                        "type": "GraphLog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "params",
                        "type": "string[]",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "dotDotDotToken": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "logObj",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "extends": "Error",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphError-1"
        },
        {
            "name": "LoadExternalData",
            "id": "class-LoadExternalData-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ExternalDataPayload",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 75,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ExternalDataPayload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExternalDataPayload",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.LOAD_EXTERNAL_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadExternalData",
            "id": "class-LoadExternalData-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "ExternalDataPayload",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 73,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "ExternalDataPayload",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ExternalDataPayload",
                    "optional": false,
                    "description": "",
                    "line": 74,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.LOAD_EXTERNAL_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LoadExternalData-1"
        },
        {
            "name": "Notification",
            "id": "class-Notification-b560689729407c06ff116b7b69f2e23e",
            "file": "libs/nw-graph-angular/src/lib/models/notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Notification {\r\n    constructor(public name: string, public message = '', public messageState = 'hidden') {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "messageState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hidden'"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hidden'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "messageState",
                    "defaultValue": "'hidden'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Notification",
            "id": "class-Notification-b560689729407c06ff116b7b69f2e23e-1",
            "file": "libs/nw-graph-angular5/src/app/models/notification.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class Notification {\r\n    constructor(public name: string, public message = '', public messageState = 'hidden') {\r\n    }\r\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''"
                    },
                    {
                        "name": "messageState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hidden'"
                    }
                ],
                "line": 1,
                "jsdoctags": [
                    {
                        "name": "name",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "message",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "''",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "messageState",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "defaultValue": "'hidden'",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "messageState",
                    "defaultValue": "'hidden'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Notification-1"
        },
        {
            "name": "ResetActiveTab",
            "id": "class-ResetActiveTab-2914682d39f33d50e8d53d0d1f33db00",
            "file": "apps/demo-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { MatTab } from '@angular/material';\r\n\r\nexport enum ActionTypes {\r\n    SET_ACTIVE_TAB = '[APP]SET_ACTIVE_TAB',\r\n    RESET_ACTIVE_TAB = '[APP]RESET_ACTIVE_TAB'\r\n}\r\n\r\nexport class SetActiveTab implements Action {\r\n    public readonly type = ActionTypes.SET_ACTIVE_TAB;\r\n    constructor(public payload: MatTab) {}\r\n}\r\n\r\nexport class ResetActiveTab implements Action {\r\n    public readonly type = ActionTypes.RESET_ACTIVE_TAB;\r\n    constructor() {}\r\n}\r\n\r\nexport type Actions = SetActiveTab | ResetActiveTab;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.RESET_ACTIVE_TAB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ResetGraph",
            "id": "class-ResetGraph-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.RESET_GRAPH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ResetGraph",
            "id": "class-ResetGraph-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 63
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.RESET_GRAPH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ResetGraph-1"
        },
        {
            "name": "ResetNodesPositions",
            "id": "class-ResetNodesPositions-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "layoutId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 71,
                "jsdoctags": [
                    {
                        "name": "layoutId",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.RESET_NODES_POSITIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ResetNodesPositions",
            "id": "class-ResetNodesPositions-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 70
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.RESET_NODES_POSITIONS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ResetNodesPositions-1"
        },
        {
            "name": "SelectNode",
            "id": "class-SelectNode-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 50,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.SELECT_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SelectNode",
            "id": "class-SelectNode-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 47,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.SELECT_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SelectNode-1"
        },
        {
            "name": "SelectOnlyClickedNode",
            "id": "class-SelectOnlyClickedNode-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 54,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.SELECT_ONLY_CLICKED_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SelectOnlyClickedNode",
            "id": "class-SelectOnlyClickedNode-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.SELECT_ONLY_CLICKED_NODE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SelectOnlyClickedNode-1"
        },
        {
            "name": "SetActiveTab",
            "id": "class-SetActiveTab-2914682d39f33d50e8d53d0d1f33db00",
            "file": "apps/demo-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { MatTab } from '@angular/material';\r\n\r\nexport enum ActionTypes {\r\n    SET_ACTIVE_TAB = '[APP]SET_ACTIVE_TAB',\r\n    RESET_ACTIVE_TAB = '[APP]RESET_ACTIVE_TAB'\r\n}\r\n\r\nexport class SetActiveTab implements Action {\r\n    public readonly type = ActionTypes.SET_ACTIVE_TAB;\r\n    constructor(public payload: MatTab) {}\r\n}\r\n\r\nexport class ResetActiveTab implements Action {\r\n    public readonly type = ActionTypes.RESET_ACTIVE_TAB;\r\n    constructor() {}\r\n}\r\n\r\nexport type Actions = SetActiveTab | ResetActiveTab;",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "MatTab",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "MatTab",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTab",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.SET_ACTIVE_TAB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ToggleLabel",
            "id": "class-ToggleLabel-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.TOGGLE_LABEL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 68,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ToggleLabel",
            "id": "class-ToggleLabel-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.TOGGLE_LABEL",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ToggleLabel-1"
        },
        {
            "name": "ToggleRender",
            "id": "class-ToggleRender-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 99
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.TOGGLE_RENDER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "ToggleRender",
            "id": "class-ToggleRender-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 85
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.TOGGLE_RENDER",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ToggleRender-1"
        },
        {
            "name": "UnselectAllNodes",
            "id": "class-UnselectAllNodes-13fe7b3545a397f2f1e6d1cdb6ffa977",
            "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    EXPAND_ALL_NODES = '[NW]EXPAND_ALL_NODES',\r\n    EXPAND_NODES_AFTER_LOAD = '[NW]EXPAND_NODES_AFTER_LOAD',\r\n    COLLAPSE_ALL_NODES = '[NW]COLLAPSE_ALL_NODES',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH;\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS;\r\n    constructor(public layoutId: number) {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandAllNodes implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ExpandNodesAfterLoad implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODES_AFTER_LOAD;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class CollapseAllNodes implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_ALL_NODES;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ExpandAllNodes\r\n                        | ExpandNodesAfterLoad\r\n                        | CollapseAllNodes\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.UNSELECT_ALL_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UnselectAllNodes",
            "id": "class-UnselectAllNodes-6c1321a7c09dfddb231e20b37b651301-1",
            "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store'; \r\nimport { TransformInfo } from '../models/load-nodes-payload';\r\nimport { INode, IEdge, INwData } from '../models/nw-data';\r\n\r\nexport enum ActionTypes {\r\n    EXCLUDE_NODE_TYPES = '[NW]EXCLUDE_NODE_TYPES',\r\n    EXPAND_NODE = '[NW]EXPAND_NODE',\r\n    SELECT_NODE = '[NW]SELECT_NODE',\r\n    SELECT_ONLY_CLICKED_NODE = '[NW]SELECT_ONLY_CLICKED_NODE',\r\n    UNSELECT_ALL_NODES = '[NW]UNSELECT_ALL_NODES',\r\n    TOGGLE_LABEL = '[NW]TOGGLE_LABEL',\r\n    COLLAPSE_NODE = '[NW]COLLAPSE_NODE',\r\n    RESET_GRAPH = '[NW]RESET_GRAPH',\r\n    RESET_NODES_POSITIONS = '[NW]RESET_NODES_POSITIONS',\r\n    LOAD_EXTERNAL_DATA = '[NW]LOAD_EXTERNAL_DATA',\r\n    EXPAND_ONLY_ROOT_NODE = '[NW]EXPAND_ONLY_ROOT_NODE',\r\n    CHANGE_ACTIVE_LAYOUT = '[NW]CHANGE_ACTIVE_LAYOUT',\r\n    TOGGLE_RENDER = '[NW]TOGGLE_RENDER'\r\n}\r\n\r\nexport interface ExternalDataPayload { \r\n    rootNodeId: string; \r\n    data: INwData;\r\n    nodeTypes: string[],\r\n    maxNodeCount: number; \r\n    nodeCount: number;\r\n    enableRender: boolean\r\n}\r\n\r\nexport interface ChangeLayoutPayload { \r\n    layoutId: number;\r\n    prevLayoutId: number;\r\n    prevLayoutTransform: TransformInfo;\r\n    enableRender: boolean;\r\n}\r\n\r\nexport class ExcludeNodeTypes implements Action {\r\n    public readonly type = ActionTypes.EXCLUDE_NODE_TYPES; \r\n    constructor(public payload: string[]) {}\r\n}\r\nexport class ExpandNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {\r\n    }\r\n}\r\nexport class SelectNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class SelectOnlyClickedNode implements Action {\r\n    public readonly type = ActionTypes.SELECT_ONLY_CLICKED_NODE; \r\n    constructor(public payload: string) {}\r\n}\r\nexport class UnselectAllNodes implements Action {\r\n    public readonly type = ActionTypes.UNSELECT_ALL_NODES; \r\n    constructor() {}\r\n}\r\nexport class CollapseNode implements Action {\r\n    public readonly type = ActionTypes.COLLAPSE_NODE; \r\n    constructor(public payload: { nodeId: string; currentVisibleNodes: INode[]; currentVisibleEdges: IEdge[];}) {}\r\n}\r\nexport class ResetGraph implements Action {\r\n    public readonly type = ActionTypes.RESET_GRAPH; \r\n    constructor() {}\r\n}\r\nexport class ToggleLabel implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_LABEL;\r\n}\r\nexport class ResetNodesPositions implements Action {\r\n    public readonly type = ActionTypes.RESET_NODES_POSITIONS; constructor() {}\r\n}\r\nexport class LoadExternalData implements Action {\r\n    public readonly type = ActionTypes.LOAD_EXTERNAL_DATA; \r\n    constructor(public payload: ExternalDataPayload) {}\r\n}\r\nexport class ExpandOnlyRootNode implements Action {\r\n    public readonly type = ActionTypes.EXPAND_ONLY_ROOT_NODE;\r\n    constructor(public enableRender: boolean) {}\r\n}\r\nexport class ChangeActiveLayout implements Action {\r\n    public readonly type = ActionTypes.CHANGE_ACTIVE_LAYOUT;\r\n    constructor(public payload: ChangeLayoutPayload) {}\r\n}\r\nexport class ToggleRender implements Action {\r\n    public readonly type = ActionTypes.TOGGLE_RENDER;\r\n    constructor() {}\r\n}\r\nexport type Actions = ExcludeNodeTypes\r\n                        | ExpandNode \r\n                        | ToggleLabel\r\n                        | CollapseNode\r\n                        | ResetGraph \r\n                        | ResetNodesPositions \r\n                        | SelectNode\r\n                        | SelectOnlyClickedNode \r\n                        | UnselectAllNodes \r\n                        | LoadExternalData\r\n                        | ExpandOnlyRootNode\r\n                        | ChangeActiveLayout\r\n                        | ToggleRender;\r\n    \r\n\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 55
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "ActionTypes.UNSELECT_ALL_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        122,
                        142
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "UnselectAllNodes-1"
        },
        {
            "name": "WebcolaAdapter",
            "id": "class-WebcolaAdapter-9ae0f7aca23fb1c1700dd2f690fd3ea5",
            "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/webcola.adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cola from 'webcola'; \r\nimport { INode, IEdge, INwData } from '../../models/nw-data'; \r\nimport { GraphAdapter, GraphOptions } from '../../models/graph-adapter';\r\nimport * as d3 from 'd3';\r\nimport { gridConstrainsts } from './grid.constraints';\r\nimport { treeConstrainsts } from './tree.constraints';\r\n\r\nexport default class WebcolaAdapter implements GraphAdapter {\r\n    private d3cola: any;\r\n\r\n    constructor(private options: GraphOptions) {\r\n        this.initialize(options);\r\n    }\r\n\r\n    initialize(options: GraphOptions) {\r\n        this.options = options;\r\n    }\r\n    \r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number) { \r\n        let nodeKeys: any[] = []; \r\n        let nodes: any[] = []; \r\n        let links: any[] = []; \r\n        let linkDistance = 140;\r\n        let groups: any[] = [];\r\n        \r\n        data.nodes.forEach((node: INode, key: string | undefined) => {\r\n            nodeKeys.push(key);\r\n            nodes.push({name: node.nodeId, order: 0, type: node.nodeType });\r\n        });\r\n\r\n        data.edges.forEach((value: IEdge) => {\r\n            let sourceIdx = nodeKeys.indexOf(value.sourceNodeId); \r\n            let targetIdx = nodeKeys.indexOf(value.targetNodeId); \r\n            links.push({source: sourceIdx, target: targetIdx});\r\n        });\r\n\r\n        if(layoutId === 1) {\r\n            // if(nodes.length > 100) {\r\n            //     linkDistance = 250;\r\n            // }\r\n            // if(nodes.length > 200) {\r\n            //     linkDistance = 400;\r\n            // }\r\n            // this.d3cola = cola.d3adaptor(d3)\r\n            //             .size([this.options.width, this.options.height])\r\n            //             .defaultNodeSize(this.options.nodeRadius * 2)\r\n            //             .linkDistance(linkDistance)\r\n            //             .nodes(nodes)\r\n            //             .links(links)\r\n            //             .avoidOverlaps(true)\r\n            //             .flowLayout(\"y\", 30);\r\n            //             // .symmetricDiffLinkLengths(6);\r\n            // this.d3cola.start(400, 400, 400);\r\n            this.d3cola = cola.d3adaptor(d3)\r\n                                .size([this.options.width, this.options.height])\r\n                                .avoidOverlaps(true)\r\n                                .defaultNodeSize(this.options.nodeRadius * 2);\r\n                                //.linkDistance(150);\r\n            this.d3cola = treeConstrainsts(this.d3cola, nodes, links, linkDistance);\r\n            this.d3cola.start(50, 100, 200);\r\n        } else if(layoutId === 2) {\r\n            this.d3cola = cola.d3adaptor(d3)\r\n                        .size([this.options.width, this.options.height])\r\n                        .avoidOverlaps(true)\r\n                        .defaultNodeSize(this.options.nodeRadius * 2);\r\n                        //.linkDistance(150);\r\n            this.d3cola = gridConstrainsts(this.d3cola, nodes, links, linkDistance, nodeTypes);\r\n            this.d3cola.start(50, 100, 200);\r\n        } else {\r\n            if(nodes.length > 100) {\r\n                linkDistance = 220;\r\n            }\r\n            if(nodes.length > 200) {\r\n                linkDistance = 350;\r\n            }\r\n            this.d3cola = cola.d3adaptor(d3)\r\n                        .size([this.options.width, this.options.height])\r\n                        .avoidOverlaps(true)\r\n                        .defaultNodeSize(this.options.nodeRadius * 2)\r\n                        .linkDistance(linkDistance)\r\n                        .nodes(nodes)\r\n                        .links(links)\r\n                        .groups(groups)\r\n                        .avoidOverlaps(true);\r\n            this.d3cola.start(50, 100, 200);\r\n        }\r\n        this.d3cola.stop();\r\n        nodes.forEach((value: any) => {\r\n            let _oldValue = data.nodes.get(value.name); \r\n            _oldValue!.x = value.x;\r\n            _oldValue!.y = value.y; \r\n        });\r\n    }\r\n}\r\n    ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "GraphOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "GraphOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "d3cola",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "attachNodesPosition",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "GraphAdapter"
            ]
        },
        {
            "name": "WebcolaAdapter",
            "id": "class-WebcolaAdapter-791100ad42dffbfe455e07cfba3d248c-1",
            "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/webcola.adapter.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import * as cola from 'webcola'; \r\nimport { INode, IEdge, INwData } from '../../models/nw-data'; \r\nimport { GraphAdapter, GraphOptions } from '../../models/graph-adapter';\r\nimport * as d3 from 'd3';\r\nimport { gridConstrainsts } from './grid.constraints';\r\nimport { treeConstrainsts } from './tree.constraints';\r\n\r\nexport default class WebcolaAdapter implements GraphAdapter {\r\n    private d3cola: any;\r\n\r\n    constructor(private options: GraphOptions) {\r\n        this.initialize(options);\r\n    }\r\n\r\n    initialize(options: GraphOptions) {\r\n        this.options = options;\r\n        this.d3cola = cola.d3adaptor(d3)\r\n                        .size([this.options.width, this.options.height])\r\n                        .avoidOverlaps(true)\r\n                        .defaultNodeSize(this.options.nodeRadius * 2);\r\n                        //.linkDistance(150);\r\n    }\r\n    \r\n    attachNodesPosition(data: INwData, nodeTypes: string[], layoutId: number) : Promise<void> { \r\n        return new Promise((resolutionFunc, rejectionFunc) => {\r\n            let nodeKeys: any[] = []; \r\n            let nodes: any[] = []; \r\n            let links: any[] = []; \r\n            let linkDistance = 140;\r\n            let groups: any[] = [];\r\n            \r\n            data.nodes.forEach((node: INode, key: string | undefined) => {\r\n                nodeKeys.push(key);\r\n                nodes.push({name: node.nodeId, order: 0, type: node.nodeType });\r\n            });\r\n\r\n            data.edges.forEach((value: IEdge) => {\r\n                let sourceIdx = nodeKeys.indexOf(value.sourceNodeId); \r\n                let targetIdx = nodeKeys.indexOf(value.targetNodeId); \r\n                links.push({source: sourceIdx, target: targetIdx});\r\n            });\r\n            // console.log(\"logging graph data nodes\", JSON.stringify(nodes));\r\n            // console.log(\"logging graph data edges\", JSON.stringify(links));\r\n\r\n            if(layoutId === 1) {\r\n                this.d3cola = treeConstrainsts(this.d3cola, nodes, links);\r\n            } else if(layoutId === 2) {\r\n                this.d3cola = gridConstrainsts(this.d3cola, nodes, links, linkDistance, nodeTypes);\r\n            } else {\r\n                if(nodes.length > 100) {\r\n                    linkDistance = 250;\r\n                }\r\n                if(nodes.length > 200) {\r\n                    linkDistance = 400;\r\n                }\r\n                this.d3cola.linkDistance(linkDistance)\r\n                    .nodes(nodes)\r\n                    .links(links)\r\n                    .groups(groups)\r\n                    // .symmetricDiffLinkLengths(100,0.7)\r\n                    .avoidOverlaps(true);\r\n                    // .jaccardLinkLengths(0)\r\n                    // .symmetricDiffLinkLengths(0)\r\n                    // .flowLayout('x', 100)\r\n            }\r\n            this.d3cola.start(50, 100, 200);\r\n            setTimeout(() => {\r\n                this.d3cola.stop();\r\n                nodes.forEach((value: any) => {\r\n                    let _oldValue = data.nodes.get(value.name); \r\n                    _oldValue!.x = value.x;\r\n                    _oldValue!.y = value.y; \r\n                });\r\n                resolutionFunc();\r\n            }, 200);\r\n        });\r\n    }\r\n}\r\n    ",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "options",
                        "type": "GraphOptions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "options",
                        "type": "GraphOptions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "d3cola",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "methods": [
                {
                    "name": "attachNodesPosition",
                    "args": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "INwData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initialize",
                    "args": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "GraphOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "GraphAdapter"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "WebcolaAdapter-1"
        }
    ],
    "directives": [
        {
            "name": "DraggableDirective",
            "id": "directive-DraggableDirective-60dbfed4ed070969f960483c87223218",
            "file": "libs/nw-graph-angular/src/lib/directives/draggable.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { D3Service } from '../services/d3.service';\r\nimport { INode } from '../models/nw-data';\r\nimport { GraphEngineService } from '../services/graph-engine.service';\r\n\r\n@Directive({\r\n    selector: '[draggableNode]'\r\n})\r\nexport class DraggableDirective implements OnInit, OnChanges {\r\n    @Input('draggableNode') draggableNode: INode | undefined;\r\n    @Input('draggableInGraph') draggableInGraph: GraphEngineService | undefined;\r\n\r\n    constructor(private d3Service: D3Service, private _element: ElementRef) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.d3Service.applyDraggableBehaviour(this._element.nativeElement, this.draggableNode, this.draggableInGraph);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if(!changes.draggableNode.firstChange && changes.draggableNode) {\r\n            if(changes.draggableNode.previousValue) {\r\n                this.d3Service.removeDraggableBehaviour(this._element.nativeElement);\r\n            }\r\n            if(changes.draggableNode.currentValue) {\r\n                this.d3Service.applyDraggableBehaviour(this._element.nativeElement, changes.draggableNode.currentValue, this.draggableInGraph);\r\n            }\r\n        }\r\n    }\r\n}",
            "selector": "[draggableNode]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "draggableInGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "GraphEngineService | undefined"
                },
                {
                    "name": "draggableNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "INode | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "DraggableDirective",
            "id": "directive-DraggableDirective-60dbfed4ed070969f960483c87223218-1",
            "file": "libs/nw-graph-angular5/src/app/directives/draggable.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, ElementRef, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { D3Service } from '../services/d3.service';\r\nimport { INode } from '../models/nw-data';\r\nimport { GraphEngineService } from '../services/graph-engine.service';\r\n\r\n@Directive({\r\n    selector: '[draggableNode]'\r\n})\r\nexport class DraggableDirective implements OnInit, OnChanges {\r\n    @Input('draggableNode') draggableNode: INode | undefined;\r\n    @Input('draggableInGraph') draggableInGraph: GraphEngineService | undefined;\r\n\r\n    constructor(private d3Service: D3Service, private _element: ElementRef) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.d3Service.applyDraggableBehaviour(this._element.nativeElement, this.draggableNode, this.draggableInGraph);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if(!changes.draggableNode.firstChange && changes.draggableNode) {\r\n            if(changes.draggableNode.previousValue) {\r\n                this.d3Service.removeDraggableBehaviour(this._element.nativeElement);\r\n            }\r\n            if(changes.draggableNode.currentValue) {\r\n                this.d3Service.applyDraggableBehaviour(this._element.nativeElement, changes.draggableNode.currentValue, this.draggableInGraph);\r\n            }\r\n        }\r\n    }\r\n}",
            "selector": "[draggableNode]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "draggableInGraph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "GraphEngineService | undefined"
                },
                {
                    "name": "draggableNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "INode | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DraggableDirective-1"
        },
        {
            "name": "NodeMenuOptionDirective",
            "id": "directive-NodeMenuOptionDirective-256543b8f16efa77e25c67ae9f118fa1",
            "file": "libs/nw-graph-angular/src/lib/directives/node-menu-option.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\r\nimport { Highlightable } from \"@angular/cdk/a11y\";\r\n\r\n@Directive({\r\n    selector: '[role=\"option\"]',\r\n    host: {\r\n        '[class.active-option]': 'isActive'\r\n    }\r\n})\r\nexport class NodeMenuOptionDirective implements Highlightable {\r\n    isActive = false;\r\n\r\n    setActiveStyles(): void {\r\n        this.isActive = true;\r\n    }\r\n\r\n    setInactiveStyles(): void {\r\n        this.isActive = false;\r\n    }\r\n\r\n}",
            "selector": "[role=\"option\"]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "setActiveStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInactiveStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "Highlightable"
            ]
        },
        {
            "name": "NodeMenuOptionDirective",
            "id": "directive-NodeMenuOptionDirective-256543b8f16efa77e25c67ae9f118fa1-1",
            "file": "libs/nw-graph-angular5/src/app/directives/node-menu-option.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive } from \"@angular/core\";\r\nimport { Highlightable } from \"@angular/cdk/a11y\";\r\n\r\n@Directive({\r\n    selector: '[role=\"option\"]',\r\n    host: {\r\n        '[class.active-option]': 'isActive'\r\n    }\r\n})\r\nexport class NodeMenuOptionDirective implements Highlightable {\r\n    isActive = false;\r\n\r\n    setActiveStyles(): void {\r\n        this.isActive = true;\r\n    }\r\n\r\n    setInactiveStyles(): void {\r\n        this.isActive = false;\r\n    }\r\n\r\n}",
            "selector": "[role=\"option\"]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "isActive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "setActiveStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setInactiveStyles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "Highlightable"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NodeMenuOptionDirective-1"
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-549fdf5470106836f8a2ac8a1142060e",
            "file": "libs/nw-graph-angular/src/lib/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit } from '@angular/core';\r\nimport { INode } from '../models/nw-data';\r\nimport { D3Service } from '../services/d3.service';\r\n\r\n@Directive({\r\n    selector: '[tooltip]'\r\n})\r\nexport class TooltipDirective implements OnInit {\r\n    @Input('tooltip') tooltipNode: INode | undefined;\r\n    @Input('nodesDescription') nodesDescription: any[] = [];\r\n\r\n    constructor(private d3Service: D3Service, private _element: ElementRef) {\r\n        \r\n    }\r\n\r\n    ngOnInit() {\r\n        this.d3Service.createTooltip(this._element.nativeElement, this.tooltipNode!);\r\n    }\r\n}",
            "selector": "[tooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "nodesDescription",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "INode | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "TooltipDirective",
            "id": "directive-TooltipDirective-549fdf5470106836f8a2ac8a1142060e-1",
            "file": "libs/nw-graph-angular5/src/app/directives/tooltip.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit } from '@angular/core';\r\nimport { INode } from '../models/nw-data';\r\nimport { D3Service } from '../services/d3.service';\r\n\r\n@Directive({\r\n    selector: '[tooltip]'\r\n})\r\nexport class TooltipDirective implements OnInit {\r\n    @Input('tooltip') tooltipNode: INode | undefined;\r\n    @Input('nodesDescription') nodesDescription: any[] = [];\r\n\r\n    constructor(private d3Service: D3Service, private _element: ElementRef) {\r\n        \r\n    }\r\n\r\n    ngOnInit() {\r\n        this.d3Service.createTooltip(this._element.nativeElement, this.tooltipNode!);\r\n    }\r\n}",
            "selector": "[tooltip]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "nodesDescription",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]"
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "INode | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "TooltipDirective-1"
        },
        {
            "name": "ZoomableDirective",
            "id": "directive-ZoomableDirective-b74dbf358d9fa332b82610c3b98213a2",
            "file": "libs/nw-graph-angular/src/lib/directives/zoomable.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { TransformInfo } from \"../models/load-nodes-payload\";\r\nimport { D3Service } from '../services/d3.service';\r\n\r\n@Directive({\r\n    selector: '[zoomableOf]'\r\n})\r\nexport class ZoomableDirective implements OnInit, OnChanges {\r\n    // @Input('zoomableOf') zoomableOf: ElementRef | undefined;\r\n    @Input('zoomableOf') zoomableOf: HTMLElement | undefined;\r\n    @Input('layoutId') layoutId: number | undefined;\r\n    @Input('transformVal') transformVal: TransformInfo = {x: 0, y: 0, k: 1};\r\n\r\n    constructor(private _element: ElementRef, private d3Service: D3Service) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        if(this.zoomableOf) {\r\n            this.d3Service.applyZoomableBehaviour(this.zoomableOf, this._element.nativeElement, this.transformVal);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if(typeof changes.transformVal !== 'undefined' && !changes.transformVal.firstChange) {\r\n            if(this.zoomableOf) {\r\n                this.d3Service.applyZoomableBehaviour(this.zoomableOf, this._element.nativeElement, this.transformVal);\r\n            }\r\n        }\r\n    }\r\n}",
            "selector": "[zoomableOf]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number | undefined"
                },
                {
                    "name": "transformVal",
                    "defaultValue": "{x: 0, y: 0, k: 1}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TransformInfo"
                },
                {
                    "name": "zoomableOf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "HTMLElement | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "ZoomableDirective",
            "id": "directive-ZoomableDirective-b74dbf358d9fa332b82610c3b98213a2-1",
            "file": "libs/nw-graph-angular5/src/app/directives/zoomable.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, Input, OnInit, OnChanges, SimpleChanges } from \"@angular/core\";\r\nimport { TransformInfo } from \"../models/load-nodes-payload\";\r\nimport { D3Service } from '../services/d3.service';\r\n\r\n@Directive({\r\n    selector: '[zoomableOf]'\r\n})\r\nexport class ZoomableDirective implements OnInit, OnChanges {\r\n    // @Input('zoomableOf') zoomableOf: ElementRef | undefined;\r\n    @Input('zoomableOf') zoomableOf: HTMLElement | undefined;\r\n    @Input('layoutId') layoutId: number | undefined;\r\n    @Input('transformVal') transformVal: TransformInfo = {x: 0, y: 0, k: 1};\r\n\r\n    constructor(private _element: ElementRef, private d3Service: D3Service) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        if(this.zoomableOf) {\r\n            this.d3Service.applyZoomableBehaviour(this.zoomableOf, this._element.nativeElement, this.transformVal);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if(typeof changes.transformVal !== 'undefined' && !changes.transformVal.firstChange) {\r\n            if(this.zoomableOf) {\r\n                this.d3Service.applyZoomableBehaviour(this.zoomableOf, this._element.nativeElement, this.transformVal);\r\n            }\r\n        }\r\n    }\r\n}",
            "selector": "[zoomableOf]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "layoutId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number | undefined"
                },
                {
                    "name": "transformVal",
                    "defaultValue": "{x: 0, y: 0, k: 1}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "TransformInfo"
                },
                {
                    "name": "zoomableOf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "HTMLElement | undefined"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "_element",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "d3Service",
                        "type": "D3Service",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ZoomableDirective-1"
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e53e8a847d3b3d0984a19341673cccaf",
            "file": "apps/demo-angular12/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_nwConfigJsonURL",
                    "defaultValue": "'assets/mock-data/nwconfig.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "_nwDataJsonURL",
                    "defaultValue": "'assets/mock-data/sampleData2.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "dataLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "maxNodeCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "numHops",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "\"90098302633\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getJSON",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        122
                    ],
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNumHopChange",
                    "args": [
                        {
                            "name": "numHop",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        129
                    ],
                    "jsdoctags": [
                        {
                            "name": "numHop",
                            "type": "number | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core'; \nimport { HttpClient } from '@angular/common/http'; \nimport { Observable, of } from 'rxjs'; \nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { ActivatedRoute, ActivationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  rootNodeId: string = \"90098302633\"; \n  // @Input('rootNodeId') rootNodeId: \n  dataLoading: boolean = false; \n  data: any; \n  config: any; \n  private _nwConfigJsonURL = 'assets/mock-data/nwconfig.json'; \n  // private _nwDataJsonURL = 'assets/mock-data/sampleData.json';\n  private _nwDataJsonURL = 'assets/mock-data/sampleData2.json';\n  private numHops: number | undefined;\n  private maxNodeCount: number | undefined;\n\n  sub: any;\n\n  constructor(private http: HttpClient, private _Activatedroute: ActivatedRoute, private router: Router) {\n  }\n\n  ngOnInit() { \n    // this.rootNodeId = '90098302633'; //TG \n    // this.rootNodeId = '900126917570'; \n    // this.dataLoading = false;\n    // of(this._nwConfigJsonURL).pipe(concatMap((url: string) => this.getJSON(url)))\n    // .subscribe((result) => {\n    //   this.config = result; \n    //   console.log(\"config\", result);\n    // });\n    this.router.events\n    .pipe(\n      filter(e => (e instanceof ActivationEnd) && (Object.keys(e.snapshot.params).length > 0)),\n      map(e => e instanceof ActivationEnd ? e.snapshot.params : {})\n    ).subscribe((params: any) => {\n      this.dataLoading = false;\n        of(this._nwConfigJsonURL).pipe(concatMap((url: string) => this.getJSON(url)))\n          .subscribe((result) => {\n            this.config = result;\n            this.numHops = this.config.numHops;\n            this.maxNodeCount = this.config.maxNodeCount;\n            console.log('config', result);\n            // Data\n            this.dataLoading = false;\n            this.rootNodeId = params && params['entityid']? params['entityid'] : '';\n            this.onNumHopChange(this.numHops);\n          });\n    });\n  }\n\n  async onNumHopChange(numHop: number | undefined) { \n    console.log(\"Num Hops changed\");\n    try {\n      if(this.rootNodeId && numHop) {\n        // Local Begin\n        this.rootNodeId = '9007442292';\n        this.dataLoading = true;\n        of(this._nwDataJsonURL).pipe(concatMap((url: string) => this.getJSON(url)))\n          .subscribe((result) => {\n            this.data = result;\n            console.log('config', result);\n          });\n          this.dataLoading = false;\n        // Local End\n      }\n    } catch(ex) {\n      console.error(ex);\n      this.dataLoading = false;\n    }\n  }\n  \n  public getJSON(url: string): Observable<any> {\n    return this.http.get(url);\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  } \n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_Activatedroute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_Activatedroute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<network-graph  [rootNodeId]='rootNodeId'\n                [dataLoading]='dataLoading'\n                [config]='config'\n                [data]='data'\n                (numHopChanged)='onNumHopChange($event)'>\n</network-graph>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d147f0237fc1fd4fa26c2f6b4c523c9d-1",
            "file": "apps/demo-angular5/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'app'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "AppComponent-1",
            "templateData": "<network-graph-host></network-graph-host>"
        },
        {
            "name": "FadeinNotificationComponent",
            "id": "component-FadeinNotificationComponent-d318b50010a136dc238ae416b8ca7ce2",
            "file": "libs/nw-graph-angular/src/lib/components/fadein-notification/fadein-notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "network-fadein-notify",
            "styleUrls": [
                "./fadein-notification.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "fadein-notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Notification[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\nimport { Notification } from '../../models/notification';\r\n\r\n@Component({\r\n    selector: 'network-fadein-notify',\r\n    templateUrl: 'fadein-notification.component.html',\r\n    styleUrls: ['./fadein-notification.component.css'],\r\n    animations: [\r\n        trigger('simpleFadeAnimation', [\r\n            state('in', style({ opacity: 1})),\r\n            transition(':enter', [\r\n                style({ opacity: 0 }),\r\n                animate(600),\r\n            ]),\r\n            transition(\r\n                ':leave',\r\n                animate(600, style({ opacity: 0 }))\r\n            ),\r\n        ]),\r\n    ],\r\n})\r\nexport class FadeinNotificationComponent {\r\n    @Input() notifications: Notification[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-container {\r\n    width: 100%;\r\n    float: right;\r\n    margin-right: 20px;\r\n}\r\n\r\n.list-item {\r\n    text-align: center;\r\n    float: right;\r\n    color: red;\r\n}\r\n\r\n.list-item .message {\r\n    color: red;\r\n    width: 100%;\r\n}",
                    "styleUrl": "./fadein-notification.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class='list-container'>\r\n    <div class='list-item' \r\n        *ngFor='let note of notifications' \r\n        [@simpleFadeAnimation]=\"'in'\">\r\n        {{note.message}}\r\n    </div>\r\n</div>"
        },
        {
            "name": "FadeinNotificationComponent",
            "id": "component-FadeinNotificationComponent-d318b50010a136dc238ae416b8ca7ce2-1",
            "file": "libs/nw-graph-angular5/src/app/components/fadein-notification/fadein-notification.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "network-fadein-notify",
            "styleUrls": [
                "./fadein-notification.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "fadein-notification.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "notifications",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Notification[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { trigger, state, style, animate, transition } from '@angular/animations';\r\nimport { Notification } from '../../models/notification';\r\n\r\n@Component({\r\n    selector: 'network-fadein-notify',\r\n    templateUrl: 'fadein-notification.component.html',\r\n    styleUrls: ['./fadein-notification.component.css'],\r\n    animations: [\r\n        trigger('simpleFadeAnimation', [\r\n            state('in', style({ opacity: 1})),\r\n            transition(':enter', [\r\n                style({ opacity: 0 }),\r\n                animate(600),\r\n            ]),\r\n            transition(\r\n                ':leave',\r\n                animate(600, style({ opacity: 0 }))\r\n            ),\r\n        ]),\r\n    ],\r\n})\r\nexport class FadeinNotificationComponent {\r\n    @Input() notifications: Notification[] = [];\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-container {\r\n    width: 100%;\r\n    float: right;\r\n    margin-right: 20px;\r\n}\r\n\r\n.list-item {\r\n    text-align: center;\r\n    float: right;\r\n    color: red;\r\n}\r\n\r\n.list-item .message {\r\n    color: red;\r\n    width: 100%;\r\n}",
                    "styleUrl": "./fadein-notification.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FadeinNotificationComponent-1",
            "templateData": "<div class='list-container'>\r\n    <div class='list-item' \r\n        *ngFor='let note of notifications' \r\n        [@simpleFadeAnimation]=\"'in'\">\r\n        {{note.message}}\r\n    </div>\r\n</div>"
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-4f401b949902159eaa5c3d2c785a4c4c",
            "file": "libs/nw-graph-angular/src/lib/components/sidebar/filter/filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sidebar-filter",
            "styleUrls": [
                "./filter.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allComplete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "excludedNodeTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "notificationUpdatedSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "task",
                    "defaultValue": "{\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "loadNodeTypes",
                    "args": [
                        {
                            "name": "excludedNodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "excludedNodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAll",
                    "args": [
                        {
                            "name": "included",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "included",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "someComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAllComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from './../../../store/state';\r\nimport { Subscription } from \"rxjs\";\r\nimport { NwNodeType } from \"../../../models/nw-config\";\r\nimport { ConfigParserService } from \"../../../services/config-parser.service\";\r\nimport * as graphSelectors from '../../../store/selectors';\r\nimport { take } from \"rxjs/operators\";\r\nimport { ExcludeNodeTypes } from \"../../../store/actions\";\r\n\r\nexport interface Task {\r\n    type: null | NwNodeType; \r\n    included: boolean; \r\n    subtasks?: Task[];\r\n}\r\n\r\n@Component({\r\n    selector: 'sidebar-filter', \r\n    templateUrl: './filter.component.html', \r\n    styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent implements OnInit, OnDestroy { \r\n    task: Task = {\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    };\r\n    \r\n    allComplete: boolean = true; \r\n    excludedNodeTypes: string[] = []; \r\n    notificationUpdatedSub: Subscription | undefined; \r\n    \r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.store$.select(graphSelectors.selectExcludedNodeTypes).pipe(take(1)).subscribe((nTypes) => {\r\n            this.excludedNodeTypes = nTypes;\r\n            this.loadNodeTypes(this.excludedNodeTypes); \r\n        }); \r\n        this.notificationUpdatedSub = this.configParserService.notificationUpdated$.subscribe(() => {\r\n            this.loadNodeTypes(this.excludedNodeTypes);\r\n        })\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.notificationUpdatedSub) {\r\n            this.notificationUpdatedSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    loadNodeTypes(excludedNodeTypes: string[]) {\r\n        const newSubTasks: Task [] = []; \r\n        this.configParserService.nwNodeTypes.forEach((value, key) => {\r\n            newSubTasks.push({ type: value, included: excludedNodeTypes.indexOf(key) === -1 ? true : false });\r\n        }); \r\n        this.task.subtasks = newSubTasks;\r\n    }\r\n    \r\n    updateAllComplete() {\r\n        this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.included); \r\n        if(this.allComplete) {\r\n            this.store$.dispatch(new ExcludeNodeTypes([]));\r\n         } else { \r\n            const nTypes: string[] = []; \r\n            if(Array.isArray(this.task.subtasks)) {\r\n                this.task.subtasks.forEach(x => {\r\n                    if(!x.included && x.type) { \r\n                        nTypes.push(x.type.name);\r\n                    }\r\n                }); \r\n            }\r\n            this.store$.dispatch(new ExcludeNodeTypes(nTypes));\r\n        }\r\n    }\r\n    someComplete() : boolean {\r\n        if(this.task.subtasks == null) { \r\n            return false; \r\n        } \r\n        return this.task.subtasks.filter(t => t.included).length > 0 && !this.allComplete;\r\n    }\r\n    \r\n    get allPossibleNodeTypes(): string[] { \r\n        const nTypes: string[] = []; \r\n        if(Array.isArray(this.task.subtasks)) {\r\n            this.task.subtasks.forEach(x => {\r\n                if(x.type) {\r\n                    nTypes.push(x.type.name); \r\n                }\r\n            }); \r\n        }\r\n        return nTypes;\r\n    }\r\n    \r\n    setAll(included: boolean) {\r\n        this.allComplete = included; \r\n        if(this.task.subtasks == null) { \r\n            return; \r\n        } \r\n        this.task.subtasks.forEach(t => t.included = included); \r\n        if(this.allComplete) { \r\n            this.store$.dispatch(new ExcludeNodeTypes([])); \r\n        } else { \r\n            this.store$.dispatch(new ExcludeNodeTypes(this.allPossibleNodeTypes)); \r\n        }\r\n    }\r\n}\r\n        \r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-checkbox ::ng-deep .mat-checkbox-inner-container {\r\n    width: 15px; \r\n    height: 15px;\r\n}\r\n\r\n.nw-filter-chk-row { \r\n    display: flex; \r\n    flex-direction: row; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    padding: 2px 2px 10px;\r\n}\r\n\r\n.nw-filter-chk-label { \r\n    display: flex; \r\n    flex-direction: row; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    align-self: center; \r\n    padding-left: 5px;\r\n}\r\n\r\n.nw-filter-chk {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    align-items: center; \r\n    justify-content: center; \r\n    align-self: center;\r\n}\r\n\r\n.nw-filter-chk-img {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    width: 30px; \r\n    height: 30px; \r\n    align-items: center; \r\n    justify-content: center; \r\n    border-radius: 50%; \r\n    border-color: #000000; \r\n    border-style: solid; \r\n    border-width: .5px; \r\n    align-self: center;\r\n}\r\n\r\n.nw-filter-chk-txt {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    align-items: center; \r\n    justify-content: center; \r\n    align-self: center;\r\n}\r\n\r\n.item-avatar {\r\n    height: 20px; \r\n    width: 20px;\r\n}\r\n\r\n.labels-text {\r\n    margin-left: 10px; \r\n    margin-top: 0; \r\n    margin-bottom: 0; \r\n    font-size: 14px;\r\n}\r\n    \r\n",
                    "styleUrl": "./filter.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "allPossibleNodeTypes": {
                    "name": "allPossibleNodeTypes",
                    "getSignature": {
                        "name": "allPossibleNodeTypes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 83
                    }
                }
            },
            "templateData": "<ng-container>\r\n    <div class=\"nw-filter-chk-row\">\r\n        <div>\r\n            <mat-checkbox [checked]=\"allComplete\" [indeterminate]=\"someComplete()\" (change)=\"setAll($event.checked)\">\r\n            </mat-checkbox> \r\n        </div>\r\n        <div class=\"nw-filter-chk-label\">Check/ Uncheck All</div> \r\n    </div> \r\n    <div class=\"nw-filter-chk-row\" *ngFor=\"let subtask of task.subtasks\"> \r\n        <div class=\"nw-filter-chk\">\r\n            <mat-checkbox [(ngModel)]=\"subtask.included\" (ngModelChange)=\"updateAllComplete()\"></mat-checkbox>\r\n        </div> \r\n        <div class=\"nw-filter-chk-label\"> \r\n            <div class=\"nw-filter-chk-img\" [style.background-color]=\"subtask.type!.color\">\r\n                <img class=\"item-avatar\" src=\"{{subtask.type!.imagePath}}\" alt=\"Node Type\"> \r\n            </div> \r\n            <div class=\"nw-filter-chk-txt\">\r\n                <p class=\"labels-text\">{{ subtask.type!.displayName }}</p> \r\n            </div> \r\n        </div> \r\n    </div> \r\n</ng-container>\r\n    "
        },
        {
            "name": "FilterComponent",
            "id": "component-FilterComponent-4f401b949902159eaa5c3d2c785a4c4c-1",
            "file": "libs/nw-graph-angular5/src/app/components/sidebar/filter/filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sidebar-filter",
            "styleUrls": [
                "./filter.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allComplete",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "excludedNodeTypes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "notificationUpdatedSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "task",
                    "defaultValue": "{\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Task",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "loadNodeTypes",
                    "args": [
                        {
                            "name": "excludedNodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "excludedNodeTypes",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setAll",
                    "args": [
                        {
                            "name": "included",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "included",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "someComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateAllComplete",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from './../../../store/state';\r\nimport { Subscription } from \"rxjs\";\r\nimport { NwNodeType } from \"../../../models/nw-config\";\r\nimport { ConfigParserService } from \"../../../services/config-parser.service\";\r\nimport * as graphSelectors from '../../../store/selectors';\r\nimport { take } from \"rxjs/operators\";\r\nimport { ExcludeNodeTypes } from \"../../../store/actions\";\r\n\r\nexport interface Task {\r\n    type: null | NwNodeType; \r\n    included: boolean; \r\n    subtasks?: Task[];\r\n}\r\n\r\n@Component({\r\n    selector: 'sidebar-filter', \r\n    templateUrl: './filter.component.html', \r\n    styleUrls: ['./filter.component.css']\r\n})\r\nexport class FilterComponent implements OnInit, OnDestroy { \r\n    task: Task = {\r\n        type: null, \r\n        included: true, \r\n        subtasks: []\r\n    };\r\n    \r\n    allComplete: boolean = true; \r\n    excludedNodeTypes: string[] = []; \r\n    notificationUpdatedSub: Subscription | undefined; \r\n    \r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.store$.select(graphSelectors.selectExcludedNodeTypes).pipe(take(1)).subscribe((nTypes) => {\r\n            this.excludedNodeTypes = nTypes;\r\n            this.loadNodeTypes(this.excludedNodeTypes); \r\n        }); \r\n        this.notificationUpdatedSub = this.configParserService.notificationUpdated$.subscribe(() => {\r\n            this.loadNodeTypes(this.excludedNodeTypes);\r\n        })\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        if(this.notificationUpdatedSub) {\r\n            this.notificationUpdatedSub.unsubscribe();\r\n        }\r\n    }\r\n\r\n    loadNodeTypes(excludedNodeTypes: string[]) {\r\n        const newSubTasks: Task [] = []; \r\n        this.configParserService.nwNodeTypes.forEach((value, key) => {\r\n            newSubTasks.push({ type: value, included: excludedNodeTypes.indexOf(key) === -1 ? true : false });\r\n        }); \r\n        this.task.subtasks = newSubTasks;\r\n    }\r\n    \r\n    updateAllComplete() {\r\n        this.allComplete = this.task.subtasks != null && this.task.subtasks.every(t => t.included); \r\n        if(this.allComplete) {\r\n            this.store$.dispatch(new ExcludeNodeTypes([]));\r\n         } else { \r\n            const nTypes: string[] = []; \r\n            if(Array.isArray(this.task.subtasks)) {\r\n                this.task.subtasks.forEach(x => {\r\n                    if(!x.included && x.type) { \r\n                        nTypes.push(x.type.name);\r\n                    }\r\n                }); \r\n            }\r\n            this.store$.dispatch(new ExcludeNodeTypes(nTypes));\r\n        }\r\n    }\r\n    someComplete() : boolean {\r\n        if(this.task.subtasks == null) { \r\n            return false; \r\n        } \r\n        return this.task.subtasks.filter(t => t.included).length > 0 && !this.allComplete;\r\n    }\r\n    \r\n    get allPossibleNodeTypes(): string[] { \r\n        const nTypes: string[] = []; \r\n        if(Array.isArray(this.task.subtasks)) {\r\n            this.task.subtasks.forEach(x => {\r\n                if(x.type) {\r\n                    nTypes.push(x.type.name); \r\n                }\r\n            }); \r\n        }\r\n        return nTypes;\r\n    }\r\n    \r\n    setAll(included: boolean) {\r\n        this.allComplete = included; \r\n        if(this.task.subtasks == null) { \r\n            return; \r\n        } \r\n        this.task.subtasks.forEach(t => t.included = included); \r\n        if(this.allComplete) { \r\n            this.store$.dispatch(new ExcludeNodeTypes([])); \r\n        } else { \r\n            this.store$.dispatch(new ExcludeNodeTypes(this.allPossibleNodeTypes)); \r\n        }\r\n    }\r\n}\r\n        \r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-checkbox ::ng-deep .mat-checkbox-inner-container {\r\n    width: 15px; \r\n    height: 15px;\r\n}\r\n\r\n.nw-filter-chk-row { \r\n    display: flex; \r\n    flex-direction: row; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    padding: 2px 2px 10px;\r\n}\r\n\r\n.nw-filter-chk-label { \r\n    display: flex; \r\n    flex-direction: row; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    align-self: center; \r\n    padding-left: 5px;\r\n}\r\n\r\n.nw-filter-chk {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    align-items: center; \r\n    justify-content: center; \r\n    align-self: center;\r\n}\r\n\r\n.nw-filter-chk-img {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    width: 30px; \r\n    height: 30px; \r\n    align-items: center; \r\n    justify-content: center; \r\n    border-radius: 50%; \r\n    border-color: #000000; \r\n    border-style: solid; \r\n    border-width: .5px; \r\n    align-self: center;\r\n}\r\n\r\n.nw-filter-chk-txt {\r\n    display: flex; \r\n    align-self: flex-end; \r\n    align-items: center; \r\n    justify-content: center; \r\n    align-self: center;\r\n}\r\n\r\n.item-avatar {\r\n    height: 20px; \r\n    width: 20px;\r\n}\r\n\r\n.labels-text {\r\n    margin-left: 10px; \r\n    margin-top: 0; \r\n    margin-bottom: 0; \r\n    font-size: 14px;\r\n}\r\n    \r\n",
                    "styleUrl": "./filter.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "allPossibleNodeTypes": {
                    "name": "allPossibleNodeTypes",
                    "getSignature": {
                        "name": "allPossibleNodeTypes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 83
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FilterComponent-1",
            "templateData": "<ng-container>\r\n    <div class=\"nw-filter-chk-row\">\r\n        <div>\r\n            <mat-checkbox [checked]=\"allComplete\" [indeterminate]=\"someComplete()\" (change)=\"setAll($event.checked)\">\r\n            </mat-checkbox> \r\n        </div>\r\n        <div class=\"nw-filter-chk-label\">Check/ Uncheck All</div> \r\n    </div> \r\n    <div class=\"nw-filter-chk-row\" *ngFor=\"let subtask of task.subtasks\"> \r\n        <div class=\"nw-filter-chk\">\r\n            <mat-checkbox [(ngModel)]=\"subtask.included\" (ngModelChange)=\"updateAllComplete()\"></mat-checkbox>\r\n        </div> \r\n        <div class=\"nw-filter-chk-label\"> \r\n            <div class=\"nw-filter-chk-img\" [style.background-color]=\"subtask.type!.color\">\r\n                <img class=\"item-avatar\" src=\"{{subtask.type!.imagePath}}\" alt=\"Node Type\"> \r\n            </div> \r\n            <div class=\"nw-filter-chk-txt\">\r\n                <p class=\"labels-text\">{{ subtask.type!.displayName }}</p> \r\n            </div> \r\n        </div> \r\n    </div> \r\n</ng-container>\r\n    "
        },
        {
            "name": "GraphComponent",
            "id": "component-GraphComponent-94ed02a26c50b9798a7c68314a81ecc3",
            "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "network-graph",
            "styleUrls": [
                "graph.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "graph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "{}"
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "{}"
                },
                {
                    "name": "dataLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean"
                },
                {
                    "name": "nodeCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number"
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "EMPTY_STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "numHopChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autoNetworkExpand$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "autoNetworkExplore$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "changeLayoutSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "containerHeight",
                    "defaultValue": "window.innerHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "contextMenuOptions",
                    "defaultValue": "[\r\n    { id: 0, label: 'Collapse'}, // {id: 1, label: 'Open in new tab'} \r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "fadeinNotificationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FadeinNotificationService",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "graphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphcontainer', {static: false}"
                        }
                    ]
                },
                {
                    "name": "graphEngineService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphEngineService",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hideLabel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "isContextMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "latestFocusedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "latestFocusedNodeRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkOverlayOrigin | undefined",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "layoutId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge[]",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "maxNodes",
                    "defaultValue": "DEFAULT_MAX_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "nodeRefs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CdkOverlayOrigin> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'noderef'"
                        }
                    ]
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "notificationBrokerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationBrokerService",
                    "optional": false,
                    "description": "",
                    "line": 90,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "numHops",
                    "defaultValue": "DEFAULT_NUM_HOPS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "numHopsChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "options",
                    "defaultValue": "{ width: DEFAULT_WIDGET_WIDTH, height: DEFAULT_WIDGET_HEIGHT }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "rootEntityDataLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "scrollEventHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "selectActiveLayout$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "selectActiveLayoutSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "selectDirectLinkedFilterByNodeType$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "selectDirectLinkedFilterByNodeTypeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "selectedNodes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INode[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "selectMaxNodesExceeded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "selectMaxNodesExceededSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "SVG_MARGIN",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "transformVal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo | undefined",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "zoomableContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'zoomablecontainer', {static: false}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "contextMenuClick",
                    "args": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnChangeNumHops",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 266,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetNodePositions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 246,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 217,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOnlyClickedNode",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 242,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewportClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ExpandAllNodes, ExpandNodesAfterLoad } from './../../store/actions';\r\nimport { EMPTY_STRING } from '../../utils';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, AfterViewInit, OnDestroy, OnInit, Output, QueryList, SimpleChanges, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../store/state'; \r\nimport { debounceTime, take, tap } from 'rxjs/operators'; \r\nimport { ExpandNode, CollapseNode, ResetGraph, ToggleLabel, SelectNode,\r\n  UnselectAllNodes, SelectOnlyClickedNode, ResetNodesPositions, LoadExternalData, ExternalDataPayload, ExpandOnlyRootNode, ChangeActiveLayout } from '../../store/actions';\r\nimport { DataBuilderService } from '../../services/data-builder.service';\r\nimport { ConfigParserService } from '../../services/config-parser.service';\r\nimport { IEdge, INode, INwData } from '../../models/nw-data';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { GraphEngineService } from '../../services/graph-engine.service';\r\nimport * as graphSelectors from '../../store/selectors'; \r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { FadeinNotificationService } from '../../services/fadein-notification.service';\r\nimport { GraphLog } from '../../models/graph-log';\r\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { LayoutChangeMessage, NotificationBrokerService } from '../../services/notification-broker.service';\r\nimport { zoomTransform} from 'd3-zoom';\r\nimport { TransformInfo } from '../../models/load-nodes-payload';\r\n\r\nconst DEFAULT_MAX_NODES = 150;\r\nconst DEFAULT_NUM_HOPS = 2;\r\nconst DEFAULT_WIDGET_HEIGHT = 720;\r\nconst DEFAULT_WIDGET_WIDTH = 2000;\r\n\r\n@Component({\r\n  selector: 'network-graph', \r\n  changeDetection: ChangeDetectionStrategy.OnPush, \r\n  templateUrl: 'graph.component.html', \r\n  styleUrls: ['graph.component.css']\r\n})\r\nexport class GraphComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {\r\n  @Input('rootNodeId') rootNodeId = EMPTY_STRING;\r\n  @Input('dataLoading') dataLoading = false;\r\n  @Input('config') config = {};\r\n  @Input('data') data = {};\r\n  @Input('nodeCount') nodeCount = 0;\r\n  @Output('numHopChanged') numHopChanged = new EventEmitter();\r\n  nodes: INode[] = []; \r\n  links: IEdge[] = [];\r\n  numHops = DEFAULT_NUM_HOPS; \r\n  maxNodes = DEFAULT_MAX_NODES;\r\n  containerHeight = window.innerHeight;\r\n  options = { width: DEFAULT_WIDGET_WIDTH, height: DEFAULT_WIDGET_HEIGHT };\r\n  SVG_MARGIN = 20;\r\n  @ViewChild('graphcontainer', { static: false }) graphContainer: ElementRef;\r\n  @ViewChild('zoomablecontainer', { static: false }) zoomableContainer: ElementRef;\r\n\r\n  /* Observables - Begin */\r\n  hideLabel$: Observable<boolean> | undefined;\r\n  autoNetworkExplore$: Observable<boolean> | undefined;\r\n  autoNetworkExpand$: Observable<boolean> | undefined;\r\n  rootEntityDataLoading$: Observable<boolean> | undefined;\r\n  transformVal: TransformInfo | undefined;\r\n  layoutId = 0;\r\n  // layoutId$: Observable<number | undefined> | undefined;\r\n  selectedNodes$: Observable<INode[]> | undefined;\r\n  selectDirectLinkedFilterByNodeType$: any;\r\n  selectDirectLinkedFilterByNodeTypeSubscription: Subscription | undefined;\r\n  selectMaxNodesExceeded$: any;\r\n  selectMaxNodesExceededSubscription: Subscription | undefined;\r\n  selectActiveLayout$: any;\r\n  selectActiveLayoutSubscription: Subscription | undefined;\r\n  changeLayoutSubscription: Subscription | undefined;\r\n  numHopsChangeSubscription: Subscription | undefined;\r\n  /* Observables - End */\r\n\r\n  scrollEventHandler: any;\r\n\r\n  /* context menu properties - Begin */\r\n  isContextMenuOpen = false; \r\n  latestFocusedNodeRef: CdkOverlayOrigin | undefined; \r\n  latestFocusedNode: INode | undefined;\r\n  @ViewChildren(\"noderef\") nodeRefs: QueryList<CdkOverlayOrigin> | undefined;\r\n  contextMenuOptions = [\r\n    { id: 0, label: 'Collapse'}, // {id: 1, label: 'Open in new tab'} \r\n  ];\r\n  /* context menu properties - End */\r\n\r\n  constructor(private ref: ChangeDetectorRef, \r\n              private store$: Store<GraphState>, \r\n              private dataBuilderService: DataBuilderService, \r\n              private configParserService: ConfigParserService,\r\n              public graphEngineService: GraphEngineService,\r\n              public overlay: Overlay, \r\n              public viewContainerRef: ViewContainerRef, \r\n              public fadeinNotificationService: FadeinNotificationService,\r\n              public notificationBrokerService: NotificationBrokerService) { }\r\n\r\n  ngOnInit() {\r\n    this.hideLabel$ = this.store$.select(graphSelectors.selectIsHideLabel);\r\n    this.autoNetworkExpand$ = this.store$.select(graphSelectors.selectAutoNetworkExpand); \r\n    // this.layoutId$ = this.store$.select(graphSelectors.selectActiveLayout); \r\n    this.selectedNodes$ = this.store$.select(graphSelectors.selectSelectedNodes); \r\n    this.selectDirectLinkedFilterByNodeType$ = this.store$.select(graphSelectors.selectDirectLinkedFilterByNodeType); \r\n    this.selectMaxNodesExceeded$ = this.store$.select(graphSelectors.selectMaxNodesExceeded);\r\n    this.selectActiveLayout$ = this.store$.select(graphSelectors.selectActiveLayout);\r\n    this.scrollEventHandler = this.scroll.bind(this);\r\n    // this.store$.dispatch(new ResetGraph());\r\n\r\n    this.numHopsChangeSubscription = this.configParserService.notificationNumHops$.subscribe((num: number) => {\r\n      this.numHops = num;\r\n      this.numHopChanged.emit(this.numHops);\r\n    });\r\n    this.changeLayoutSubscription = this.notificationBrokerService.notificationLayoutChange$.subscribe(\r\n      (message: LayoutChangeMessage) => {\r\n        const zmT = zoomTransform(this.zoomableContainer.nativeElement);\r\n        this.store$.dispatch(new ChangeActiveLayout({ layoutId: message.currentLayout,\r\n                                                      prevLayoutId: message.previousLayout,\r\n                                                      prevLayoutTransform: {x: zmT.x, y: zmT.y, k: zmT.k},\r\n                                                      enableRender: message.enableRender}))\r\n      });\r\n    \r\n    this.graphEngineService.ticker.subscribe((d: any) => {\r\n      this.nodes = d.nodes; \r\n      this.links = d.links; \r\n      this.ref.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const { rootNodeId, config, data } = changes;\r\n    if(!rootNodeId && !config && !data) {\r\n      return;\r\n    }\r\n\r\n    if(!this.configParserService.nwRawConfig) {\r\n      this.configParserService.parseConfig(this.config); \r\n      this.numHops = this.configParserService.nwConfig.numHops; \r\n      this.maxNodes = this.configParserService.nwConfig.maxNodeCount;\r\n      this.configParserService.notifyUpdated();\r\n    }\r\n    this.dataBuilderService.getNetworkData(this.data);\r\n    this.store$.dispatch(new LoadExternalData({\r\n      rootNodeId: this.rootNodeId, \r\n      data: this.dataBuilderService.nwData, \r\n      nodeTypes: Array.from(this.configParserService.nwNodeTypes.keys()),\r\n      maxNodeCount: this.maxNodes,\r\n      nodeCount: this.nodeCount,\r\n      enableRender: false\r\n    }));\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.graphContainer.nativeElement.addEventListener('scroll', this.scrollEventHandler, true); \r\n    this.graphContainer.nativeElement.addEventListener('wheel', this.scrollEventHandler, true);\r\n    // this.options.width = (this.graphContainer.nativeElement as HTMLElement).offsetWidth;\r\n    this.options.width = DEFAULT_WIDGET_WIDTH;\r\n    this.selectDirectLinkedFilterByNodeTypeSubscription = this.selectDirectLinkedFilterByNodeType$.subscribe(\r\n      (graphData: INwData) => {\r\n        this.store$.pipe(take(1)).subscribe((val: any) => {\r\n          let graphState = val[STORE_GRAPH_SLICE_NAME] as GraphState;\r\n          if(graphState.rootNodeId) {\r\n            // console.log(\"logging graph data nodes\", JSON.stringify(Array.from(graphData.nodes.entries())));\r\n            // console.log(\"logging graph data edges\", JSON.stringify(Array.from(graphData.edges.entries())));\r\n            this.graphEngineService.updateGraph(graphData, graphState.nodeTypes, graphState.activeLayout, graphState.enableRender);\r\n            if(graphState.enableRender === false) {\r\n              setTimeout(() => {\r\n                if(graphState.autoNetworkExpand) {\r\n                  this.store$.dispatch(new ExpandNodesAfterLoad(true));\r\n                } else {\r\n                  this.store$.dispatch(new ExpandOnlyRootNode(true));\r\n                }\r\n              }, 1000);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    this.selectMaxNodesExceededSubscription = this.selectMaxNodesExceeded$.subscribe(\r\n        (maxNodesExceed: any) => { \r\n          if(maxNodesExceed === true) {\r\n            this.fadeinNotificationService.add();\r\n          }\r\n        });\r\n    this.selectActiveLayoutSubscription = this.selectActiveLayout$.subscribe(\r\n        (layoutId: number) => { \r\n          this.store$.pipe(take(1)).subscribe((stateVal: any) => {\r\n            const nwState = stateVal[STORE_GRAPH_SLICE_NAME]; \r\n            this.transformVal = nwState.layoutTransform[layoutId];\r\n            this.layoutId = layoutId;\r\n          });\r\n        });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.graphEngineService.ticker.unsubscribe(); \r\n    if(this.selectDirectLinkedFilterByNodeTypeSubscription) {\r\n      this.selectDirectLinkedFilterByNodeTypeSubscription.unsubscribe();\r\n    }\r\n    if(this.selectMaxNodesExceededSubscription) {\r\n      this.selectMaxNodesExceededSubscription.unsubscribe();\r\n    }\r\n    if(this.selectActiveLayoutSubscription) {\r\n      this.selectActiveLayoutSubscription.unsubscribe();\r\n    }\r\n    if(this.changeLayoutSubscription) {\r\n      this.changeLayoutSubscription.unsubscribe();\r\n    }\r\n    if(this.numHopsChangeSubscription) {\r\n      this.numHopsChangeSubscription.unsubscribe();\r\n    }\r\n    window.removeEventListener('scroll', this.scrollEventHandler, true);\r\n    window.removeEventListener('wheel', this.scrollEventHandler, true);\r\n  }\r\n\r\n  viewportClick() { \r\n    this.store$.pipe(take(1)).subscribe((stateVal: any) => {\r\n      const nwState = stateVal[STORE_GRAPH_SLICE_NAME]; \r\n      if(Array.isArray(nwState.selectedNodes) && nwState.selectedNodes.length > 0) {\r\n        this.store$.dispatch(new UnselectAllNodes());\r\n      }\r\n    });\r\n  }\r\n\r\n  scroll() {\r\n    this.isContextMenuOpen = false;\r\n    if(this.ref) {\r\n      this.ref.markForCheck();\r\n    }\r\n  }\r\n\r\n  \r\n  contextMenuClick(optionId: number, node: INode) {\r\n    switch(optionId) { \r\n      case 0:\r\n        this.store$.dispatch(new CollapseNode({\r\n          nodeId: node.nodeId, \r\n          currentVisibleNodes: this.nodes, \r\n          currentVisibleEdges: this.links\r\n        }));\r\n        break; \r\n      case 1:\r\n        // Context menu Item \r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  trackItem(index: number, item: INode) {\r\n    return item.nodeId;\r\n  }\r\n\r\n  resetNodePositions() {\r\n    this.store$.dispatch(new ResetNodesPositions(this.layoutId));\r\n  }\r\n    \r\n  selectNode(nodeId: string) {\r\n    this.store$.dispatch(new SelectNode(nodeId));\r\n  }\r\n  \r\n  selectOnlyClickedNode(nodeId: string) {\r\n    this.store$.dispatch(new SelectOnlyClickedNode(nodeId));\r\n  }\r\n  \r\n  expandNode(node: INode) { \r\n    this.store$.dispatch(new ExpandNode ({\r\n      nodeId: node.nodeId, \r\n      currentVisibleNodes: this.nodes,\r\n      currentVisibleEdges: this.links \r\n    }));\r\n  }\r\n  \r\n  onOpenContextMenu(event: MouseEvent, currentNode: INode, nodeIdx: number) {\r\n    this.isContextMenuOpen = true; \r\n    this.latestFocusedNode = currentNode; \r\n    this.latestFocusedNodeRef = this.nodeRefs!.toArray()[nodeIdx];\r\n  }\r\n  \r\n  toggleLabel() {\r\n    this.store$.dispatch (new ToggleLabel());\r\n  }\r\n  \r\n  OnChangeNumHops() {\r\n    this.nodes = []; \r\n    this.links = []; \r\n    this.ref.markForCheck();\r\n    this.store$.dispatch(new ResetGraph()); \r\n    // this.numHopChanged.emit(this.numHops);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".graph-section-container { \r\n    /* margin: auto; */ \r\n    position: relative; \r\n    width: 100%; \r\n    box-sizing: border-box; \r\n    overflow: hidden;\r\n    /* background-color: #E1F2F7; */\r\n    display: grid; \r\n    grid-template-columns: auto auto auto; \r\n    grid-template-rows: auto auto auto; \r\n    border: solid 1px #555; \r\n    box-shadow:0 0 10px rgba(0, 0, 0, 0.6); \r\n    box-sizing: content-box;\r\n    overflow: hidden;\r\n}\r\n.graph-svg-section { \r\n    position: relative; \r\n    width: 100%; \r\n    box-sizing: border-box; \r\n    overflow: hidden;\r\n    grid-column: 1/4;\r\n    grid-row: 1 / 4;\r\n}\r\n.graph-sidebar-section {\r\n    z-index: 2;\r\n    grid-column: 1 / 2; \r\n    grid-row: 1 / 4;\r\n}\r\n\r\n.graph-loader-section {\r\n    grid-column: 1 / 4; \r\n    grid-row: 1 / 4; \r\n    background-color: rgba(255,255,255,0.7); \r\n    z-index: 1000; \r\n    display: flex; \r\n    align-content: center; \r\n    align-items: center; \r\n    justify-content: center;\r\n}\r\n.graph-tools-item { \r\n    margin-right: 20px;\r\n}\r\n\r\n.graph-tools-section {\r\n    grid-column: 3 / 4; \r\n    grid-row: 1 / 4; \r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: flex-end;\r\n}\r\n\r\n.graph-hz-tools-section { \r\n    grid-column: 1 / 4; \r\n    grid-row: 1 / 2; \r\n    display: flex; \r\n    flex-direction: row-reverse; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: center; \r\n    padding-right: 40px; \r\n    font-size: 14px;\r\n} \r\n\r\n.graph-tools-item-redraw { \r\n    order: 4; \r\n    flex: 0 1 auto; \r\n    align-self: auto; \r\n    display: flex; \r\n    justify-content: center; \r\n    margin: 3px;\r\n}\r\n.graph-legend {\r\n    grid-column: 3 / 4; \r\n    grid-row: 3 / 4; \r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: flex-start; \r\n    margin: 3px 3px 0;\r\n}\r\n/* context menu begin */ \r\n.menu {\r\n    position: absolute; \r\n    width: 70px; \r\n    padding: 2px; \r\n    margin: 0; \r\n    border: 1px solid #bbb; \r\n    background: #eee; \r\n    background: linear-gradient(to bottom, #fff 0%, #e5e5e5 100px, #e5e5e5 100%); \r\n    z-index: 100; \r\n    border-radius: 1px; \r\n    box-shadow: 1px 1px 4px rgba(0,0,0,.2); \r\n    transform: translate(0, 15px) scale (.95); \r\n    transition: transform 0.1s ease-out, opacity 0.1s ease-out; \r\n    opacity: 1; \r\n    transform: translate (0, 0) scale (1); \r\n    transition-delay: 300ms;\r\n}\r\n\r\n.menu-item {\r\n    display: block;\r\n    position: relative;\r\n    margin: 0;\r\n    padding: 0;\r\n    white-space: nowrap;\r\n}\r\n\r\n.menu-btn {\r\n    display: block; \r\n    color: #444; \r\n    font-family: 'Roboto', sans-serif; \r\n    font-size: 13px; \r\n    cursor: pointer; \r\n    border: 1px solid transparent; \r\n    white-space: nowrap; \r\n    padding: 6px 8px; \r\n    border-radius: 3px;\r\n}\r\n.menu-btn:focus {\r\n    outline: Opx solid transparent;\r\n}\r\nbutton.menu-btn {\r\n    background: none; \r\n    line-height: normal; \r\n    overflow: visible; \r\n    width: 100%; \r\n    text-align: left;\r\n}\r\n.menu-text { \r\n    margin-left: 0;\r\n}\r\n\r\n.menu-item:hover > .menu-btn {\r\n    color: #fff; \r\n    outline: none; \r\n    background-color: #2E3940; \r\n    background: linear-gradient(to bottom, #5D6D79, #2E3940);\r\n    border: 1px solid #2E3940;\r\n}\r\n\r\n.menu-item-disabled {\r\n    opacity: .5; \r\n    pointer-events: none;\r\n}\r\n\r\n.menu-item-disabled .menu-btn {\r\n    cursor: default;\r\n}\r\n    \r\n/* context menu end */",
                    "styleUrl": "graph.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataBuilderService",
                        "type": "DataBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphEngineService",
                        "type": "GraphEngineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fadeinNotificationService",
                        "type": "FadeinNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 79,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataBuilderService",
                        "type": "DataBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphEngineService",
                        "type": "GraphEngineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fadeinNotificationService",
                        "type": "FadeinNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<div class='graph-section-container' #graphcontainer [style.height.px]='options.height'>\r\n    <div class='graph-svg-section' [style.height.px]='options.height'>\r\n        <svg #svg [attr.width]='options.width - SVG_MARGIN' [attr.height]='options.height - SVG_MARGIN' (click)='viewportClick()'> \r\n            <defs> \r\n                <marker id='arrowhead' viewBox='0 0 10 10' refX='7' refY='5' markerUnits='strokeWidth' \r\n                        markerWidth='8' markerHeight='6' orient='auto'>\r\n                    <path d='M 0 0 L 10 5 L 0 10 z' stroke='none' fill='#595959' /> \r\n                </marker> \r\n                <filter x='0' y='0' width='1' height='1' id='bg-text'>\r\n                    <feFlood flood-color='white' flood-opacity='1' />\r\n                    <feComposite in='SourceGraphic' operator='xor' /> \r\n                </filter> \r\n            </defs> \r\n            <g [zoomableOf]='svg' id='nw-root' [layoutId]=\"layoutId\" [transformVal]=\"transformVal\" #zoomablecontainer>\r\n                <g [link]=\"link\" [layoutId]=\"layoutId\" [rootNodeId]=\"rootNodeId\" [hideLabel]=\"hideLabel$ | async\" *ngFor=\"let link of links\"></g> \r\n                <g [node]=\"node\"\r\n                    [nodes]=\"nodes\" \r\n                    [layoutId]=\"layoutId\"\r\n                    [graph]=\"graphEngineService\" \r\n                    *ngFor=\"let node of nodes; let indexOfNode=index; trackBy: trackItem\" \r\n                    [rootNodeId]=\"rootNodeId\" \r\n                    [selectedNodes]=\"selectedNodes$ | async\" \r\n                    [hideLabel]=\"hideLabel$ | async\" \r\n                    (expandNode)=\"expandNode($event)\" \r\n                    (focus)=\"latestFocusedNode=node\" \r\n                    (contextmenu)=\"onOpenContextMenu($event, node, indexOfNode); $event.preventDefault();\"\r\n                    (selectNode)=\"selectNode($event)\" \r\n                    (selectOnlyClickedNode)=\"selectOnlyClickedNode($event)\" \r\n                    style=\"outline: none\"\r\n                    cdkOverlayOrigin #noderef=\"cdkOverlayOrigin\">\r\n                </g>\r\n                <g [node-label]=\"node\" style=\"outline: none\" [layoutId]=\"layoutId\" [rootNodeId]=\"rootNodeId\" [hideLabel]=\"hideLabel$ | async\" *ngFor=\"let node of nodes;\"> \r\n                </g> \r\n            </g> \r\n        </svg> \r\n    </div>\r\n    <div class=\"graph-sidebar-section\" [style.height.px]=\"options.height\">\r\n        <nw-sidebar [nodes]=\"nodes\"></nw-sidebar>\r\n    </div>\r\n    <!-- <div class=\"graph-legend\">\r\n        <node-legend></node-legend>\r\n    </div> -->\r\n    <div class=\"graph-hz-tools-section\">\r\n        <div style=\"margin-left: 2px; margin-right: 20px;\">\r\n            Enable Labels\r\n        </div>\r\n        <div>\r\n            <mat-slide-toggle style=\"cursor: pointer\" (change)=\"toggleLabel()\" [checked]=\"(hideLabel$ | async) || true\">\r\n            </mat-slide-toggle>\r\n        </div>\r\n        <div class=\"graph-tools-item\">\r\n            <network-fadein-notify [notifications]=\"fadeinNotificationService.notifications\"></network-fadein-notify>\r\n        </div>\r\n    </div> \r\n    <div class=\"graph-tools-section\"> \r\n        <div class=\"graph-tools-item-redraw\"> \r\n            <button mat-mini-fab color=\"primary\" aria-label=\"Refresh\" style=\"display: flex; align-items: center; justify-content: center; height:28px;width:28px\" (click)=\"resetNodePositions()\">\r\n                <mat-icon matTooltip=\"Reposition\" matTooltipPosition=\"left\" style=\"font-size: 20px; vertical-align: middle; margin-top: 3px;\">\r\n                    replay\r\n                </mat-icon> \r\n            </button> \r\n        </div> \r\n    </div> \r\n    <div class=\"graph-loader-section\" *ngIf=\"dataLoading\">\r\n        <mat-spinner></mat-spinner> \r\n    </div> \r\n    <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"latestFocusedNodeRef\"\r\n            [cdkConnectedOverlayOpen]=\"isContextMenuOpen\" \r\n            [cdkConnectedOverlayOffsetX]=\"0\" \r\n            [cdkConnectedOverlayOffsetY]=\"0\"> \r\n            <ul class=\"menu\" [cdkTrapFocus]=\"isContextMenuOpen\" [cdkTrapFocusAutoCapture]=\"isContextMenuOpen\" (focusout)=\"isContextMenuOpen=false\" (mousewheel)=\"isContextMenuOpen=false\"> \r\n                <li *ngFor=\"let option of contextMenuOptions\" class=\"menu-item\"> \r\n                    <button type=\"button\" class=\"menu-btn\" (click)=\"contextMenuClick(option.id, latestFocusedNode!); isContextMenuOpen = false;\">\r\n                        <span class=\"menu-text\">{{option.label}}</span> \r\n                    </button> \r\n                </li> \r\n            </ul> \r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "GraphComponent",
            "id": "component-GraphComponent-5d002499d5b26def12ec7cd08f93ae37-1",
            "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "network-graph",
            "styleUrls": [
                "graph.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "graph.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "{}"
                },
                {
                    "name": "data",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "{}"
                },
                {
                    "name": "dataLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean"
                },
                {
                    "name": "nodeCount",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "number"
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "EMPTY_STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "numHopChanged",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "autoNetworkExpand$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "autoNetworkExplore$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "changeLayoutSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "containerHeight",
                    "defaultValue": "window.innerHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "contextMenuOptions",
                    "defaultValue": "[\r\n    { id: 0, label: 'Collapse'}, // {id: 1, label: 'Open in new tab'} \r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "fadeinNotificationService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FadeinNotificationService",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "graphContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'graphcontainer'"
                        }
                    ]
                },
                {
                    "name": "graphEngineService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphEngineService",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "hideLabel$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "isContextMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "latestFocusedNode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode | undefined",
                    "optional": false,
                    "description": "",
                    "line": 74
                },
                {
                    "name": "latestFocusedNodeRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CdkOverlayOrigin | undefined",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "layoutId",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEdge[]",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "maxNodes",
                    "defaultValue": "DEFAULT_MAX_NODES",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "nodeRefs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<CdkOverlayOrigin> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'noderef'"
                        }
                    ]
                },
                {
                    "name": "nodes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "INode[]",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "notificationBrokerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationBrokerService",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "numHops",
                    "defaultValue": "DEFAULT_NUM_HOPS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "numHopsChangeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "options",
                    "defaultValue": "{ width: DEFAULT_WIDGET_WIDTH, height: DEFAULT_WIDGET_HEIGHT }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "overlay",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Overlay",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "rootEntityDataLoading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "scrollEventHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "selectActiveLayout$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "selectActiveLayoutSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "selectDirectLinkedFilterByNodeType$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "selectDirectLinkedFilterByNodeTypeSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "selectedNodes$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INode[]> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "selectMaxNodesExceeded$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "selectMaxNodesExceededSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "SVG_MARGIN",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "transformVal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TransformInfo | undefined",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "viewContainerRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ViewContainerRef",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "zoomableContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'zoomablecontainer'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "contextMenuClick",
                    "args": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "optionId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "expandNode",
                    "args": [
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 253,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 182,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "OnChangeNumHops",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onOpenContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currentNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodeIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 261,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentNode",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodeIdx",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetNodePositions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "selectNode",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 245,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectOnlyClickedNode",
                    "args": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nodeId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "trackItem",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "INode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewportClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { EMPTY_STRING } from '../../utils';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, QueryList, SimpleChanges, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../store/state'; \r\nimport { take } from 'rxjs/operators'; \r\nimport { ExpandNode, CollapseNode, ResetGraph, ToggleLabel, SelectNode,\r\n  UnselectAllNodes, SelectOnlyClickedNode, ResetNodesPositions, LoadExternalData, ExpandOnlyRootNode, ChangeActiveLayout } from '../../store/actions';\r\nimport { DataBuilderService } from '../../services/data-builder.service';\r\nimport { ConfigParserService } from '../../services/config-parser.service';\r\nimport { IEdge, INode, INwData } from '../../models/nw-data';\r\nimport { Subscription } from 'rxjs';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { GraphEngineService } from '../../services/graph-engine.service';\r\nimport * as graphSelectors from '../../store/selectors'; \r\nimport { Overlay } from '@angular/cdk/overlay';\r\nimport { FadeinNotificationService } from '../../services/fadein-notification.service';\r\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\r\nimport { LayoutChangeMessage, NotificationBrokerService } from '../../services/notification-broker.service';\r\nimport { zoomTransform} from 'd3-zoom';\r\nimport { TransformInfo } from '../../models/load-nodes-payload';\r\n\r\nconst DEFAULT_MAX_NODES = 150;\r\nconst DEFAULT_NUM_HOPS = 2;\r\nconst DEFAULT_WIDGET_HEIGHT = 720;\r\nconst DEFAULT_WIDGET_WIDTH = 2000;\r\n\r\n@Component({\r\n  selector: 'network-graph', \r\n  changeDetection: ChangeDetectionStrategy.OnPush, \r\n  templateUrl: 'graph.component.html', \r\n  styleUrls: ['graph.component.css']\r\n})\r\nexport class GraphComponent implements OnInit, OnChanges {\r\n  @Input('rootNodeId') rootNodeId = EMPTY_STRING;\r\n  @Input('dataLoading') dataLoading = false;\r\n  @Input('config') config = {};\r\n  @Input('data') data = {};\r\n  @Input('nodeCount') nodeCount = 0;\r\n  @Output('numHopChanged') numHopChanged = new EventEmitter();\r\n  nodes: INode[] = []; \r\n  links: IEdge[] = [];\r\n  numHops = DEFAULT_NUM_HOPS; \r\n  maxNodes = DEFAULT_MAX_NODES;\r\n  containerHeight = window.innerHeight;\r\n  options = { width: DEFAULT_WIDGET_WIDTH, height: DEFAULT_WIDGET_HEIGHT };\r\n  SVG_MARGIN = 20;\r\n  @ViewChild('graphcontainer') graphContainer: ElementRef;\r\n  @ViewChild('zoomablecontainer') zoomableContainer: ElementRef;\r\n\r\n  /* Observables - Begin */\r\n  hideLabel$: Observable<boolean> | undefined;\r\n  autoNetworkExplore$: Observable<boolean> | undefined;\r\n  autoNetworkExpand$: Observable<boolean> | undefined;\r\n  rootEntityDataLoading$: Observable<boolean> | undefined;\r\n  transformVal: TransformInfo | undefined;\r\n  layoutId = 0;\r\n  // layoutId$: Observable<number | undefined> | undefined;\r\n  selectedNodes$: Observable<INode[]> | undefined;\r\n  selectDirectLinkedFilterByNodeType$: any;\r\n  selectDirectLinkedFilterByNodeTypeSubscription: Subscription | undefined;\r\n  selectMaxNodesExceeded$: any;\r\n  selectMaxNodesExceededSubscription: Subscription | undefined;\r\n  selectActiveLayout$: any;\r\n  selectActiveLayoutSubscription: Subscription | undefined;\r\n  changeLayoutSubscription: Subscription | undefined;\r\n  numHopsChangeSubscription: Subscription | undefined;\r\n  /* Observables - End */\r\n\r\n  scrollEventHandler: any;\r\n\r\n  /* context menu properties - Begin */\r\n  isContextMenuOpen = false; \r\n  latestFocusedNodeRef: CdkOverlayOrigin | undefined; \r\n  latestFocusedNode: INode | undefined;\r\n  @ViewChildren(\"noderef\") nodeRefs: QueryList<CdkOverlayOrigin> | undefined;\r\n  contextMenuOptions = [\r\n    { id: 0, label: 'Collapse'}, // {id: 1, label: 'Open in new tab'} \r\n  ];\r\n  /* context menu properties - End */\r\n\r\n  constructor(private ref: ChangeDetectorRef, \r\n              private store$: Store<GraphState>, \r\n              private dataBuilderService: DataBuilderService, \r\n              private configParserService: ConfigParserService,\r\n              public graphEngineService: GraphEngineService,\r\n              public overlay: Overlay, \r\n              public viewContainerRef: ViewContainerRef, \r\n              public fadeinNotificationService: FadeinNotificationService,\r\n              public notificationBrokerService: NotificationBrokerService) { }\r\n\r\n  ngOnInit() {\r\n    this.hideLabel$ = this.store$.select(graphSelectors.selectIsHideLabel);\r\n    this.autoNetworkExpand$ = this.store$.select(graphSelectors.selectAutoNetworkExpand); \r\n    // this.layoutId$ = this.store$.select(graphSelectors.selectActiveLayout); \r\n    this.selectedNodes$ = this.store$.select(graphSelectors.selectSelectedNodes); \r\n    this.selectDirectLinkedFilterByNodeType$ = this.store$.select(graphSelectors.selectDirectLinkedFilterByNodeType); \r\n    this.selectMaxNodesExceeded$ = this.store$.select(graphSelectors.selectMaxNodesExceeded);\r\n    this.selectActiveLayout$ = this.store$.select(graphSelectors.selectActiveLayout);\r\n    this.scrollEventHandler = this.scroll.bind(this);\r\n    // this.store$.dispatch(new ResetGraph());\r\n\r\n    this.numHopsChangeSubscription = this.configParserService.notificationNumHops$.subscribe((num: number) => {\r\n      this.numHops = num;\r\n      this.numHopChanged.emit(this.numHops);\r\n    });\r\n    this.changeLayoutSubscription = this.notificationBrokerService.notificationLayoutChange$.subscribe(\r\n      (message: LayoutChangeMessage) => {\r\n        const zmT = zoomTransform(this.zoomableContainer.nativeElement);\r\n        this.store$.dispatch(new ChangeActiveLayout({ layoutId: message.currentLayout,\r\n                                                      prevLayoutId: message.previousLayout,\r\n                                                      prevLayoutTransform: {x: zmT.x, y: zmT.y, k: zmT.k},\r\n                                                      enableRender: message.enableRender}))\r\n      });\r\n    \r\n    this.graphEngineService.ticker.subscribe((d: any) => {\r\n      this.nodes = d.nodes; \r\n      this.links = d.links; \r\n      this.ref.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const { rootNodeId, config, data } = changes;\r\n    if(!rootNodeId && !config && !data) {\r\n      return;\r\n    }\r\n\r\n    if(!this.configParserService.nwRawConfig) {\r\n      this.configParserService.parseConfig(this.config); \r\n      this.numHops = this.configParserService.nwConfig.numHops; \r\n      this.maxNodes = this.configParserService.nwConfig.maxNodeCount;\r\n      this.configParserService.notifyUpdated();\r\n    }\r\n    this.dataBuilderService.getNetworkData(this.data);\r\n    this.store$.dispatch(new LoadExternalData({\r\n      rootNodeId: this.rootNodeId, \r\n      data: this.dataBuilderService.nwData, \r\n      nodeTypes: Array.from(this.configParserService.nwNodeTypes.keys()),\r\n      maxNodeCount: this.maxNodes,\r\n      nodeCount: this.nodeCount,\r\n      enableRender: false\r\n    }));\r\n  }\r\n\r\n  ngAfterViewInit() { \r\n    this.graphContainer.nativeElement.addEventListener('scroll', this.scrollEventHandler, true); \r\n    this.graphContainer.nativeElement.addEventListener('wheel', this.scrollEventHandler, true);\r\n    // this.options.width = (this.graphContainer.nativeElement as HTMLElement).offsetWidth;\r\n    this.options.width = DEFAULT_WIDGET_WIDTH;\r\n    this.selectDirectLinkedFilterByNodeTypeSubscription = this.selectDirectLinkedFilterByNodeType$.subscribe(\r\n      (graphData: INwData) => {\r\n        this.store$.pipe(take(1)).subscribe((val: any) => {\r\n          let graphState = val[STORE_GRAPH_SLICE_NAME];\r\n          if(graphState.rootNodeId) {\r\n            // console.log(\"logging graph data nodes\", JSON.stringify(Array.from(graphData.nodes.entries())));\r\n            // console.log(\"logging graph data edges\", JSON.stringify(Array.from(graphData.edges.entries())));\r\n            this.graphEngineService.updateGraph(graphData, graphState.nodeTypes, graphState.activeLayout, graphState.enableRender);\r\n            if(graphState.enableRender === false) {\r\n              setTimeout(() => {\r\n                this.store$.dispatch(new ExpandOnlyRootNode(true));\r\n              }, 1000);\r\n            }\r\n          }\r\n        });\r\n      });\r\n    this.selectMaxNodesExceededSubscription = this.selectMaxNodesExceeded$.subscribe(\r\n        (maxNodesExceed: any) => { \r\n          if(maxNodesExceed === true) {\r\n            this.fadeinNotificationService.add();\r\n          }\r\n        });\r\n    this.selectActiveLayoutSubscription = this.selectActiveLayout$.subscribe(\r\n        (layoutId: number) => { \r\n          this.store$.pipe(take(1)).subscribe((stateVal: any) => {\r\n            const nwState = stateVal[STORE_GRAPH_SLICE_NAME]; \r\n            this.transformVal = nwState.layoutTransform[layoutId];\r\n            this.layoutId = layoutId;\r\n          });\r\n        });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.graphEngineService.ticker.unsubscribe(); \r\n    if(this.selectDirectLinkedFilterByNodeTypeSubscription) {\r\n      this.selectDirectLinkedFilterByNodeTypeSubscription.unsubscribe();\r\n    }\r\n    if(this.selectMaxNodesExceededSubscription) {\r\n      this.selectMaxNodesExceededSubscription.unsubscribe();\r\n    }\r\n    if(this.selectActiveLayoutSubscription) {\r\n      this.selectActiveLayoutSubscription.unsubscribe();\r\n    }\r\n    if(this.changeLayoutSubscription) {\r\n      this.changeLayoutSubscription.unsubscribe();\r\n    }\r\n    if(this.numHopsChangeSubscription) {\r\n      this.numHopsChangeSubscription.unsubscribe();\r\n    }\r\n    window.removeEventListener('scroll', this.scrollEventHandler, true);\r\n    window.removeEventListener('wheel', this.scrollEventHandler, true);\r\n  }\r\n\r\n  viewportClick() { \r\n    this.store$.pipe(take(1)).subscribe((stateVal: any) => {\r\n      const nwState = stateVal[STORE_GRAPH_SLICE_NAME]; \r\n      if(Array.isArray(nwState.selectedNodes) && nwState.selectedNodes.length > 0) {\r\n        this.store$.dispatch(new UnselectAllNodes());\r\n      }\r\n    });\r\n  }\r\n\r\n  scroll() {\r\n    this.isContextMenuOpen = false;\r\n    if(this.ref) {\r\n      this.ref.markForCheck();\r\n    }\r\n  }\r\n\r\n  \r\n  contextMenuClick(optionId: number, node: INode) {\r\n    switch(optionId) { \r\n      case 0:\r\n        this.store$.dispatch(new CollapseNode({\r\n          nodeId: node.nodeId, \r\n          currentVisibleNodes: this.nodes, \r\n          currentVisibleEdges: this.links\r\n        }));\r\n        break; \r\n      case 1:\r\n        // Context menu Item \r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  trackItem(index: number, item: INode) {\r\n    return item.nodeId;\r\n  }\r\n\r\n  resetNodePositions() {\r\n    this.store$.dispatch(new ResetNodesPositions());\r\n  }\r\n    \r\n  selectNode(nodeId: string) {\r\n    this.store$.dispatch(new SelectNode(nodeId));\r\n  }\r\n  \r\n  selectOnlyClickedNode(nodeId: string) {\r\n    this.store$.dispatch(new SelectOnlyClickedNode(nodeId));\r\n  }\r\n  \r\n  expandNode(node: INode) { \r\n    this.store$.dispatch(new ExpandNode ({\r\n      nodeId: node.nodeId, \r\n      currentVisibleNodes: this.nodes,\r\n      currentVisibleEdges: this.links \r\n    }));\r\n  }\r\n  \r\n  onOpenContextMenu(event: MouseEvent, currentNode: INode, nodeIdx: number) {\r\n    this.isContextMenuOpen = true; \r\n    this.latestFocusedNode = currentNode; \r\n    this.latestFocusedNodeRef = this.nodeRefs!.toArray()[nodeIdx];\r\n  }\r\n  \r\n  toggleLabel() {\r\n    this.store$.dispatch (new ToggleLabel());\r\n  }\r\n  \r\n  OnChangeNumHops() {\r\n    this.nodes = []; \r\n    this.links = []; \r\n    this.ref.markForCheck();\r\n    this.store$.dispatch(new ResetGraph()); \r\n    // this.numHopChanged.emit(this.numHops);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".graph-section-container { \r\n    /* margin: auto; */ \r\n    position: relative; \r\n    width: 100%; \r\n    box-sizing: border-box; \r\n    overflow: hidden;\r\n    /* background-color: #E1F2F7; */\r\n    display: grid; \r\n    grid-template-columns: auto auto auto; \r\n    grid-template-rows: auto auto auto; \r\n    border: solid 1px #555; \r\n    box-shadow:0 0 10px rgba(0, 0, 0, 0.6); \r\n    box-sizing: content-box;\r\n    overflow: hidden;\r\n}\r\n.graph-svg-section { \r\n    position: relative; \r\n    width: 100%; \r\n    box-sizing: border-box; \r\n    overflow: hidden;\r\n    grid-column: 1/4;\r\n    grid-row: 1 / 4;\r\n}\r\n.graph-sidebar-section {\r\n    z-index: 2;\r\n    grid-column: 1 / 2; \r\n    grid-row: 1 / 4;\r\n}\r\n\r\n.graph-loader-section {\r\n    grid-column: 1 / 4; \r\n    grid-row: 1 / 4; \r\n    background-color: rgba(255,255,255,0.7); \r\n    z-index: 1000; \r\n    display: flex; \r\n    align-content: center; \r\n    align-items: center; \r\n    justify-content: center;\r\n}\r\n.graph-tools-item { \r\n    margin-right: 20px;\r\n}\r\n\r\n.graph-tools-section {\r\n    grid-column: 3 / 4; \r\n    grid-row: 1 / 4; \r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: flex-end;\r\n}\r\n\r\n.graph-hz-tools-section { \r\n    grid-column: 1 / 4; \r\n    grid-row: 1 / 2; \r\n    display: flex; \r\n    flex-direction: row-reverse; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: center; \r\n    padding-right: 40px; \r\n    font-size: 14px;\r\n} \r\n\r\n.graph-tools-item-redraw { \r\n    order: 4; \r\n    flex: 0 1 auto; \r\n    align-self: auto; \r\n    display: flex; \r\n    justify-content: center; \r\n    margin: 3px;\r\n}\r\n.graph-legend {\r\n    grid-column: 3 / 4; \r\n    grid-row: 3 / 4; \r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: space-around; \r\n    align-items: flex-start; \r\n    margin: 3px 3px 0;\r\n}\r\n/* context menu begin */ \r\n.menu {\r\n    position: absolute; \r\n    width: 70px; \r\n    padding: 2px; \r\n    margin: 0; \r\n    border: 1px solid #bbb; \r\n    background: #eee; \r\n    background: linear-gradient(to bottom, #fff 0%, #e5e5e5 100px, #e5e5e5 100%); \r\n    z-index: 100; \r\n    border-radius: 1px; \r\n    box-shadow: 1px 1px 4px rgba(0,0,0,.2); \r\n    transform: translate(0, 15px) scale (.95); \r\n    transition: transform 0.1s ease-out, opacity 0.1s ease-out; \r\n    opacity: 1; \r\n    transform: translate (0, 0) scale (1); \r\n    transition-delay: 300ms;\r\n}\r\n\r\n.menu-item {\r\n    display: block;\r\n    position: relative;\r\n    margin: 0;\r\n    padding: 0;\r\n    white-space: nowrap;\r\n}\r\n\r\n.menu-btn {\r\n    display: block; \r\n    color: #444; \r\n    font-family: 'Roboto', sans-serif; \r\n    font-size: 13px; \r\n    cursor: pointer; \r\n    border: 1px solid transparent; \r\n    white-space: nowrap; \r\n    padding: 6px 8px; \r\n    border-radius: 3px;\r\n}\r\n.menu-btn:focus {\r\n    outline: Opx solid transparent;\r\n}\r\nbutton.menu-btn {\r\n    background: none; \r\n    line-height: normal; \r\n    overflow: visible; \r\n    width: 100%; \r\n    text-align: left;\r\n}\r\n.menu-text { \r\n    margin-left: 0;\r\n}\r\n\r\n.menu-item:hover > .menu-btn {\r\n    color: #fff; \r\n    outline: none; \r\n    background-color: #2E3940; \r\n    background: linear-gradient(to bottom, #5D6D79, #2E3940);\r\n    border: 1px solid #2E3940;\r\n}\r\n\r\n.menu-item-disabled {\r\n    opacity: .5; \r\n    pointer-events: none;\r\n}\r\n\r\n.menu-item-disabled .menu-btn {\r\n    cursor: default;\r\n}\r\n    \r\n/* context menu end */",
                    "styleUrl": "graph.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dataBuilderService",
                        "type": "DataBuilderService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphEngineService",
                        "type": "GraphEngineService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fadeinNotificationService",
                        "type": "FadeinNotificationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 78,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dataBuilderService",
                        "type": "DataBuilderService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphEngineService",
                        "type": "GraphEngineService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "overlay",
                        "type": "Overlay",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fadeinNotificationService",
                        "type": "FadeinNotificationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "GraphComponent-1",
            "templateData": "<div class='graph-section-container' #graphcontainer [style.height.px]='options.height'>\r\n    <div class='graph-svg-section' [style.height.px]='options.height'>\r\n        <svg #svg [attr.width]='options.width - SVG_MARGIN' [attr.height]='options.height - SVG_MARGIN' (click)='viewportClick()'> \r\n            <defs> \r\n                <marker id='arrowhead' viewBox='0 0 10 10' refX='7' refY='5' markerUnits='strokeWidth' \r\n                        markerWidth='8' markerHeight='6' orient='auto'>\r\n                    <path d='M 0 0 L 10 5 L 0 10 z' stroke='none' fill='#595959' /> \r\n                </marker> \r\n                <filter x='0' y='0' width='1' height='1' id='bg-text'>\r\n                    <feFlood flood-color='white' flood-opacity='1' />\r\n                    <feComposite in='SourceGraphic' operator='xor' /> \r\n                </filter> \r\n            </defs> \r\n            <g [zoomableOf]='svg' id='nw-root' [layoutId]=\"layoutId\" [transformVal]=\"transformVal\" #zoomablecontainer>\r\n                <g [link]=\"link\" [layoutId]=\"layoutId\" [rootNodeId]=\"rootNodeId\" [hideLabel]=\"hideLabel$ | async\" *ngFor=\"let link of links\"></g> \r\n                <g [node]=\"node\"\r\n                    [nodes]=\"nodes\" \r\n                    [layoutId]=\"layoutId\"\r\n                    [graph]=\"graphEngineService\" \r\n                    *ngFor=\"let node of nodes; let indexOfNode=index; trackBy: trackItem\" \r\n                    [rootNodeId]=\"rootNodeId\" \r\n                    [selectedNodes]=\"selectedNodes$ | async\" \r\n                    [hideLabel]=\"hideLabel$ | async\" \r\n                    (expandNode)=\"expandNode($event)\" \r\n                    (focus)=\"latestFocusedNode=node\" \r\n                    (contextmenu)=\"onOpenContextMenu($event, node, indexOfNode); $event.preventDefault();\"\r\n                    (selectNode)=\"selectNode($event)\" \r\n                    (selectOnlyClickedNode)=\"selectOnlyClickedNode($event)\" \r\n                    style=\"outline: none\"\r\n                    cdkOverlayOrigin #noderef=\"cdkOverlayOrigin\">\r\n                </g>\r\n                <g [node-label]=\"node\" style=\"outline: none\" [layoutId]=\"layoutId\" [rootNodeId]=\"rootNodeId\" [hideLabel]=\"hideLabel$ | async\" *ngFor=\"let node of nodes;\"> \r\n                </g> \r\n            </g> \r\n        </svg> \r\n    </div>\r\n    <div class=\"graph-sidebar-section\" [style.height.px]=\"options.height\">\r\n        <nw-sidebar [nodes]=\"nodes\"></nw-sidebar>\r\n    </div>\r\n    <!-- <div class=\"graph-legend\">\r\n        <node-legend></node-legend>\r\n    </div> -->\r\n    <div class=\"graph-hz-tools-section\">\r\n        <div style=\"margin-left: 2px; margin-right: 20px;\">\r\n            Enable Labels\r\n        </div>\r\n        <div>\r\n            <mat-slide-toggle style=\"cursor: pointer\" (change)=\"toggleLabel()\" [checked]=\"(hideLabel$ | async) || true\">\r\n            </mat-slide-toggle>\r\n        </div>\r\n        <div class=\"graph-tools-item\">\r\n            <network-fadein-notify [notifications]=\"fadeinNotificationService.notifications\"></network-fadein-notify>\r\n        </div>\r\n    </div> \r\n    <div class=\"graph-tools-section\"> \r\n        <div class=\"graph-tools-item-redraw\"> \r\n            <button mat-mini-fab color=\"primary\" aria-label=\"Refresh\" style=\"display: flex; align-items: center; justify-content: center; height:28px;width:28px\" (click)=\"resetNodePositions()\">\r\n                <mat-icon matTooltip=\"Reposition\" matTooltipPosition=\"left\" style=\"font-size: 20px; vertical-align: middle; margin-top: 3px;\">\r\n                    replay\r\n                </mat-icon> \r\n            </button> \r\n        </div> \r\n    </div> \r\n    <div class=\"graph-loader-section\" *ngIf=\"dataLoading\">\r\n        <mat-spinner></mat-spinner> \r\n    </div> \r\n    <ng-template cdkConnectedOverlay [cdkConnectedOverlayOrigin]=\"latestFocusedNodeRef\"\r\n            [cdkConnectedOverlayOpen]=\"isContextMenuOpen\" \r\n            [cdkConnectedOverlayOffsetX]=\"0\" \r\n            [cdkConnectedOverlayOffsetY]=\"0\"> \r\n            <ul class=\"menu\" [cdkTrapFocus]=\"isContextMenuOpen\" [cdkTrapFocusAutoCapture]=\"isContextMenuOpen\" (focusout)=\"isContextMenuOpen=false\" (mousewheel)=\"isContextMenuOpen=false\"> \r\n                <li *ngFor=\"let option of contextMenuOptions\" class=\"menu-item\"> \r\n                    <button type=\"button\" class=\"menu-btn\" (click)=\"contextMenuClick(option.id, latestFocusedNode!); isContextMenuOpen = false;\">\r\n                        <span class=\"menu-text\">{{option.label}}</span> \r\n                    </button> \r\n                </li> \r\n            </ul> \r\n    </ng-template>\r\n</div>"
        },
        {
            "name": "LegendComponent",
            "id": "component-LegendComponent-4bf6966a2fe108d4a6c0545b330efcd0",
            "file": "libs/nw-graph-angular/src/lib/components/legend/legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "node-legend",
            "styleUrls": [
                "./legend.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'node-legend',\r\n    templateUrl: './legend.component.html',\r\n    styleUrls: ['./legend.component.css']\r\n})\r\nexport class LegendComponent {\r\n    \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-avatar {\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n\r\n.nt-item:nth-child(2) {\r\n    margin-left: 5px;\r\n    order: 1;\r\n    align-self: flex-end;\r\n    padding-left: 5px;\r\n}\r\n\r\n.nt-item-loading-img {\r\n    display: flex;\r\n    align-self: flex-end;\r\n    width: 40px;\r\n    height: 50px;\r\n}\r\n\r\n.nt-item-loading-lbl {\r\n    margin-left: 5px;\r\n    order: 1;\r\n    align-self: flex-end;\r\n    padding-bottom: 6px;\r\n}",
                    "styleUrl": "./legend.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"legend-section\">\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <mat-list dense>\r\n                <mat-list-item> \r\n                    <div class=\"nt-container\"> \r\n                        <div class=\"nt-item-loading-img\"> \r\n                            <svg height=\"45\" width=\"45\">\r\n                                <circle cx=\"18\" cy=\"25\" r=\"15\" stroke=\"black\" stroke-width=\"5\" fill=\"white\" stroke='#ff4d4d' stroke-dasharray=\"2\"/> \r\n                            </svg> \r\n                        </div> \r\n                        <div class=\"nt-item-loading-lb1\" style=\"margin-bottom: 10px;\">\r\n                            <b>Searching Network</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item>\r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: blue;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>Network Found</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item> \r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: black;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>No Connections Found</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item> \r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: #eb0000;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>Error Finding Connections</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item>\r\n            </mat-list>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>"
        },
        {
            "name": "LegendComponent",
            "id": "component-LegendComponent-4bf6966a2fe108d4a6c0545b330efcd0-1",
            "file": "libs/nw-graph-angular5/src/app/components/legend/legend.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "node-legend",
            "styleUrls": [
                "./legend.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./legend.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'node-legend',\r\n    templateUrl: './legend.component.html',\r\n    styleUrls: ['./legend.component.css']\r\n})\r\nexport class LegendComponent {\r\n    \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".item-avatar {\r\n    height: 20px;\r\n    width: 20px;\r\n}\r\n\r\n.nt-item:nth-child(2) {\r\n    margin-left: 5px;\r\n    order: 1;\r\n    align-self: flex-end;\r\n    padding-left: 5px;\r\n}\r\n\r\n.nt-item-loading-img {\r\n    display: flex;\r\n    align-self: flex-end;\r\n    width: 40px;\r\n    height: 50px;\r\n}\r\n\r\n.nt-item-loading-lbl {\r\n    margin-left: 5px;\r\n    order: 1;\r\n    align-self: flex-end;\r\n    padding-bottom: 6px;\r\n}",
                    "styleUrl": "./legend.component.css"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LegendComponent-1",
            "templateData": "<div class=\"legend-section\">\r\n    <mat-card>\r\n        <mat-card-content>\r\n            <mat-list dense>\r\n                <mat-list-item> \r\n                    <div class=\"nt-container\"> \r\n                        <div class=\"nt-item-loading-img\"> \r\n                            <svg height=\"45\" width=\"45\">\r\n                                <circle cx=\"18\" cy=\"25\" r=\"15\" stroke=\"black\" stroke-width=\"5\" fill=\"white\" stroke='#ff4d4d' stroke-dasharray=\"2\"/> \r\n                            </svg> \r\n                        </div> \r\n                        <div class=\"nt-item-loading-lb1\" style=\"margin-bottom: 10px;\">\r\n                            <b>Searching Network</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item>\r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: blue;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>Network Found</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item> \r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: black;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>No Connections Found</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item> \r\n                <mat-list-item> \r\n                    <div class=\"nt-container\">\r\n                        <div class=\"nt-item\" style=\"border-color: #eb0000;\">\r\n                        </div> \r\n                        <div class=\"nt-item\" style=\"margin-bottom: 10px;\">\r\n                            <b>Error Finding Connections</b> \r\n                        </div> \r\n                    </div> \r\n                </mat-list-item>\r\n            </mat-list>\r\n        </mat-card-content>\r\n    </mat-card>\r\n</div>"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-d03b16ee643687e666d6432e7fe416ef",
            "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[link]",
            "styleUrls": [
                "./link.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "number | null"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IEdge | any"
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "EMPTY_STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkOpacity",
                    "defaultValue": "DEFAULT_LINK_OPACITY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "minLabelLength",
                    "defaultValue": "DEFAULT_LABEL_LENGTH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeRadius",
                    "defaultValue": "DEFAULT_NODE_RADIUS",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nodeRelationMoveOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "nodeRelationMoveOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "notificationMoveOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "notificationMoveOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "sourceRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "targetRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "getAngle",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDistanceBetwnPoints",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPtBetween2Pts",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPtBetween2PtsfromDistance",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { IEdge } from '../../models/nw-data'; \r\nimport { Subscription} from 'rxjs'; \r\nimport { NotificationBrokerService } from '../../services/notification-broker.service'; \r\nimport { NodeRelationService, CurrentMouseOverNodeOrEdge } from '../../services/node-relation.service';\r\nimport { EMPTY_STRING } from '../../utils';\r\nimport { ConfigParserService } from '../../services/config-parser.service';\r\n\r\nconst DEFAULT_NODE_RADIUS = 20;\r\nconst DEFAULT_LINK_OPACITY = 1;\r\nconst DEFAULT_LABEL_LENGTH = 40;\r\nconst SOURCE_MARGIN = 2;\r\nconst TARGET_MARGIN = 5.5;\r\n\r\n@Component({\r\n    selector: '[link]', \r\n    templateUrl: './link.component.html', \r\n    styleUrls: ['./link.component.css']\r\n})\r\nexport class LinkComponent implements OnInit {\r\n    @Input('link') link: IEdge | any; \r\n    @Input('hideLabel') hideLabel: boolean | null = null;\r\n    @Input('layoutId') layoutId: number | null = null;\r\n    @Input('rootNodeId') rootNodeId: string = EMPTY_STRING;\r\n    nodeRadius = DEFAULT_NODE_RADIUS; \r\n    sourceRadius: number; \r\n    targetRadius: number; \r\n    linkOpacity = DEFAULT_LINK_OPACITY; \r\n    minLabelLength = DEFAULT_LABEL_LENGTH; \r\n    notificationMoveOverSub: Subscription; \r\n    notificationMoveOutSub: Subscription; \r\n    nodeRelationMoveOverSub: Subscription; \r\n    nodeRelationMoveOutSub: Subscription;\r\n    \r\n    constructor (private notificationBrokerService: NotificationBrokerService, private nodeRelationService: NodeRelationService, private configParserService: ConfigParserService) {\r\n        this.notificationMoveOverSub = notificationBrokerService.notificationMoveOver$.subscribe(\r\n            () => {\r\n                this.linkOpacity = 0.2;\r\n            });\r\n        this.notificationMoveOutSub = notificationBrokerService.notificationMoveOut$.subscribe(\r\n            () => {\r\n                this.linkOpacity = 1;\r\n            });\r\n        this.nodeRelationMoveOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n            if(message.node) { \r\n                if(message.node.nodeId === this.link.sourceNodeId || message.node.nodeId === this.link.targetNodeId) {\r\n                    this.linkOpacity = 1;\r\n                } else {\r\n                    this.linkOpacity = 0.2;\r\n                }\r\n            } else if(message.edge) { \r\n                if(message.node!.nodeId === this.link.sourceNodeId || message.node!.nodeId === this.link.targetNodeId) {\r\n                    this.linkOpacity = 1;\r\n                } else {\r\n                    this.linkOpacity = 0.2;\r\n                }\r\n            } else {\r\n                this.linkOpacity = 1;\r\n            }\r\n        });\r\n        \r\n        this.nodeRelationMoveOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                this.linkOpacity = 1;\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        const nodeRadius = this.configParserService.nwConfig.nodeRadius;\r\n        const rootNodeRadius = this.configParserService.nwConfig.rootNodeRadius;\r\n        this.sourceRadius = this.nodeRadius + SOURCE_MARGIN;\r\n        this.targetRadius = this.nodeRadius + TARGET_MARGIN;\r\n        if(nodeRadius) {\r\n            this.sourceRadius = this.nodeRadius + SOURCE_MARGIN;\r\n            this.targetRadius = this.nodeRadius + TARGET_MARGIN;\r\n        }\r\n        if(this.link.sourceNodeId === this.rootNodeId) {\r\n            this.sourceRadius = rootNodeRadius + SOURCE_MARGIN;\r\n        }\r\n        if(this.link.targetNodeId === this.rootNodeId) {\r\n            this.targetRadius = rootNodeRadius + TARGET_MARGIN;\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.notificationMoveOverSub.unsubscribe(); \r\n        this.notificationMoveOutSub.unsubscribe();\r\n    }\r\n    \r\n    get sourcePoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2PtsfromDistance({x: link.source.x, y: link.source.y}, {x: link.target.x, y: link.target.y}, this.sourceRadius);\r\n    }\r\n    \r\n    get targetPoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2PtsfromDistance({x: link.target.x, y: link.target.y}, {x: link.source.x, y: link.source.y}, this.targetRadius);\r\n    }\r\n\r\n    get centerPoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2Pts({x: link.target.x, y: link.target.y}, {x: link.source.x, y: link.source.y});\r\n    }\r\n    \r\n    get labelRotation(): string {\r\n        const link = this.link as any; \r\n        const rotation = this.getAngle({x: link.source.x, y: link.source.y}, {x: link.target.x, y: link.target.y}); \r\n        if(link.target.x > link.source.x) {\r\n            return `rotate(${rotation} ${this.centerPoint.x},${this.centerPoint.y})`;\r\n        } else {\r\n            return `rotate(${rotation + 180} ${this.centerPoint.x},${this.centerPoint.y})`;\r\n        }\r\n    }\r\n    \r\n    getPtBetween2PtsfromDistance(p1: {x: number, y: number}, p2: {x: number, y: number}, distance: number): {x: number, y: number} {\r\n        const distance_ratio = distance / this.getDistanceBetwnPoints (p1, p2); \r\n        const x = p1.x + distance_ratio * (p2.x - p1.x); \r\n        const y = p1.y + distance_ratio * (p2.y - p1.y); \r\n        return {x, y};\r\n    }\r\n\r\n    getPtBetween2Pts(p1: {x: number, y: number}, p2: {x: number, y: number}): {x: number, y: number} {\r\n        const x = p1.x + 0.5 * (p2.x - p1.x); \r\n        const y = p1.y + 0.5 * (p2.y - p1.y); \r\n        return {x, y};\r\n    }\r\n    \r\n    getDistanceBetwnPoints(p1 : {x: number, y: number}, p2: {x: number, y: number}) {\r\n        const dx = p2.x - p1.x; \r\n        const dy = p2.y - p1.y; \r\n        const square = (distance: any) => distance * distance;\r\n        return Math.sqrt(square(dx) + square(dy));\r\n    }\r\n    \r\n    getAngle(p1: {x: number, y: number}, p2: {x: number, y: number}) { \r\n        let dy = p2.y - p1.y; \r\n        let dx = p2.x - p1.x; \r\n        let theta = Math.atan2(dy, dx); \r\n        theta *= 180 / Math.PI; \r\n        return theta;\r\n    }              \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link {\r\n    stroke-width: 2;\r\n    stroke: #595959;\r\n    marker-end: 'url(#arrow)'\r\n}\r\n\r\n.link-label {\r\n    font-size: 11px;\r\n    pointer-events: none;\r\n    margin: 2px;\r\n}",
                    "styleUrl": "./link.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "sourcePoint": {
                    "name": "sourcePoint",
                    "getSignature": {
                        "name": "sourcePoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 91
                    }
                },
                "targetPoint": {
                    "name": "targetPoint",
                    "getSignature": {
                        "name": "targetPoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 96
                    }
                },
                "centerPoint": {
                    "name": "centerPoint",
                    "getSignature": {
                        "name": "centerPoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 101
                    }
                },
                "labelRotation": {
                    "name": "labelRotation",
                    "getSignature": {
                        "name": "labelRotation",
                        "type": "string",
                        "returnType": "string",
                        "line": 106
                    }
                }
            },
            "templateData": "<svg:line [ngStyle]=\"{'opacity': linkOpacity}\" \r\n            class=\"link\" \r\n            [attr.x1]=\"sourcePoint.x\" \r\n            [attr.y1]=\"sourcePoint.y\" \r\n            [attr.x2]=\"targetPoint.x\" \r\n            [attr.y2]=\"targetPoint.y\" \r\n            stroke=\"#000\" \r\n            stroke-width=\"8\"\r\n            marker-end=\"url(#arrowhead)\"> \r\n</svg:line> \r\n<svg:text *ngIf=\"hideLabel\" \r\n            class=\"link-label\"\r\n            [ngStyle] =\"{'opacity': linkOpacity}\" \r\n            [attr.x]=\"centerPoint.x\" \r\n            [attr.y]=\"centerPoint.y\" \r\n            [attr.transform]=\"labelRotation\" \r\n            text-anchor=\"middle\" \r\n            dominant-baseline=\"text-after-edge\">\r\n        {{link.name}} \r\n</svg:text>\r\n"
        },
        {
            "name": "LinkComponent",
            "id": "component-LinkComponent-77fefeadce2dd5bb24a52af49d17d036-1",
            "file": "libs/nw-graph-angular5/src/app/components/link/link.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[link]",
            "styleUrls": [
                "./link.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./link.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number | null"
                },
                {
                    "name": "link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IEdge | any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "linkOpacity",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "minLabelLength",
                    "defaultValue": "40",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "nodeRadius",
                    "defaultValue": "20",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nodeRelationMoveOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nodeRelationMoveOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "notificationMoveOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "notificationMoveOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "sourceRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "targetRadius",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getAngle",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDistanceBetwnPoints",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPtBetween2Pts",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPtBetween2PtsfromDistance",
                    "args": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "p1",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "p2",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "distance",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { IEdge } from '../../models/nw-data'; \r\nimport { Subscription} from 'rxjs'; \r\nimport { NotificationBrokerService } from '../../services/notification-broker.service'; \r\nimport { NodeRelationService, CurrentMouseOverNodeOrEdge } from '../../services/node-relation.service';\r\n\r\n@Component({\r\n    selector: '[link]', \r\n    templateUrl: './link.component.html', \r\n    styleUrls: ['./link.component.css']\r\n})\r\nexport class LinkComponent {\r\n    @Input('link') link: IEdge | any; \r\n    @Input('hideLabel') hideLabel: boolean | null = null;\r\n    @Input('layoutId') layoutId: number | null = null;\r\n    nodeRadius = 20; \r\n    sourceRadius: number; \r\n    targetRadius: number; \r\n    linkOpacity = 1; \r\n    minLabelLength = 40; \r\n    notificationMoveOverSub: Subscription; \r\n    notificationMoveOutSub: Subscription; \r\n    nodeRelationMoveOverSub: Subscription; \r\n    nodeRelationMoveOutSub: Subscription;\r\n    \r\n    constructor (private notificationBrokerService: NotificationBrokerService, private nodeRelationService: NodeRelationService) { \r\n        this.sourceRadius = this.nodeRadius + 2; \r\n        this.targetRadius = this.nodeRadius + 5.5; \r\n        this.notificationMoveOverSub = notificationBrokerService.notificationMoveOver$.subscribe(\r\n            () => {\r\n                this.linkOpacity = 0.2;\r\n            });\r\n        this.notificationMoveOutSub = notificationBrokerService.notificationMoveOut$.subscribe(\r\n            () => {\r\n                this.linkOpacity = 1;\r\n            });\r\n        this.nodeRelationMoveOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n            if(message.node) { \r\n                if(message.node.nodeId === this.link.sourceNodeId || message.node.nodeId === this.link.targetNodeId) {\r\n                    this.linkOpacity = 1;\r\n                } else {\r\n                    this.linkOpacity = 0.2;\r\n                }\r\n            } else if(message.edge) { \r\n                if(message.node!.nodeId === this.link.sourceNodeId || message.node!.nodeId === this.link.targetNodeId) {\r\n                    this.linkOpacity = 1;\r\n                } else {\r\n                    this.linkOpacity = 0.2;\r\n                }\r\n            } else {\r\n                this.linkOpacity = 1;\r\n            }\r\n        });\r\n        \r\n        this.nodeRelationMoveOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                this.linkOpacity = 1;\r\n            });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.notificationMoveOverSub.unsubscribe(); \r\n        this.notificationMoveOutSub.unsubscribe();\r\n    }\r\n    \r\n    get sourcePoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2PtsfromDistance({x: link.source.x, y: link.source.y}, {x: link.target.x, y: link.target.y}, this.sourceRadius);\r\n    }\r\n    \r\n    get targetPoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2PtsfromDistance({x: link.target.x, y: link.target.y}, {x: link.source.x, y: link.source.y}, this.targetRadius);\r\n    }\r\n\r\n    get centerPoint(): {x: number, y: number} {\r\n        const link = this.link as any; \r\n        return this.getPtBetween2Pts({x: link.target.x, y: link.target.y}, {x: link.source.x, y: link.source.y});\r\n    }\r\n    \r\n    get labelRotation(): string {\r\n        const link = this.link as any; \r\n        const rotation = this.getAngle({x: link.source.x, y: link.source.y}, {x: link.target.x, y: link.target.y}); \r\n        if(link.target.x > link.source.x) {\r\n            return `rotate(${rotation} ${this.centerPoint.x},${this.centerPoint.y})`;\r\n        } else {\r\n            return `rotate(${rotation + 180} ${this.centerPoint.x},${this.centerPoint.y})`;\r\n        }\r\n    }\r\n    \r\n    getPtBetween2PtsfromDistance(p1: {x: number, y: number}, p2: {x: number, y: number}, distance: number): {x: number, y: number} {\r\n        const distance_ratio = distance / this.getDistanceBetwnPoints (p1, p2); \r\n        const x = p1.x + distance_ratio * (p2.x - p1.x); \r\n        const y = p1.y + distance_ratio * (p2.y - p1.y); \r\n        return {x, y};\r\n    }\r\n\r\n    getPtBetween2Pts(p1: {x: number, y: number}, p2: {x: number, y: number}): {x: number, y: number} {\r\n        const x = p1.x + 0.5 * (p2.x - p1.x); \r\n        const y = p1.y + 0.5 * (p2.y - p1.y); \r\n        return {x, y};\r\n    }\r\n    \r\n    getDistanceBetwnPoints(p1 : {x: number, y: number}, p2: {x: number, y: number}) {\r\n        const dx = p2.x - p1.x; \r\n        const dy = p2.y - p1.y; \r\n        const square = (distance: any) => distance * distance;\r\n        return Math.sqrt(square(dx) + square(dy));\r\n    }\r\n    \r\n    getAngle(p1: {x: number, y: number}, p2: {x: number, y: number}) { \r\n        let dy = p2.y - p1.y; \r\n        let dx = p2.x - p1.x; \r\n        let theta = Math.atan2(dy, dx); \r\n        theta *= 180 / Math.PI; \r\n        return theta;\r\n    }              \r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link {\r\n    stroke-width: 2;\r\n    stroke: #595959;\r\n    marker-end: 'url(#arrow)'\r\n}\r\n\r\n.link-label {\r\n    font-size: 11px;\r\n    pointer-events: none;\r\n    margin: 2px;\r\n}",
                    "styleUrl": "./link.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "sourcePoint": {
                    "name": "sourcePoint",
                    "getSignature": {
                        "name": "sourcePoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 67
                    }
                },
                "targetPoint": {
                    "name": "targetPoint",
                    "getSignature": {
                        "name": "targetPoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 72
                    }
                },
                "centerPoint": {
                    "name": "centerPoint",
                    "getSignature": {
                        "name": "centerPoint",
                        "type": "literal type",
                        "returnType": "literal type",
                        "line": 77
                    }
                },
                "labelRotation": {
                    "name": "labelRotation",
                    "getSignature": {
                        "name": "labelRotation",
                        "type": "string",
                        "returnType": "string",
                        "line": 82
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "LinkComponent-1",
            "templateData": "<svg:line [ngStyle]=\"{'opacity': linkOpacity}\" \r\n            class=\"link\" \r\n            [attr.x1]=\"sourcePoint.x\" \r\n            [attr.y1]=\"sourcePoint.y\" \r\n            [attr.x2]=\"targetPoint.x\" \r\n            [attr.y2]=\"targetPoint.y\" \r\n            stroke=\"#000\" \r\n            stroke-width=\"8\"\r\n            marker-end=\"url(#arrowhead)\"> \r\n</svg:line> \r\n<svg:text *ngIf=\"hideLabel\" \r\n            class=\"link-label\"\r\n            [ngStyle] =\"{'opacity': linkOpacity}\" \r\n            [attr.x]=\"centerPoint.x\" \r\n            [attr.y]=\"centerPoint.y\" \r\n            [attr.transform]=\"labelRotation\" \r\n            text-anchor=\"middle\" \r\n            dominant-baseline=\"text-after-edge\">\r\n        {{link.name}} \r\n</svg:text>\r\n"
        },
        {
            "name": "NetworkGraphHostComponent",
            "id": "component-NetworkGraphHostComponent-10e327226a87f8c2c85e5ae204cb38fb",
            "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "network-graph-host",
            "styleUrls": [
                "./network-graph-host.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./network-graph-host.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "dataLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "\"90098302633\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onNumHopChange",
                    "args": [
                        {
                            "name": "numHop",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "numHop",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnDestroy, OnInit } from '@angular/core'; \r\nimport { concatMap, filter, map, take } from 'rxjs/operators';\r\nimport { ActivationEnd, Router } from '@angular/router';\r\nimport { NetworkGraphHostService } from './network-graph-host.service';\r\n\r\n@Component({\r\n  selector: 'network-graph-host',\r\n  templateUrl: './network-graph-host.component.html',\r\n  styleUrls: ['./network-graph-host.component.css']\r\n})\r\nexport class NetworkGraphHostComponent implements OnInit {\r\n  rootNodeId: string = \"90098302633\"; \r\n  // @Input('rootNodeId') rootNodeId: \r\n  dataLoading: boolean = false; \r\n  data: any; \r\n  config: any;\r\n\r\n  constructor(private networkGraphHostService: NetworkGraphHostService) {\r\n  }\r\n\r\n  ngOnInit() { \r\n    this.networkGraphHostService.getNwConfig().pipe(take(1)).subscribe(config => {\r\n        this.dataLoading = true;\r\n        this.config = config;\r\n        this.onNumHopChange(this.config.numHops);\r\n    });\r\n  }\r\n\r\n  onNumHopChange(numHop: number) { \r\n    console.log(\"Num Hops changed\");\r\n    try {\r\n        this.dataLoading = true;\r\n        this.networkGraphHostService.getNwNodes(this.rootNodeId, this.config, numHop).pipe(take(1)).subscribe(data => {\r\n            this.data = data;\r\n            this.dataLoading = false;\r\n        });\r\n      \r\n    } catch(ex) {\r\n      console.error(ex);\r\n      this.dataLoading = false;\r\n    }\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./network-graph-host.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "networkGraphHostService",
                        "type": "NetworkGraphHostService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "networkGraphHostService",
                        "type": "NetworkGraphHostService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<network-graph  [rootNodeId]='rootNodeId'\r\n                [dataLoading]='dataLoading'\r\n                [config]='config'\r\n                [data]='data'\r\n                (numHopChanged)='onNumHopChange($event)'>\r\n</network-graph>"
        },
        {
            "name": "NodeComponent",
            "id": "component-NodeComponent-3f649081d7a1faa63b65bd635f9a188f",
            "file": "libs/nw-graph-angular/src/lib/components/node/node.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[node]",
            "styleUrls": [
                "./node.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "GraphEngineService | undefined"
                },
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number | null"
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "INode | undefined"
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "INode[] | undefined"
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | null | undefined"
                },
                {
                    "name": "selectedNodes",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "INode[] | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "expandNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectOnlyClickedNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "blurThisNode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dispatchNodeLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isUnexpandable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "nodeRelationMouseOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeRelationMouseOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nodeStyle",
                    "defaultValue": "{ stroke: 'gray' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "preventSingleClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "allNeighboursVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 181,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDoubleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMouseOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, ElementRef, Output, OnDestroy, SimpleChanges, ViewChild, OnInit, OnChanges } from '@angular/core'; \r\nimport { INode, NeighboursStateType } from '../../models/nw-data'; \r\nimport { GraphEngineService } from '../../services/graph-engine.service'; \r\nimport { NotificationBrokerService, NotificationMessage } from '../../services/notification-broker.service'; \r\nimport { DispatchNodeLoadService } from '../../services/dispatch-node-load.service'; \r\nimport { Subscription} from 'rxjs';  \r\nimport { CurrentMouseOverNodeOrEdge, NodeRelationService } from '../../services/node-relation.service';\r\n\r\n@Component({\r\n        selector: '[node]', \r\n        templateUrl: './node.component.html', \r\n        styleUrls: ['./node.component.css']\r\n})\r\nexport class NodeComponent implements OnChanges, OnDestroy {\r\n    @Input('node') node: INode | undefined;\r\n    @Input('graph') graph: GraphEngineService | undefined;\r\n    @Input('hideLabel') hideLabel: boolean | null = null;\r\n    @Input('layoutId') layoutId: number | null = null;\r\n    @Input('nodes') nodes: INode[] | undefined;\r\n    @Input('rootNodeId') rootNodeId: string | null | undefined;\r\n    @Input('selectedNodes') selectedNodes: INode[] | null = null;\r\n    @Output() expandNode = new EventEmitter();\r\n    @Output() selectNode = new EventEmitter(); \r\n    @Output() selectOnlyClickedNode = new EventEmitter(); \r\n    // notificationMoveOverSub: Subscription; \r\n    // notificationMoveOutSub: Subscription; \r\n    dispatchNodeLoad: Subscription; \r\n    nodeRelationMouseOverSub: Subscription; \r\n    nodeRelationMouseOutSub: Subscription; \r\n    nodeStyle: any = { stroke: 'gray' }; \r\n    isUnexpandable: boolean = false; \r\n    blurThisNode: boolean = false; \r\n    preventSingleClick = false;\r\n    timer: any;\r\n\r\n    constructor (private notificationBrokerService: NotificationBrokerService, \r\n                private dispatchNodeLoadService: DispatchNodeLoadService, \r\n                private nodeRelationService: NodeRelationService) {\r\n        this.dispatchNodeLoad = dispatchNodeLoadService.dispatchNodeLoad$.subscribe(\r\n            (nodeIds: string[]) => {\r\n                if(Array.isArray(nodeIds) && nodeIds.indexOf(this.node!.nodeId) > -1) {\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                }\r\n        });\r\n        this.nodeRelationMouseOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                if(message.node) { \r\n                    if(message.node === this.node) {\r\n                        this.blurThisNode = false;\r\n                    } else {\r\n                        if((Array.isArray(message.node.sourceIds) && message.node.sourceIds.indexOf(this.node!.nodeId) > -1) || (Array.isArray(message.node.targetIds) && message.node.targetIds.indexOf(this.node!.nodeId) > -1)) {\r\n                            this.blurThisNode = false;\r\n                        } else {\r\n                            this.blurThisNode = true;\r\n                        }\r\n                    }\r\n                } // else if(message.edge) {\r\n                //     if(message.node === this.node) {\r\n\r\n                //     } else {\r\n\r\n                //     }\r\n                // } else {\r\n\r\n                // }\r\n        \r\n            });\r\n        this.nodeRelationMouseOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                if(message.node) {\r\n                    this.blurThisNode = false;\r\n                } else if(message.edge) {\r\n\r\n                } else {\r\n\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) { \r\n        if (typeof changes['nodes'] !== \"undefined\" && typeof changes['nodes'].currentValue !== \"undefined\") {\r\n            switch(this.node!.neighboursStatus) {\r\n                case NeighboursStateType.NOT_LOADED:\r\n                    this.nodeStyle = { stroke: 'gray' };\r\n                    break; \r\n                case NeighboursStateType.LOADING: \r\n                case NeighboursStateType.LOADING_THEN_EXPAND:\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                    break; \r\n                case NeighboursStateType.LOADING_FAILED:\r\n                    this.nodeStyle = { stroke: '#eb0000' }; \r\n                    break; \r\n                case NeighboursStateType.LOADED: \r\n                    if(this.node!.collapsed) { \r\n                        if(this.allNeighboursVisible()) {\r\n                            this.nodeStyle = { stroke: 'black' };\r\n                        } else {\r\n                            this.nodeStyle = { stroke: 'blue' };\r\n                        }\r\n                    } else {\r\n                        this.nodeStyle = { stroke: 'black' };\r\n                    }\r\n                    break; \r\n                default:\r\n                    this.nodeStyle = { stroke: 'gray' }; \r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        // this.notificationMoveOverSub.unsubscribe(); \r\n        // this.notificationMoveOutSub.unsubscribe(); \r\n        // this.nodeRelationMouseOverSub.unsubscribe(); \r\n        // this.nodeRelationMouseOutSub.unsubscribe();\r\n    }\r\n\r\n    get nodeOpacity() {\r\n        if(this.blurThisNode) {\r\n            return 0.2;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    get isDNDB() {\r\n        return this.node && Array.isArray(this.node.src) && this.node.src.indexOf('DNDB') > -1 ? true: false;\r\n    }\r\n\r\n    get nodRadius() {\r\n        return this.node?.nodeId === this.rootNodeId ? this.node?.r0 : this.node?.r;\r\n    }\r\n\r\n    handleClick(event: any) {\r\n        event.stopPropagation(); \r\n        this.preventSingleClick = false; \r\n        const delay = 250; \r\n        this.timer = setTimeout(() => { \r\n            if(!this.preventSingleClick) {\r\n                // Do Single click \r\n                if(this.selectNode) { \r\n                    if(event.ctrlkey) {\r\n                        this.selectNode.emit(this.node!.nodeId);\r\n                    } else {\r\n                        this.selectOnlyClickedNode.emit(this.node!.nodeId);\r\n                    }\r\n                }\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    handleDoubleClick(event: any) {\r\n        event.stopPropagation(); \r\n        this.preventSingleClick = true; \r\n        clearTimeout(this.timer); \r\n        // Do Double click \r\n        switch (this.node!.neighboursStatus) {\r\n            case NeighboursStateType.NOT_LOADED: \r\n            case NeighboursStateType.LOADING_FAILED:\r\n                this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                break; \r\n            case NeighboursStateType.LOADED: \r\n                if(this.node!.collapsed) {\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 }; \r\n                    this.expandNode.emit(this.node);\r\n                }\r\n                    break; \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleMouseOver() {\r\n        this.nodeRelationService.notificationMouseOver({ node: this.node });\r\n    }\r\n    \r\n    handleMouseOut() {\r\n        this.nodeRelationService.notificationMouseOut({ node: this.node });\r\n    }\r\n\r\n    allNeighboursVisible(): boolean {\r\n        const visibleNodeIds = this.nodes!.map(x => x.nodeId);\r\n        const sIds = Array.isArray(this.node!.sourceIds)? this.node!.sourceIds : [];\r\n        const tIds = Array.isArray(this.node!.targetIds)? this.node!.targetIds : [];\r\n\r\n        return [...sIds, ...tIds].every((n: any) => visibleNodeIds.indexOf(n) !== -1)\r\n    }\r\n        \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nw-node {\r\n    outline: none;\r\n}\r\n\r\n.select-node-circle {\r\n    cursor: pointer;\r\n    stroke-width: 4;\r\n    fill: red;\r\n}\r\n\r\n.node-circle-root-entity {\r\n    cursor: pointer;\r\n    fill: transparent;\r\n    stroke-width: 2;\r\n    stroke: #F8D480;\r\n}\r\n\r\n.node-circle {\r\n    cursor: pointer;\r\n    stroke-width: 4;\r\n}\r\n\r\n.node-name {\r\n    font-family: 'Lato';\r\n    text-anchor: middle;\r\n    alignment-baseline: central;\r\n    font-weight: 300;\r\n    fill: white;\r\n}\r\n\r\n.node-label {\r\n    font-size: 11px;\r\n}",
                    "styleUrl": "./node.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dispatchNodeLoadService",
                        "type": "DispatchNodeLoadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dispatchNodeLoadService",
                        "type": "DispatchNodeLoadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "nodeOpacity": {
                    "name": "nodeOpacity",
                    "getSignature": {
                        "name": "nodeOpacity",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "isDNDB": {
                    "name": "isDNDB",
                    "getSignature": {
                        "name": "isDNDB",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                },
                "nodRadius": {
                    "name": "nodRadius",
                    "getSignature": {
                        "name": "nodRadius",
                        "type": "",
                        "returnType": "",
                        "line": 130
                    }
                }
            },
            "templateData": "<svg:g class=\"nw-node\" \r\n        [attr.transform]=\"'translate(' + node!.x + ',' + node!.y + ')'\" \r\n        [draggableNode]=\"node!\" \r\n        [draggableInGraph]=\"graph!\" \r\n        [tooltip]=\"node\" \r\n        [ngStyle]=\"{'opacity': nodeOpacity}\" \r\n        (click)=\"handleClick($event)\" \r\n        (dblclick)=\"handleDoubleClick($event)\"\r\n        (mouseover)=\"handleMouseOver()\"\r\n        (mouseout)=\"handleMouseOut()\"> \r\n    <svg:g>\r\n        <svg:circle *ngIf=\"selectedNodes!.indexOf(node!) !== -1\" \r\n                class=\"select-node-circle\" \r\n                cx=\"0\" \r\n                cy=\"0\" \r\n                [attr.r]=\"nodRadius! + 4\"> \r\n        </svg:circle> \r\n        <svg:circle [ngStyle]=\"nodeStyle\" \r\n                    class=\"node-circle\" \r\n                    [attr.fill]=\"node!.color\" \r\n                    cx=\"0\" \r\n                    cy=\"0\" \r\n                    [attr.r]=\"nodRadius!\"> \r\n        </svg:circle> \r\n        <!-- <svg:circle *ngIf=\"node!.nodeId === rootNodeId\" \r\n                    class=\"node-circle-root-entity\" \r\n                    cx=\"0\" \r\n                    cy=\"0\" \r\n                    [attr.r]=\"node!.r! - 2\"> \r\n        </svg:circle>  -->\r\n        <svg:image [attr.href]=\"node!.imagePath\" \r\n                    height=\"30\" \r\n                    width=\"30\" \r\n                    transform=\"translate(-15, -15)\"/>\r\n        <title></title>\r\n    </svg:g> \r\n</svg:g>"
        },
        {
            "name": "NodeComponent",
            "id": "component-NodeComponent-26f855560c6ae96527bfca34a1cff40a-1",
            "file": "libs/nw-graph-angular5/src/app/components/node/node.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[node]",
            "styleUrls": [
                "./node.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./node.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "graph",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "GraphEngineService | undefined"
                },
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number | null"
                },
                {
                    "name": "node",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "INode | undefined"
                },
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "INode[] | undefined"
                },
                {
                    "name": "rootNodeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | null | undefined"
                },
                {
                    "name": "selectedNodes",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "INode[] | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "expandNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectOnlyClickedNode",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "blurThisNode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "dispatchNodeLoad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "isUnexpandable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "nodeRelationMouseOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "nodeRelationMouseOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "nodeStyle",
                    "defaultValue": "{ stroke: 'gray' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "preventSingleClick",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "timer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "allNeighboursVisible",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 177,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleDoubleClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleMouseOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 173,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleMouseOver",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, Output, OnDestroy, SimpleChanges, OnChanges } from '@angular/core'; \r\nimport { INode, NeighboursStateType } from '../../models/nw-data'; \r\nimport { GraphEngineService } from '../../services/graph-engine.service'; \r\nimport { NotificationBrokerService } from '../../services/notification-broker.service'; \r\nimport { DispatchNodeLoadService } from '../../services/dispatch-node-load.service'; \r\nimport { Subscription} from 'rxjs';  \r\nimport { CurrentMouseOverNodeOrEdge, NodeRelationService } from '../../services/node-relation.service';\r\n\r\n@Component({\r\n        selector: '[node]', \r\n        templateUrl: './node.component.html', \r\n        styleUrls: ['./node.component.css']\r\n})\r\nexport class NodeComponent implements OnChanges, OnDestroy {\r\n    @Input('node') node: INode | undefined;\r\n    @Input('graph') graph: GraphEngineService | undefined;\r\n    @Input('hideLabel') hideLabel: boolean | null = null;\r\n    @Input('layoutId') layoutId: number | null = null;\r\n    @Input('nodes') nodes: INode[] | undefined;\r\n    @Input('rootNodeId') rootNodeId: string | null | undefined;\r\n    @Input('selectedNodes') selectedNodes: INode[] | null = null;\r\n    @Output() expandNode = new EventEmitter();\r\n    @Output() selectNode = new EventEmitter(); \r\n    @Output() selectOnlyClickedNode = new EventEmitter(); \r\n    // notificationMoveOverSub: Subscription; \r\n    // notificationMoveOutSub: Subscription; \r\n    dispatchNodeLoad: Subscription; \r\n    nodeRelationMouseOverSub: Subscription; \r\n    nodeRelationMouseOutSub: Subscription; \r\n    nodeStyle: any = { stroke: 'gray' }; \r\n    isUnexpandable: boolean = false; \r\n    blurThisNode: boolean = false; \r\n    preventSingleClick = false;\r\n    timer: any;\r\n\r\n    constructor (private notificationBrokerService: NotificationBrokerService, \r\n                private dispatchNodeLoadService: DispatchNodeLoadService, \r\n                private nodeRelationService: NodeRelationService) {\r\n        this.dispatchNodeLoad = dispatchNodeLoadService.dispatchNodeLoad$.subscribe(\r\n            (nodeIds: string[]) => {\r\n                if(Array.isArray(nodeIds) && nodeIds.indexOf(this.node!.nodeId) > -1) {\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                }\r\n        });\r\n        this.nodeRelationMouseOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                if(message.node) { \r\n                    if(message.node === this.node) {\r\n                        this.blurThisNode = false;\r\n                    } else {\r\n                        if((Array.isArray(message.node.sourceIds) && message.node.sourceIds.indexOf(this.node!.nodeId) > -1) || (Array.isArray(message.node.targetIds) && message.node.targetIds.indexOf(this.node!.nodeId) > -1)) {\r\n                            this.blurThisNode = false;\r\n                        } else {\r\n                            this.blurThisNode = true;\r\n                        }\r\n                    }\r\n                } else if(message.edge) {\r\n                    if(message.node === this.node) {\r\n\r\n                    } else {\r\n\r\n                    }\r\n                } else {\r\n\r\n                }\r\n        \r\n            });\r\n        this.nodeRelationMouseOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => {\r\n                if(message.node) {\r\n                    this.blurThisNode = false;\r\n                } else if(message.edge) {\r\n\r\n                } else {\r\n\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) { \r\n        if (typeof changes['nodes'] !== \"undefined\" && typeof changes['nodes'].currentValue !== \"undefined\") {\r\n            switch(this.node!.neighboursStatus) {\r\n                case NeighboursStateType.NOT_LOADED:\r\n                    this.nodeStyle = { stroke: 'gray' };\r\n                    break; \r\n                case NeighboursStateType.LOADING: \r\n                case NeighboursStateType.LOADING_THEN_EXPAND:\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                    break; \r\n                case NeighboursStateType.LOADING_FAILED:\r\n                    this.nodeStyle = { stroke: '#eb0000' }; \r\n                    break; \r\n                case NeighboursStateType.LOADED: \r\n                    if(this.node!.collapsed) { \r\n                        if(this.allNeighboursVisible()) {\r\n                            this.nodeStyle = { stroke: 'black' };\r\n                        } else {\r\n                            this.nodeStyle = { stroke: 'blue' };\r\n                        }\r\n                    } else {\r\n                        this.nodeStyle = { stroke: 'black' };\r\n                    }\r\n                    break; \r\n                default:\r\n                    this.nodeStyle = { stroke: 'gray' }; \r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        // this.notificationMoveOverSub.unsubscribe(); \r\n        // this.notificationMoveOutSub.unsubscribe(); \r\n        // this.nodeRelationMouseOverSub.unsubscribe(); \r\n        // this.nodeRelationMouseOutSub.unsubscribe();\r\n    }\r\n\r\n    get nodeOpacity() {\r\n        if(this.blurThisNode) {\r\n            return 0.2;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    get isDNDB() {\r\n        return this.node && Array.isArray(this.node.src) && this.node.src.indexOf('DNDB') > -1 ? true: false;\r\n    }\r\n\r\n    handleClick(event: any) {\r\n        event.stopPropagation(); \r\n        this.preventSingleClick = false; \r\n        const delay = 250; \r\n        this.timer = setTimeout(() => { \r\n            if(!this.preventSingleClick) {\r\n                // Do Single click \r\n                if(this.selectNode) { \r\n                    if(event.ctrlkey) {\r\n                        this.selectNode.emit(this.node!.nodeId);\r\n                    } else {\r\n                        this.selectOnlyClickedNode.emit(this.node!.nodeId);\r\n                    }\r\n                }\r\n            }\r\n        }, delay);\r\n    }\r\n\r\n    handleDoubleClick(event: any) {\r\n        event.stopPropagation(); \r\n        this.preventSingleClick = true; \r\n        clearTimeout(this.timer); \r\n        // Do Double click \r\n        switch (this.node!.neighboursStatus) {\r\n            case NeighboursStateType.NOT_LOADED: \r\n            case NeighboursStateType.LOADING_FAILED:\r\n                this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 };\r\n                break; \r\n            case NeighboursStateType.LOADED: \r\n                if(this.node!.collapsed) {\r\n                    this.nodeStyle = { stroke: '#ff4d4d', strokeDasharray: 2 }; \r\n                    this.expandNode.emit(this.node);\r\n                }\r\n                    break; \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    handleMouseOver() {\r\n        this.nodeRelationService.notificationMouseOver({ node: this.node });\r\n    }\r\n    \r\n    handleMouseOut() {\r\n        this.nodeRelationService.notificationMouseOut({ node: this.node });\r\n    }\r\n\r\n    allNeighboursVisible(): boolean {\r\n        const visibleNodeIds = this.nodes!.map(x => x.nodeId);\r\n        const sIds = Array.isArray(this.node!.sourceIds)? this.node!.sourceIds : [];\r\n        const tIds = Array.isArray(this.node!.targetIds)? this.node!.targetIds : [];\r\n\r\n        return [...sIds, ...tIds].every((n: any) => visibleNodeIds.indexOf(n) !== -1)\r\n    }\r\n        \r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nw-node {\r\n    outline: none;\r\n}\r\n\r\n.select-node-circle {\r\n    cursor: pointer;\r\n    stroke-width: 4;\r\n    fill: red;\r\n}\r\n\r\n.node-circle-root-entity {\r\n    cursor: pointer;\r\n    fill: transparent;\r\n    stroke-width: 2;\r\n    stroke: #F8D480;\r\n}\r\n\r\n.node-circle {\r\n    cursor: pointer;\r\n    stroke-width: 4;\r\n}\r\n\r\n.node-name {\r\n    font-family: 'Lato';\r\n    text-anchor: middle;\r\n    alignment-baseline: central;\r\n    font-weight: 300;\r\n    fill: white;\r\n}\r\n\r\n.node-label {\r\n    font-size: 11px;\r\n}",
                    "styleUrl": "./node.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dispatchNodeLoadService",
                        "type": "DispatchNodeLoadService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dispatchNodeLoadService",
                        "type": "DispatchNodeLoadService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges",
                "OnDestroy"
            ],
            "accessors": {
                "nodeOpacity": {
                    "name": "nodeOpacity",
                    "getSignature": {
                        "name": "nodeOpacity",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                },
                "isDNDB": {
                    "name": "isDNDB",
                    "getSignature": {
                        "name": "isDNDB",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NodeComponent-1",
            "templateData": "<svg:g class=\"nw-node\" \r\n        [attr.transform]=\"'translate(' + node!.x + ',' + node!.y + ')'\" \r\n        [draggableNode]=\"node!\" \r\n        [draggableInGraph]=\"graph!\" \r\n        [tooltip]=\"node\" \r\n        [ngStyle]=\"{'opacity': nodeOpacity}\" \r\n        (click)=\"handleClick($event)\" \r\n        (dblclick)=\"handleDoubleClick($event)\"\r\n        (mouseover)=\"handleMouseOver()\"\r\n        (mouseout)=\"handleMouseOut()\"> \r\n    <svg:g>\r\n        <svg:circle *ngIf=\"selectedNodes!.indexOf(node!) !== -1\" \r\n                class=\"select-node-circle\" \r\n                cx=\"0\" \r\n                cy=\"0\" \r\n                [attr.r]=\"node!.r! + 4\"> \r\n        </svg:circle> \r\n        <svg:circle [ngStyle]=\"nodeStyle\" \r\n                    class=\"node-circle\" \r\n                    [attr.fill]=\"node!.color\" \r\n                    cx=\"0\" \r\n                    cy=\"0\" \r\n                    [attr.r]=\"node!.r\"> \r\n        </svg:circle> \r\n        <svg:circle *ngIf=\"node!.nodeId === rootNodeId\" \r\n                    class=\"node-circle-root-entity\" \r\n                    cx=\"0\" \r\n                    cy=\"0\" \r\n                    [attr.r]=\"node!.r! - 2\"> \r\n        </svg:circle> \r\n        <svg:image [attr.href]=\"node!.imagePath\" \r\n                    height=\"30\" \r\n                    width=\"30\" \r\n                    transform=\"translate(-15, -15)\"/>\r\n        <title></title>\r\n    </svg:g> \r\n</svg:g>"
        },
        {
            "name": "NodeLabelComponent",
            "id": "component-NodeLabelComponent-eed74dad1c16bbe51b275467b7ceab1a",
            "file": "libs/nw-graph-angular/src/lib/components/node-label/node-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[node-label]",
            "styleUrls": [
                "./node-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./node-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "number | null"
                },
                {
                    "name": "node-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "INode | undefined"
                },
                {
                    "name": "rootNodeId",
                    "defaultValue": "EMPTY_STRING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blurThisNode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "nodeRelationMouseOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "nodeRelationMouseOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, EventEmitter, ElementRef, OnChanges, Output, AfterViewInit,\r\n    OnDestroy, SimpleChanges, ViewChild } from '@angular/core'; \r\nimport { INode, IEdge, NeighboursStateType } from '../../models/nw-data'; \r\nimport {NodeRelationService, CurrentMouseOverNodeOrEdge } from '../../services/node-relation.service'; \r\nimport {Subscription} from 'rxjs';\r\nimport { EMPTY_STRING } from '../../utils';\r\nimport { ConfigParserService } from '../../services/config-parser.service';\r\n\r\n@Component({\r\n    selector: '[node-label]', \r\n    templateUrl: './node-label.component.html', \r\n    styleUrls: ['./node-label.component.css']\r\n})\r\nexport class NodeLabelComponent {\r\n    @Input('node-label') node: INode | undefined;//needed \r\n    @Input('hideLabel') hideLabel: boolean | null = null;//needed \r\n    @Input('layoutId') layoutId: number | null = null;\r\n    @Input('rootNodeId') rootNodeId: string = EMPTY_STRING;\r\n    nodeRelationMouseOverSub: Subscription; \r\n    nodeRelationMouseOutSub: Subscription; \r\n    blurThisNode: boolean = false;\r\n\r\n    constructor(private nodeRelationService: NodeRelationService, private configParserService: ConfigParserService) {\r\n        this.nodeRelationMouseOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n                if(message.node) { \r\n                    if(message.node === this.node) {\r\n                        this.blurThisNode = false;\r\n                    } else { \r\n                        if((Array.isArray(message.node.sourceIds) \r\n                            && message.node.sourceIds.indexOf(this.node!.nodeId) > -1) || (Array.isArray(message.node.targetIds) && message.node.targetIds.indexOf(this.node!.nodeId) > -1)) { \r\n                                this.blurThisNode = false;\r\n                            } else {\r\n                                this.blurThisNode = true;\r\n                            } \r\n                        }\r\n                    } else if (message.edge) {\r\n                        if(message.node === this.node) {\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        // this.linkOpacity = 1;\r\n                    }\r\n                });\r\n                \r\n                \r\n        this.nodeRelationMouseOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n                if(message.node) {\r\n                    this.blurThisNode = false;\r\n                } else if (message.edge) {\r\n                } else {\r\n                    //this.linkOpacity = 1;\r\n                }\r\n            });\r\n    }\r\n\r\n    get nodeOpacity() { \r\n        if(this.blurThisNode) {\r\n            return 0.2;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    get labelPosition() {\r\n        if(this.node!.nodeId === this.rootNodeId) {\r\n            return {x: -Math.abs(this.configParserService.nwConfig.rootNodeRadius), y: this.configParserService.nwConfig.rootNodeRadius + 12};\r\n        }\r\n        return {x: -Math.abs(this.configParserService.nwConfig.nodeRadius), y: this.configParserService.nwConfig.nodeRadius + 12};\r\n    }\r\n}       \r\n    ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nw-node-label {\r\n    outline: node;\r\n}\r\n\r\n.node-label-label {\r\n    font-size: 11px;\r\n}",
                    "styleUrl": "./node-label.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "nodeOpacity": {
                    "name": "nodeOpacity",
                    "getSignature": {
                        "name": "nodeOpacity",
                        "type": "",
                        "returnType": "",
                        "line": 58
                    }
                },
                "labelPosition": {
                    "name": "labelPosition",
                    "getSignature": {
                        "name": "labelPosition",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            },
            "templateData": "<svg:g class=\"nw-node-label\"\r\n        [attr.transform]=\"'translate(' + node!.x + ',' + node!.y + ')'\"\r\n        [ngStyle]=\"{'opacity': nodeOpacity}\"\r\n        style=\"pointer-events: none;\">\r\n    <svg:text *ngIf=\"hideLabel\" \r\n                filter=\"url(#bg-text)\" \r\n                [attr.x]=\"labelPosition.x\" \r\n                [attr.y]=\"labelPosition.y\"\r\n                class=\"node-label-label\">\r\n        {{node!.label}}\r\n    </svg:text>\r\n    <svg:text *ngIf=\"hideLabel\"\r\n                [attr.x]=\"labelPosition.x\"\r\n                [attr.y]=\"labelPosition.y\"\r\n                class=\"node-label-label\">\r\n        {{node!.label}}\r\n    </svg:text>\r\n</svg:g>"
        },
        {
            "name": "NodeLabelComponent",
            "id": "component-NodeLabelComponent-cf9b832b9e896eedd8447ca277db2c50-1",
            "file": "libs/nw-graph-angular5/src/app/components/node-label/node-label.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[node-label]",
            "styleUrls": [
                "./node-label.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./node-label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "hideLabel",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean | null"
                },
                {
                    "name": "layoutId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number | null"
                },
                {
                    "name": "node-label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "INode | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blurThisNode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nodeRelationMouseOutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "nodeRelationMouseOverSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core'; \r\nimport { INode } from '../../models/nw-data'; \r\nimport {NodeRelationService, CurrentMouseOverNodeOrEdge } from '../../services/node-relation.service'; \r\nimport {Subscription} from 'rxjs';\r\n@Component({\r\n    selector: '[node-label]', \r\n    templateUrl: './node-label.component.html', \r\n    styleUrls: ['./node-label.component.css']\r\n})\r\nexport class NodeLabelComponent {\r\n    @Input('node-label') node: INode | undefined;//needed \r\n    @Input('hideLabel') hideLabel: boolean | null = null;//needed \r\n    @Input('layoutId') layoutId: number | null = null;\r\n    nodeRelationMouseOverSub: Subscription; \r\n    nodeRelationMouseOutSub: Subscription; \r\n    blurThisNode: boolean = false;\r\n\r\n    constructor(private nodeRelationService: NodeRelationService) {\r\n        this.nodeRelationMouseOverSub = nodeRelationService.notificationMoveOver$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n                if(message.node) { \r\n                    if(message.node === this.node) {\r\n                        this.blurThisNode = false;\r\n                    } else { \r\n                        if((Array.isArray(message.node.sourceIds) \r\n                            && message.node.sourceIds.indexOf(this.node!.nodeId) > -1) || (Array.isArray(message.node.targetIds) && message.node.targetIds.indexOf(this.node!.nodeId) > -1)) { \r\n                                this.blurThisNode = false;\r\n                            } else {\r\n                                this.blurThisNode = true;\r\n                            } \r\n                        }\r\n                    } else if (message.edge) {\r\n                        if(message.node === this.node) {\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        //this.linkOpacity = 1;\r\n                    }\r\n                });\r\n                \r\n                \r\n        this.nodeRelationMouseOutSub = nodeRelationService.notificationMoveOut$.subscribe(\r\n            (message: CurrentMouseOverNodeOrEdge) => { \r\n                if(message.node) {\r\n                    this.blurThisNode = false;\r\n                } else if (message.edge) {\r\n                } else {\r\n                    //this.linkOpacity = 1;\r\n                }\r\n            });\r\n    }\r\n\r\n    get nodeOpacity() { \r\n        if(this.blurThisNode) {\r\n            return 0.2;\r\n        }\r\n        return 1;\r\n    }\r\n}       \r\n    ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".nw-node-label {\r\n    outline: node;\r\n}\r\n\r\n.node-label-label {\r\n    font-size: 11px;\r\n}",
                    "styleUrl": "./node-label.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "nodeRelationService",
                        "type": "NodeRelationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "nodeOpacity": {
                    "name": "nodeOpacity",
                    "getSignature": {
                        "name": "nodeOpacity",
                        "type": "",
                        "returnType": "",
                        "line": 53
                    }
                }
            },
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "NodeLabelComponent-1",
            "templateData": "<svg:g class=\"nw-node-label\"\r\n        [attr.transform]=\"'translate(' + node!.x + ',' + node!.y + ')'\"\r\n        [ngStyle]=\"{'opacity': nodeOpacity}\"\r\n        style=\"pointer-events: none;\">\r\n    <svg:text *ngIf=\"hideLabel\" \r\n                filter=\"url(#bg-text)\" \r\n                x=\"-20\" \r\n                y=\"32\"\r\n                class=\"node-label-label\">\r\n        {{node!.label}}\r\n    </svg:text>\r\n    <svg:text *ngIf=\"hideLabel\"\r\n                x=\"-20\" \r\n                y=\"32\"\r\n                class=\"node-label-label\">\r\n        {{node!.label}}\r\n    </svg:text>\r\n</svg:g>"
        },
        {
            "name": "ParamListComponent",
            "id": "component-ParamListComponent-55265e9915849ed7769f09da5f2e57ca",
            "file": "libs/nw-graph-angular/src/lib/components/sidebar/param-list/param-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "param-list",
            "styleUrls": [
                "./param-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./param-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLayoutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "graphData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INwData> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loadedLayouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<number>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "notificationBrokerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationBrokerService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "numHops",
                    "defaultValue": "\"2\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedLayout",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numHopsChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLayoutChange",
                    "args": [
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stripText",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LayoutChangeMessage } from './../../../services/notification-broker.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \r\nimport { Store } from '@ngrx/store'; \r\nimport { Observable, Subscription } from 'rxjs'; \r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../../store/state'; \r\nimport * as graphSelectors from '../../../store/selectors'; \r\nimport { ConfigParserService } from '../../../services/config-parser.service'; \r\nimport { INwData } from '../../../models/nw-data';\r\nimport { take } from 'rxjs/operators'; \r\nimport { ChangeActiveLayout } from '../../../store/actions';\r\nimport { NotificationBrokerService } from '../../../services/notification-broker.service';\r\n\r\n@Component({\r\n    selector: 'param-list', \r\n    templateUrl: './param-list.component.html', \r\n    styleUrls: ['./param-list.component.css']\r\n})\r\nexport class ParamListComponent implements OnInit, OnDestroy {\r\n    numHops: string = \"2\"; \r\n    graphData$: Observable<INwData> | undefined;\r\n    selectedLayout: number = -1;\r\n    activeLayoutSub: Subscription | undefined;\r\n    loadedLayouts: Set<number>;\r\n\r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService, public notificationBrokerService: NotificationBrokerService) {\r\n        this.loadedLayouts = new Set<number>([]);\r\n    }\r\n\r\n    stripText(event: KeyboardEvent) {\r\n        const seperator = '^([0-9])';\r\n        const maskSeperator = new RegExp(seperator , 'g');\r\n        let result = maskSeperator.test(event.key);\r\n        return result;   \r\n    }\r\n\r\n    onLayoutChange(layoutId: number) {\r\n        this.notificationBrokerService.OnLayoutChange({previousLayout: this.selectedLayout, currentLayout: layoutId, enableRender: this.loadedLayouts.has(layoutId)} as LayoutChangeMessage);\r\n    }\r\n    \r\n    ngOnInit() {\r\n        this.activeLayoutSub = this.store$.select(graphSelectors.selectActiveLayout).subscribe((layoutId) => {\r\n            this.numHops = this.configParserService.nwConfig.numHops.toString();\r\n            this.selectedLayout = layoutId;\r\n            this.loadedLayouts.add(layoutId);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if(this.activeLayoutSub) {\r\n            this.activeLayoutSub.unsubscribe();\r\n        }\r\n    }\r\n    \r\n    numHopsChanged() {\r\n        this.configParserService.notififyNumHopsChange(parseInt(this.numHops));\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search {\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.searchTerm {\r\n  width: 100%;\r\n  border: 3px solid #a3a3a3;\r\n  border-right: none;\r\n  padding: 5px;\r\n  height: 20px;\r\n  border-radius: 5px 0 0 5px;\r\n  outline: none;\r\n  color: #646464;\r\n}\r\n\r\n.searchTerm:focus{\r\n  color: #646464;\r\n}\r\n\r\n.searchButton {\r\n  width: 40px;\r\n  height: 36px;\r\n  border: 1px solid #a3a3a3;\r\n  background: #a3a3a3;\r\n  text-align: center;\r\n  color: #fff;\r\n  border-radius: 0 5px 5px 0;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n}\r\n\r\n/*Resize the wrap to see the search bar change!*/\r\n.wrap{\r\n  width: 100%;\r\n}\r\n\r\n.setting-lbl {\r\n    margin: 15px 0 2px 0;\r\n}\r\n\r\n.layouts-container {\r\n    width: 100%;\r\n    display: flex;\r\n}\r\n\r\n.layouts-frm {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n}\r\n\r\n.layout-lbl {\r\n  display: flex;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin-bottom: 0.375em;\r\n  margin-left: -5px;\r\n}\r\n.layout-lbl input {\r\n  position: absolute;\r\n  left: -9999px;\r\n}\r\n.layout-lbl input:checked + span {\r\n  background-color: #d8d8d8;\r\n}\r\n.layout-lbl input:checked + span:before {\r\n  box-shadow: inset 0 0 0 0.4375em #7D7D7D;\r\n}\r\n.layout-lbl span {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.375em 0.75em 0.375em 0.375em;\r\n  border-radius: 99em;\r\n  transition: 0.25s ease;\r\n}\r\n.layout-lbl span:hover {\r\n  background-color: #d8d8d8;\r\n}\r\n.layout-lbl span:before {\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  content: \"\";\r\n  background-color: #fff;\r\n  width: 1.5em;\r\n  height: 1.5em;\r\n  border-radius: 50%;\r\n  margin-right: 0.375em;\r\n  transition: 0.25s ease;\r\n  box-shadow: inset 0 0 0 0.125em #7D7D7D;\r\n}",
                    "styleUrl": "./param-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"wrap\">\r\n    <div class=\"setting-lbl\">Number of Hops:</div>\r\n    <div class=\"search\">\r\n        <input type=\"text\" class=\"searchTerm\" placeholder=\"Number of Hops\" [(ngModel)]=\"numHops\" [ngModelOptions]=\"{standalone:true}\" (keypress)=\"stripText($event)\">\r\n        <button (click)=\"numHopsChanged()\" class=\"searchButton\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fill-rule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n            </svg>\r\n        </button>\r\n    </div>\r\n    <div class=\"setting-lbl\">Views:</div>\r\n    <div class=\"layouts-container\">\r\n        <form class=\"layouts-frm\">\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\" \r\n                        name=\"radio\" \r\n                        value=\"0\"\r\n                        [checked]=\"selectedLayout === 0\"\r\n                        (change)=\"onLayoutChange(0)\"/>\r\n                <span>Default</span>\r\n            </label>\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\"\r\n                        value=\"1\"\r\n                        [checked]=\"selectedLayout === 1\"\r\n                        (change)=\"onLayoutChange(1)\"/>\r\n                <span>Hierarchical</span>\r\n            </label>\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\"\r\n                        value=\"2\"\r\n                        [checked]=\"selectedLayout === 2\"\r\n                        (change)=\"onLayoutChange(2)\"/>\r\n                <span>Grid</span>\r\n            </label>\r\n        </form>\r\n    </div>\r\n</div>"
        },
        {
            "name": "ParamListComponent",
            "id": "component-ParamListComponent-5c3fd63d7573996d6ccea6680a35249e-1",
            "file": "libs/nw-graph-angular5/src/app/components/sidebar/param-list/param-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "param-list",
            "styleUrls": [
                "./param-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./param-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "activeLayoutSub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "graphData$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<INwData> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "loadedLayouts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Set<number>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "notificationBrokerService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationBrokerService",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "numHops",
                    "defaultValue": "\"2\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "selectedLayout",
                    "defaultValue": "-1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "numHopsChanged",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLayoutChange",
                    "args": [
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "layoutId",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "stripText",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { LayoutChangeMessage } from './../../../services/notification-broker.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core'; \r\nimport { Store } from '@ngrx/store'; \r\nimport { Subscription } from 'rxjs'; \r\nimport { Observable } from 'rxjs/Observable'; \r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../../store/state'; \r\nimport * as graphSelectors from '../../../store/selectors'; \r\nimport { ConfigParserService } from '../../../services/config-parser.service'; \r\nimport { INwData } from '../../../models/nw-data';\r\nimport { take } from 'rxjs/operators'; \r\nimport { ChangeActiveLayout } from '../../../store/actions';\r\nimport { NotificationBrokerService } from '../../../services/notification-broker.service';\r\n\r\n@Component({\r\n    selector: 'param-list', \r\n    templateUrl: './param-list.component.html', \r\n    styleUrls: ['./param-list.component.css']\r\n})\r\nexport class ParamListComponent implements OnInit, OnDestroy {\r\n    numHops: string = \"2\"; \r\n    graphData$: Observable<INwData> | undefined;\r\n    selectedLayout: number = -1;\r\n    activeLayoutSub: Subscription | undefined;\r\n    loadedLayouts: Set<number>;\r\n\r\n    constructor(private store$: Store<GraphState>, private configParserService: ConfigParserService, public notificationBrokerService: NotificationBrokerService) {\r\n        this.loadedLayouts = new Set<number>([]);\r\n    }\r\n\r\n    stripText(event: KeyboardEvent) {\r\n        const seperator = '^([0-9])';\r\n        const maskSeperator = new RegExp(seperator , 'g');\r\n        let result = maskSeperator.test(event.key);\r\n        return result;   \r\n    }\r\n\r\n    onLayoutChange(layoutId: number) {\r\n        // this.store$.dispatch(new ChangeActiveLayout({layoutId, enableRender: false}));\r\n        this.notificationBrokerService.OnLayoutChange({previousLayout: this.selectedLayout, currentLayout: layoutId, enableRender: this.loadedLayouts.has(layoutId)} as LayoutChangeMessage);\r\n    }\r\n    \r\n    ngOnInit() {\r\n        this.activeLayoutSub = this.store$.select(graphSelectors.selectActiveLayout).subscribe((layoutId) => {\r\n            this.numHops = this.configParserService.nwConfig.numHops.toString();\r\n            this.selectedLayout = layoutId;\r\n            this.loadedLayouts.add(layoutId);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if(this.activeLayoutSub) {\r\n            this.activeLayoutSub.unsubscribe();\r\n        }\r\n    }\r\n    \r\n    numHopsChanged() {\r\n        this.configParserService.notififyNumHopsChange(parseInt(this.numHops));\r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".search {\r\n  width: 100%;\r\n  position: relative;\r\n  display: flex;\r\n}\r\n\r\n.searchTerm {\r\n  width: 100%;\r\n  border: 3px solid #a3a3a3;\r\n  border-right: none;\r\n  padding: 5px;\r\n  height: 20px;\r\n  border-radius: 5px 0 0 5px;\r\n  outline: none;\r\n  color: #646464;\r\n}\r\n\r\n.searchTerm:focus{\r\n  color: #646464;\r\n}\r\n\r\n.searchButton {\r\n  width: 40px;\r\n  height: 36px;\r\n  border: 1px solid #a3a3a3;\r\n  background: #a3a3a3;\r\n  text-align: center;\r\n  color: #fff;\r\n  border-radius: 0 5px 5px 0;\r\n  cursor: pointer;\r\n  font-size: 20px;\r\n}\r\n\r\n/*Resize the wrap to see the search bar change!*/\r\n.wrap{\r\n  width: 100%;\r\n}\r\n\r\n.setting-lbl {\r\n    margin: 15px 0 2px 0;\r\n}\r\n\r\n.layouts-container {\r\n    width: 100%;\r\n    display: flex;\r\n}\r\n\r\n.layouts-frm {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: column;\r\n}\r\n\r\n.layout-lbl {\r\n  display: flex;\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n  position: relative;\r\n  overflow: hidden;\r\n  margin-bottom: 0.375em;\r\n  margin-left: -5px;\r\n}\r\n.layout-lbl input {\r\n  position: absolute;\r\n  left: -9999px;\r\n}\r\n.layout-lbl input:checked + span {\r\n  background-color: #d8d8d8;\r\n}\r\n.layout-lbl input:checked + span:before {\r\n  box-shadow: inset 0 0 0 0.4375em #7D7D7D;\r\n}\r\n.layout-lbl span {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 0.375em 0.75em 0.375em 0.375em;\r\n  border-radius: 99em;\r\n  transition: 0.25s ease;\r\n}\r\n.layout-lbl span:hover {\r\n  background-color: #d8d8d8;\r\n}\r\n.layout-lbl span:before {\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  content: \"\";\r\n  background-color: #fff;\r\n  width: 1.5em;\r\n  height: 1.5em;\r\n  border-radius: 50%;\r\n  margin-right: 0.375em;\r\n  transition: 0.25s ease;\r\n  box-shadow: inset 0 0 0 0.125em #7D7D7D;\r\n}",
                    "styleUrl": "./param-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "configParserService",
                        "type": "ConfigParserService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "notificationBrokerService",
                        "type": "NotificationBrokerService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ParamListComponent-1",
            "templateData": "<div class=\"wrap\">\r\n    <div class=\"setting-lbl\">Number of Hops:</div>\r\n    <div class=\"search\">\r\n        <input type=\"text\" class=\"searchTerm\" placeholder=\"Number of Hops\" [(ngModel)]=\"numHops\" [ngModelOptions]=\"{standalone:true}\" (keypress)=\"stripText($event)\">\r\n        <button (click)=\"numHopsChanged()\" class=\"searchButton\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                <path fill-rule=\"evenodd\" d=\"M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z\" clip-rule=\"evenodd\" />\r\n            </svg>\r\n        </button>\r\n    </div>\r\n    <div class=\"setting-lbl\">Views:</div>\r\n    <div class=\"layouts-container\">\r\n        <form class=\"layouts-frm\">\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\" \r\n                        name=\"radio\" \r\n                        value=\"0\"\r\n                        [checked]=\"selectedLayout === 0\"\r\n                        (change)=\"onLayoutChange(0)\"/>\r\n                <span>Default</span>\r\n            </label>\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\"\r\n                        value=\"1\"\r\n                        [checked]=\"selectedLayout === 1\"\r\n                        (change)=\"onLayoutChange(1)\"/>\r\n                <span>Hierarchical</span>\r\n            </label>\r\n            <label class=\"layout-lbl\">\r\n                <input type=\"radio\"\r\n                        value=\"2\"\r\n                        [checked]=\"selectedLayout === 2\"\r\n                        (change)=\"onLayoutChange(2)\"/>\r\n                <span>Grid</span>\r\n            </label>\r\n        </form>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-9c9ca2822372d766a4815a1504ed2def",
            "file": "libs/nw-graph-angular/src/lib/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nw-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "INode[] | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "alertsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "errorLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "filterHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "logs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "logs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "logsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedNodesHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedTool",
                    "defaultValue": "'filter'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "settingsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sidebarState",
                    "defaultValue": "'open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSidebar",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTool",
                    "args": [
                        {
                            "name": "tool",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tool",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChildren, QueryList, OnInit, OnDestroy } from '@angular/core'; \r\nimport { Store } from '@ngrx/store'; \r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../store/state'; \r\nimport * as graphSelectors from '../../store/selectors'; \r\nimport { GraphLog, GraphLogType } from '../../models/graph-log'; \r\nimport { INode } from '../../models/nw-data'; \r\n\r\n@Component({\r\n    selector: 'nw-sidebar', \r\n    templateUrl: './sidebar.component.html', \r\n    styleUrls: ['./sidebar.component.css']\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n    @Input('nodes') nodes: INode[] | undefined; \r\n    sidebarState = 'open'; \r\n    selectedTool = 'filter';\r\n\r\n    logs$: any;\r\n    logs: GraphLog[] = [];\r\n    errorLogs: GraphLog[] = [];\r\n    alertLogs: GraphLog[] = [];\r\n\r\n    filterHover = false;\r\n    alertsHover = false;\r\n    logsHover = false;\r\n    settingsHover = false;\r\n    selectedNodesHover = false;\r\n    \r\n    constructor(private store$: Store<GraphState>) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.logs$ = this.store$.select(graphSelectors.selectLogs).subscribe(logs => {\r\n            this.logs = logs; \r\n            if(Array.isArray(logs) && logs[0] && (logs[0].logType === GraphLogType.Error || logs[0].logType === GraphLogType. RetryableError)) { \r\n                this.errorLogs = [logs[0], ...this.errorLogs];\r\n            }\r\n        });\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.logs$.unsubscribe();\r\n    }\r\n    \r\n    openSidebar(e: any) {\r\n        e.stopPropagation(); \r\n        this.sidebarState = this.sidebarState === 'open'? 'close': 'open';\r\n    }\r\n    \r\n    selectTool(tool: string) {\r\n        this.selectedTool = tool; \r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar-rightside-container {\r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: stretch; \r\n    align-items: center; \r\n    width: 100%; \r\n    height: 100%;\r\n}\r\n\r\n.sidebar-rightside-heading {\r\n    align-self: stretch; \r\n    display: flex; \r\n    justify-content: flex-start; \r\n    /* border-bottom: 1px solid #aaa;  */\r\n    padding: 5px;\r\n}\r\n\r\n.sidebar-rightside-content {\r\n    align-self: stretch; \r\n    flex-grow:1; \r\n    overflow: auto; \r\n    scrollbar-width: thin;\r\n    padding: 5px;\r\n}\r\n/* Base Styles*/ \r\n.sb-flex-col {\r\n    display: flex; \r\n    flex-direction: column; \r\n    justify-content: center; \r\n    height: 100%;\r\n}\r\n\r\n.sb-flex-row {\r\n    display: flex; \r\n    flex-direction: row; \r\n    justify-content: flex-start; \r\n    flex-wrap: nowrap; \r\n    height: 100%;\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\n\r\n.sb-sidebar-container {\r\n    justify-content: flex-start;\r\n    box-sizing: border-box; \r\n    width: 100%; \r\n    height: 100%; \r\n    font-size: 14px;\r\n}\r\n\r\n.left-side-section {\r\n    background-color: #7D7D7D; \r\n    height: 100%; \r\n    display: flex; \r\n    flex-direction: column; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    flex-wrap: nowrap;\r\n    position: relative;\r\n    z-index: 2;\r\n    padding-top: 35px;\r\n}\r\n\r\n.left-side-arrow {\r\n    padding: 3px; \r\n    color: #FFFFFF; \r\n    margin-bottom: 5px; \r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 3;\r\n}\r\n\r\n.left-side-item {\r\n    padding: 3px; \r\n    color: #CACACA; \r\n    cursor: pointer;\r\n}\r\n\r\n.left-side-item-selected {\r\n    color: #FFFFFF; \r\n    border-style: solid; \r\n    border-top-color: #70707D; \r\n    border-right-color: #7D7D7D; \r\n    border-bottom-color: #7D7D7D; \r\n    border-left-color: #70707D;\r\n}\r\n\r\n.nw-rightside-section {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    flex-wrap: nowrap;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    background-color: #f3f3f3;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 250px;\r\n    animation: shimmy .5s linear 1 normal forwards;\r\n    z-index: 1;\r\n}\r\n\r\n/* Hide the toggle checkbox */\r\n#expand-toggle {\r\n    display: none;\r\n}\r\n#expand-toggle:checked ~ #gdd-nw-mat-icon-back {\r\n    display: none;\r\n}\r\n#expand-toggle:not(:checked) ~ #gdd-nw-mat-icon-forward {\r\n    display: none;\r\n}\r\n#expand-toggle ~ .nw-rightside-section {\r\n    transition: left .5s;\r\n}\r\n\r\n#expand-toggle:checked ~ .nw-rightside-section {\r\n    left: -250px;\r\n}\r\n\r\n.right-side-content {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    overflow: hidden;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 250px;\r\n    padding-left: 40px;\r\n    padding-right: 7px;\r\n}\r\n    ",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"sb-flex-col sb-sidebar-container\"> \r\n    <div class=\"sb-flex-col\"> \r\n        <div class=\"sb-flex-row\"> \r\n            <input type=\"checkbox\" id=\"expand-toggle\"/>\r\n            <label for=\"expand-toggle\" id=\"gdd-nw-mat-icon-back\" class=\"left-side-arrow\">\r\n                <mat-icon>arrow_back</mat-icon>\r\n            </label> \r\n            <label for=\"expand-toggle\" id=\"gdd-nw-mat-icon-forward\" class=\"left-side-arrow\">\r\n                <mat-icon>arrow_forward</mat-icon>\r\n            </label>\r\n            <div class=\"left-side-section\">  \r\n                <div class=\"left-side-item left-side-item-selected\" \r\n                    (mouseover)=\"filterHover=true\" \r\n                    (mouseleave)=\"filterHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'filter' ? '#FFFFFF' : '#7D7D7D',\r\n                                color: selectedTool=='filter' ? '#FFFFFF' : (filterHover == true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('filter')\">\r\n                    <mat-icon matTooltip=\"Filter\" matTooltipPosition=\"right\">filter_alt</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"alertsHover=true\" \r\n                    (mouseleave)=\"alertsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'alerts' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='alerts' ? '#FFFFFF' : (alertsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('alerts')\">\r\n                    <mat-icon matTooltip=\"Alerts\" matTooltipPosition=\"right\">notifications</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"logsHover=true\" \r\n                    (mouseleave)=\"logsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'logs' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='logs' ? '#FFFFFF' : (logsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('logs')\">\r\n                    <mat-icon matTooltip=\"Logs\" matTooltipPosition=\"right\">app_registration</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"settingsHover=true\" \r\n                    (mouseleave)=\"settingsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'settings' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='settings' ? '#FFFFFF' : (settingsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('settings')\">\r\n                    <mat-icon matTooltip=\"Settings\" matTooltipPosition=\"right\">settings</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"selectedNodesHover=true\" \r\n                    (mouseleave)=\"selectedNodesHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'selectednodes' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='selectednodes' ? '#FFFFFF' : (selectedNodesHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('selectednodes')\">\r\n                    <mat-icon matTooltip=\"Selected Nodes\" matTooltipPosition=\"right\">view_array</mat-icon> \r\n                </div> \r\n            </div> \r\n            <div class=\"nw-rightside nw-rightside-section\" [ngSwitch]=\"selectedTool\">\r\n                <!-- Filter --> \r\n                <div *ngSwitchCase=\"'filter'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Filter\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <sidebar-filter>Filter</sidebar-filter> \r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Alerts List -->\r\n                <div *ngSwitchCase=\"'alerts'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Alerts\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Logs List -->\r\n                <div *ngSwitchCase=\"'logs'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Logs\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Settings -->\r\n                <div *ngSwitchCase=\"'settings'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Settings\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <param-list></param-list>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Selected Nodes -->\r\n                <div *ngSwitchCase=\"'selectednodes'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Selected Nodes\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Default -->\r\n                <div *ngSwitchDefault class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Default\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-9c9ca2822372d766a4815a1504ed2def-1",
            "file": "libs/nw-graph-angular5/src/app/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "nw-sidebar",
            "styleUrls": [
                "./sidebar.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "nodes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "INode[] | undefined"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "alertsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "errorLogs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "filterHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "logs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GraphLog[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "logs$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "logsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "selectedNodesHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedTool",
                    "defaultValue": "'filter'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "settingsHover",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "sidebarState",
                    "defaultValue": "'open'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openSidebar",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTool",
                    "args": [
                        {
                            "name": "tool",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tool",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChildren, QueryList, OnInit, OnDestroy } from '@angular/core'; \r\nimport { Store } from '@ngrx/store'; \r\nimport { State as GraphState, STORE_GRAPH_SLICE_NAME } from '../../store/state'; \r\nimport * as graphSelectors from '../../store/selectors'; \r\nimport { GraphLog, GraphLogType } from '../../models/graph-log'; \r\nimport { INode } from '../../models/nw-data'; \r\n\r\n@Component({\r\n    selector: 'nw-sidebar', \r\n    templateUrl: './sidebar.component.html', \r\n    styleUrls: ['./sidebar.component.css']\r\n})\r\nexport class SidebarComponent implements OnInit, OnDestroy {\r\n    @Input('nodes') nodes: INode[] | undefined; \r\n    sidebarState = 'open'; \r\n    selectedTool = 'filter';\r\n\r\n    logs$: any;\r\n    logs: GraphLog[] = [];\r\n    errorLogs: GraphLog[] = [];\r\n    alertLogs: GraphLog[] = [];\r\n\r\n    filterHover = false;\r\n    alertsHover = false;\r\n    logsHover = false;\r\n    settingsHover = false;\r\n    selectedNodesHover = false;\r\n    \r\n    constructor(private store$: Store<GraphState>) {\r\n    }\r\n    \r\n    ngOnInit() { \r\n        this.logs$ = this.store$.select(graphSelectors.selectLogs).subscribe(logs => {\r\n            this.logs = logs; \r\n            if(Array.isArray(logs) && logs[0] && (logs[0].logType === GraphLogType.Error || logs[0].logType === GraphLogType. RetryableError)) { \r\n                this.errorLogs = [logs[0], ...this.errorLogs];\r\n            }\r\n        });\r\n    }\r\n    \r\n    ngOnDestroy() {\r\n        this.logs$.unsubscribe();\r\n    }\r\n    \r\n    openSidebar(e: any) {\r\n        e.stopPropagation(); \r\n        this.sidebarState = this.sidebarState === 'open'? 'close': 'open';\r\n    }\r\n    \r\n    selectTool(tool: string) {\r\n        this.selectedTool = tool; \r\n    }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".sidebar-rightside-container {\r\n    display: flex; \r\n    flex-direction: column; \r\n    flex-wrap: nowrap; \r\n    justify-content: flex-start; \r\n    align-content: stretch; \r\n    align-items: center; \r\n    width: 100%; \r\n    height: 100%;\r\n}\r\n\r\n.sidebar-rightside-heading {\r\n    align-self: stretch; \r\n    display: flex; \r\n    justify-content: flex-start; \r\n    /* border-bottom: 1px solid #aaa;  */\r\n    padding: 5px;\r\n}\r\n\r\n.sidebar-rightside-content {\r\n    align-self: stretch; \r\n    flex-grow:1; \r\n    overflow: auto; \r\n    scrollbar-width: thin;\r\n    padding: 5px;\r\n}\r\n/* Base Styles*/ \r\n.sb-flex-col {\r\n    display: flex; \r\n    flex-direction: column; \r\n    justify-content: center; \r\n    height: 100%;\r\n}\r\n\r\n.sb-flex-row {\r\n    display: flex; \r\n    flex-direction: row; \r\n    justify-content: flex-start; \r\n    flex-wrap: nowrap; \r\n    height: 100%;\r\n    position: relative;\r\n    z-index: 0;\r\n}\r\n\r\n.sb-sidebar-container {\r\n    justify-content: flex-start;\r\n    box-sizing: border-box; \r\n    width: 100%; \r\n    height: 100%; \r\n    font-size: 14px;\r\n}\r\n\r\n.left-side-section {\r\n    background-color: #7D7D7D; \r\n    height: 100%; \r\n    display: flex; \r\n    flex-direction: column; \r\n    justify-content: flex-start; \r\n    align-items: center; \r\n    flex-wrap: nowrap;\r\n    position: relative;\r\n    z-index: 2;\r\n    padding-top: 35px;\r\n}\r\n\r\n.left-side-arrow {\r\n    padding: 3px; \r\n    color: #FFFFFF; \r\n    margin-bottom: 5px; \r\n    cursor: pointer;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    z-index: 3;\r\n}\r\n\r\n.left-side-item {\r\n    padding: 3px; \r\n    color: #CACACA; \r\n    cursor: pointer;\r\n}\r\n\r\n.left-side-item-selected {\r\n    color: #FFFFFF; \r\n    border-style: solid; \r\n    border-top-color: #70707D; \r\n    border-right-color: #7D7D7D; \r\n    border-bottom-color: #7D7D7D; \r\n    border-left-color: #70707D;\r\n}\r\n\r\n.nw-rightside-section {\r\n    height: 100%;\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    flex-wrap: nowrap;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;\r\n    background-color: #f3f3f3;\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 250px;\r\n    animation: shimmy .5s linear 1 normal forwards;\r\n    z-index: 1;\r\n}\r\n\r\n/* Hide the toggle checkbox */\r\n#expand-toggle {\r\n    display: none;\r\n}\r\n#expand-toggle:checked ~ #gdd-nw-mat-icon-back {\r\n    display: none;\r\n}\r\n#expand-toggle:not(:checked) ~ #gdd-nw-mat-icon-forward {\r\n    display: none;\r\n}\r\n#expand-toggle ~ .nw-rightside-section {\r\n    transition: left .5s;\r\n}\r\n\r\n#expand-toggle:checked ~ .nw-rightside-section {\r\n    left: -250px;\r\n}\r\n\r\n.right-side-content {\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    overflow: hidden;\r\n    align-items: center;\r\n    height: 100%;\r\n    width: 250px;\r\n    padding-left: 40px;\r\n    padding-right: 7px;\r\n}\r\n    ",
                    "styleUrl": "./sidebar.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "store$",
                        "type": "Store<GraphState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SidebarComponent-1",
            "templateData": "<div class=\"sb-flex-col sb-sidebar-container\"> \r\n    <div class=\"sb-flex-col\"> \r\n        <div class=\"sb-flex-row\"> \r\n            <input type=\"checkbox\" id=\"expand-toggle\"/>\r\n            <label for=\"expand-toggle\" id=\"gdd-nw-mat-icon-back\" class=\"left-side-arrow\">\r\n                <mat-icon>arrow_back</mat-icon>\r\n            </label> \r\n            <label for=\"expand-toggle\" id=\"gdd-nw-mat-icon-forward\" class=\"left-side-arrow\">\r\n                <mat-icon>arrow_forward</mat-icon>\r\n            </label>\r\n            <div class=\"left-side-section\">  \r\n                <div class=\"left-side-item left-side-item-selected\" \r\n                    (mouseover)=\"filterHover=true\" \r\n                    (mouseleave)=\"filterHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'filter' ? '#FFFFFF' : '#7D7D7D',\r\n                                color: selectedTool=='filter' ? '#FFFFFF' : (filterHover == true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('filter')\">\r\n                    <mat-icon matTooltip=\"Filter\" matTooltipPosition=\"right\">filter_alt</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"alertsHover=true\" \r\n                    (mouseleave)=\"alertsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'alerts' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='alerts' ? '#FFFFFF' : (alertsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('alerts')\">\r\n                    <mat-icon matTooltip=\"Alerts\" matTooltipPosition=\"right\">notifications</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"logsHover=true\" \r\n                    (mouseleave)=\"logsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'logs' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='logs' ? '#FFFFFF' : (logsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('logs')\">\r\n                    <mat-icon matTooltip=\"Logs\" matTooltipPosition=\"right\">app_registration</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"settingsHover=true\" \r\n                    (mouseleave)=\"settingsHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'settings' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='settings' ? '#FFFFFF' : (settingsHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('settings')\">\r\n                    <mat-icon matTooltip=\"Settings\" matTooltipPosition=\"right\">settings</mat-icon> \r\n                </div> \r\n                <div class=\"left-side-item left-side-item-selected\"\r\n                    (mouseover)=\"selectedNodesHover=true\" \r\n                    (mouseleave)=\"selectedNodesHover=false\" \r\n                    [ngStyle]=\"{borderLeftColor: selectedTool == 'selectednodes' ? '#FFFFFF' : '#70707D', \r\n                                color: selectedTool=='selectednodes' ? '#FFFFFF' : (selectedNodesHover==true? '#FFFFFF' : '#CACACA')}\" \r\n                    (click)=\"selectTool('selectednodes')\">\r\n                    <mat-icon matTooltip=\"Selected Nodes\" matTooltipPosition=\"right\">view_array</mat-icon> \r\n                </div> \r\n            </div> \r\n            <div class=\"nw-rightside nw-rightside-section\" [ngSwitch]=\"selectedTool\">\r\n                <!-- Filter --> \r\n                <div *ngSwitchCase=\"'filter'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Filter\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <sidebar-filter>Filter</sidebar-filter> \r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Alerts List -->\r\n                <div *ngSwitchCase=\"'alerts'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Alerts\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Logs List -->\r\n                <div *ngSwitchCase=\"'logs'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Logs\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Settings -->\r\n                <div *ngSwitchCase=\"'settings'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Settings\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <param-list></param-list>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Selected Nodes -->\r\n                <div *ngSwitchCase=\"'selectednodes'\" class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Selected Nodes\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n                <!-- Default -->\r\n                <div *ngSwitchDefault class=\"right-side-content\"> \r\n                    <div class=\"sidebar-rightside-container\"> \r\n                        <div class=\"sidebar-rightside-heading\">\r\n                            Default\r\n                        </div> \r\n                        <div class=\"sidebar-rightside-content\">\r\n                            <div></div>\r\n                        </div> \r\n                    </div> \r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-a3fb72990913e0f64dd21d611fd792b5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "apps/demo-angular12/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\n// import { NetworkGraphModule } from '../../../network-graph/src/lib/network-graph.module';\r\n// import { NetworkGraphModule } from '../../../../libs/nw-graph-angular/src/lib/network-graph.module';\r\nimport { NetworkGraphModule } from '@gdd/nw-graph-angular';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: 'network',\r\n    component: AppComponent\r\n  },\r\n  {\r\n    path: 'network/:entityid',\r\n    component: AppComponent\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NetworkGraphModule,\r\n    HttpClientModule,\r\n    BrowserAnimationsModule,\r\n    RouterModule.forRoot(routes, {onSameUrlNavigation: 'reload'})\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NetworkGraphModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-8483feef874455d2bd417c080daa99ad-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "apps/demo-angular5/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppComponent } from './app.component';\nimport { SharedModule } from './shared/shared.module';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CommonModule } from '@angular/common';\nimport { MatListModule } from '@angular/material/list';\nimport { MatCheckboxModule, MatDividerModule, MatIconModule, MatMenuModule, MatSelectModule, MatSlideToggleModule } from '@angular/material';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    CommonModule,\n    BrowserAnimationsModule,\n    MatListModule,\n    MatCheckboxModule,\n    MatToolbarModule,\n    MatSelectModule,\n    MatProgressSpinnerModule,\n    MatIconModule,\n    MatSlideToggleModule,\n    MatMenuModule,\n    MatDividerModule,\n    MatTooltipModule,\n    FormsModule,\n    OverlayModule,\n    A11yModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppStateModule",
            "id": "module-AppStateModule-289caba2137eae112666417901c4625d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "apps/demo-angular5/src/app/app-state.module.ts",
            "methods": [],
            "sourceCode": "import { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\nimport { reducers, metaReducers } from './store/reducer';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        StoreModule.forRoot(reducers, {metaReducers}),\r\n        EffectsModule.forRoot([]),\r\n        StoreDevtoolsModule.instrument({\r\n            maxAge: 10\r\n        })\r\n    ],\r\n    declarations: []\r\n})\r\nexport class AppStateModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NetworkGraphHostModule",
            "id": "module-NetworkGraphHostModule-d870154ef67f3dec1777886ab324d541",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.module.ts",
            "methods": [],
            "sourceCode": "import { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { NetworkGraphModule } from '@gdd/nw-graph-angular5';\r\nimport { NetworkGraphHostComponent } from './network-graph-host.component';\r\nimport { NetworkGraphHostService } from './network-graph-host.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatCheckboxModule, MatDividerModule, MatIconModule, MatMenuModule, MatSelectModule, MatSlideToggleModule } from '@angular/material';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        BrowserAnimationsModule,\r\n        MatListModule,\r\n        MatCheckboxModule,\r\n        MatToolbarModule,\r\n        MatSelectModule,\r\n        MatProgressSpinnerModule,\r\n        MatIconModule,\r\n        MatSlideToggleModule,\r\n        MatMenuModule,\r\n        MatDividerModule,\r\n        MatTooltipModule,\r\n        FormsModule,\r\n        OverlayModule,\r\n        A11yModule,\r\n        HttpClientModule,\r\n        NetworkGraphModule\r\n    ],\r\n    declarations: [NetworkGraphHostComponent],\r\n    providers: [NetworkGraphHostService],\r\n    exports: [NetworkGraphHostComponent]\r\n})\r\nexport class NetworkGraphHostModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "NetworkGraphHostService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "NetworkGraphHostComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NetworkGraphModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "NetworkGraphHostComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NetworkGraphModule",
            "id": "module-NetworkGraphModule-7d36ea5482ca4ba5ea54a464ca1b574d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular/src/lib/network-graph.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { GraphComponent } from './components/graph/graph.component';\r\nimport { RootStateModule } from \"./root-state.module\";\r\nimport { ZoomableDirective } from \"./directives/zoomable.directive\";\r\nimport { DraggableDirective } from './directives/draggable.directive';\r\nimport { TooltipDirective } from './directives/tooltip.directive';\r\nimport { D3Service } from \"./services/d3.service\";\r\nimport { GraphEngineService } from \"./services/graph-engine.service\";\r\nimport { FadeinNotificationService } from \"./services/fadein-notification.service\";\r\nimport { DispatchNodeLoadService } from \"./services/dispatch-node-load.service\";\r\nimport { NodeRelationService } from \"./services/node-relation.service\";\r\nimport { NotificationBrokerService } from \"./services/notification-broker.service\";\r\nimport { ConfigParserService } from \"./services/config-parser.service\";\r\nimport { DataBuilderService } from \"./services/data-builder.service\";\r\nimport { LinkComponent } from './components/link/link.component';\r\nimport { NodeComponent } from './components/node/node.component';\r\nimport { NodeLabelComponent } from './components/node-label/node-label.component';\r\nimport { LegendComponent } from './components/legend/legend.component';\r\nimport { FadeinNotificationComponent } from './components/fadein-notification/fadein-notification.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { MatButtonModule, MatCardModule, \r\n          MatCheckboxModule, \r\n          MatDividerModule, \r\n          MatFormFieldModule,\r\n          MatIconModule, \r\n          MatInputModule,\r\n          MatListModule, \r\n          MatMenuModule, \r\n          MatProgressSpinnerModule, \r\n          MatSelectModule, \r\n          MatSlideToggleModule, \r\n          MatSnackBarModule, \r\n          MatToolbarModule, \r\n          MatTooltipModule } from '@angular/material'\r\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\r\nimport { FilterComponent } from './components/sidebar/filter/filter.component';\r\nimport { ParamListComponent } from './components/sidebar/param-list/param-list.component';\r\n\r\n@NgModule({\r\n  declarations: [GraphComponent,\r\n                  LinkComponent,\r\n                  NodeComponent,\r\n                  NodeLabelComponent,\r\n                  LegendComponent,\r\n                  FadeinNotificationComponent,\r\n                  SidebarComponent,\r\n                  FilterComponent,\r\n                  ParamListComponent,\r\n                  ZoomableDirective,\r\n                  DraggableDirective,\r\n                  TooltipDirective],\r\n  imports: [\r\n    CommonModule, \r\n    BrowserAnimationsModule,\r\n    FormsModule, \r\n    OverlayModule, \r\n    A11yModule,\r\n    RootStateModule,\r\n    MatListModule, \r\n    MatCardModule, \r\n    MatCheckboxModule, \r\n    MatToolbarModule, \r\n    MatSelectModule, \r\n    MatProgressSpinnerModule, \r\n    MatIconModule, \r\n    MatSlideToggleModule, \r\n    MatMenuModule, \r\n    MatSnackBarModule, \r\n    MatDividerModule, \r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule\r\n  ],\r\n  providers: [\r\n    D3Service, \r\n    GraphEngineService, \r\n    NotificationBrokerService, \r\n    NodeRelationService, \r\n    DispatchNodeLoadService, \r\n    ConfigParserService, \r\n    DataBuilderService, \r\n    FadeinNotificationService\r\n  ],\r\n  exports: [GraphComponent]\r\n})\r\nexport class NetworkGraphModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfigParserService"
                        },
                        {
                            "name": "D3Service"
                        },
                        {
                            "name": "DataBuilderService"
                        },
                        {
                            "name": "DispatchNodeLoadService"
                        },
                        {
                            "name": "FadeinNotificationService"
                        },
                        {
                            "name": "GraphEngineService"
                        },
                        {
                            "name": "NodeRelationService"
                        },
                        {
                            "name": "NotificationBrokerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableDirective"
                        },
                        {
                            "name": "FadeinNotificationComponent"
                        },
                        {
                            "name": "FilterComponent"
                        },
                        {
                            "name": "GraphComponent"
                        },
                        {
                            "name": "LegendComponent"
                        },
                        {
                            "name": "LinkComponent"
                        },
                        {
                            "name": "NodeComponent"
                        },
                        {
                            "name": "NodeLabelComponent"
                        },
                        {
                            "name": "ParamListComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "ZoomableDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RootStateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "GraphComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NetworkGraphModule",
            "id": "module-NetworkGraphModule-7d36ea5482ca4ba5ea54a464ca1b574d-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular5/src/app/network-graph.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { GraphComponent } from './components/graph/graph.component';\r\nimport { RootStateModule } from \"./root-state.module\";\r\nimport { ZoomableDirective } from \"./directives/zoomable.directive\";\r\nimport { DraggableDirective } from './directives/draggable.directive';\r\nimport { TooltipDirective } from './directives/tooltip.directive';\r\nimport { D3Service } from \"./services/d3.service\";\r\nimport { GraphEngineService } from \"./services/graph-engine.service\";\r\nimport { FadeinNotificationService } from \"./services/fadein-notification.service\";\r\nimport { DispatchNodeLoadService } from \"./services/dispatch-node-load.service\";\r\nimport { NodeRelationService } from \"./services/node-relation.service\";\r\nimport { NotificationBrokerService } from \"./services/notification-broker.service\";\r\nimport { ConfigParserService } from \"./services/config-parser.service\";\r\nimport { DataBuilderService } from \"./services/data-builder.service\";\r\nimport { LinkComponent } from './components/link/link.component';\r\nimport { NodeComponent } from './components/node/node.component';\r\nimport { NodeLabelComponent } from './components/node-label/node-label.component';\r\nimport { LegendComponent } from './components/legend/legend.component';\r\nimport { FadeinNotificationComponent } from './components/fadein-notification/fadein-notification.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { MatButtonModule, MatCardModule, \r\n          MatCheckboxModule, \r\n          MatDividerModule, \r\n          MatFormFieldModule,\r\n          MatIconModule, \r\n          MatInputModule,\r\n          MatListModule, \r\n          MatMenuModule, \r\n          MatProgressSpinnerModule, \r\n          MatSelectModule, \r\n          MatSlideToggleModule, \r\n          MatSnackBarModule, \r\n          MatToolbarModule, \r\n          MatTooltipModule } from '@angular/material'\r\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\r\nimport { FilterComponent } from './components/sidebar/filter/filter.component';\r\nimport { ParamListComponent } from './components/sidebar/param-list/param-list.component';\r\n\r\n@NgModule({\r\n  declarations: [GraphComponent,\r\n                  LinkComponent,\r\n                  NodeComponent,\r\n                  NodeLabelComponent,\r\n                  LegendComponent,\r\n                  FadeinNotificationComponent,\r\n                  SidebarComponent,\r\n                  FilterComponent,\r\n                  ParamListComponent,\r\n                  ZoomableDirective,\r\n                  DraggableDirective,\r\n                  TooltipDirective],\r\n  imports: [\r\n    CommonModule, \r\n    BrowserAnimationsModule,\r\n    FormsModule, \r\n    OverlayModule, \r\n    A11yModule,\r\n    RootStateModule,\r\n    MatListModule, \r\n    MatCardModule, \r\n    MatCheckboxModule, \r\n    MatToolbarModule, \r\n    MatSelectModule, \r\n    MatProgressSpinnerModule, \r\n    MatIconModule, \r\n    MatSlideToggleModule, \r\n    MatMenuModule, \r\n    MatSnackBarModule, \r\n    MatDividerModule, \r\n    MatTooltipModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule\r\n  ],\r\n  providers: [\r\n    D3Service, \r\n    GraphEngineService, \r\n    NotificationBrokerService, \r\n    NodeRelationService, \r\n    DispatchNodeLoadService, \r\n    ConfigParserService, \r\n    DataBuilderService, \r\n    FadeinNotificationService\r\n  ],\r\n  exports: [GraphComponent]\r\n})\r\nexport class NetworkGraphModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ConfigParserService"
                        },
                        {
                            "name": "D3Service"
                        },
                        {
                            "name": "DataBuilderService"
                        },
                        {
                            "name": "DispatchNodeLoadService"
                        },
                        {
                            "name": "FadeinNotificationService"
                        },
                        {
                            "name": "GraphEngineService"
                        },
                        {
                            "name": "NodeRelationService"
                        },
                        {
                            "name": "NotificationBrokerService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DraggableDirective"
                        },
                        {
                            "name": "FadeinNotificationComponent"
                        },
                        {
                            "name": "FilterComponent"
                        },
                        {
                            "name": "LegendComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        },
                        {
                            "name": "TooltipDirective"
                        },
                        {
                            "name": "ZoomableDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "RootStateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NetworkGraphStateModule",
            "id": "module-NetworkGraphStateModule-6a3f5ddf579a1a7b266e26e5358822ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular/src/lib/network-graph-state.module.ts",
            "methods": [],
            "sourceCode": "import { NetworkGraphEffects } from './store/effects';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { STORE_GRAPH_SLICE_NAME } from './store/state';\r\nimport { graphReducer } from './store/reducer';\r\n\r\n@NgModule({\r\n    imports:[\r\n        CommonModule,\r\n        StoreModule.forFeature(STORE_GRAPH_SLICE_NAME, graphReducer),\r\n        EffectsModule.forFeature([NetworkGraphEffects])\r\n    ],\r\n    providers: []\r\n})\r\nexport class NetworkGraphStateModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "NetworkGraphStateModule",
            "id": "module-NetworkGraphStateModule-6a3f5ddf579a1a7b266e26e5358822ec-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular5/src/app/network-graph-state.module.ts",
            "methods": [],
            "sourceCode": "import { NetworkGraphEffects } from './store/effects';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from \"@angular/core\";\r\nimport { STORE_GRAPH_SLICE_NAME } from './store/state';\r\nimport { graphReducer } from './store/reducer';\r\n\r\n@NgModule({\r\n    imports:[\r\n        CommonModule,\r\n        StoreModule.forFeature(STORE_GRAPH_SLICE_NAME, graphReducer),\r\n        EffectsModule.forFeature([NetworkGraphEffects])\r\n    ],\r\n    providers: []\r\n})\r\nexport class NetworkGraphStateModule {}",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootStateModule",
            "id": "module-RootStateModule-e8754bb4a3ed599c31d21a1fbc9bad33",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'; \r\nimport { NgModule } from '@angular/core'; \r\nimport { EffectsModule } from '@ngrx/effects'; \r\nimport { ActionReducer, ActionReducerMap, MetaReducer, StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools'; \r\nimport { NetworkGraphStateModule } from './network-graph-state.module';\r\nimport { graphReducer } from './store/reducer';\r\n\r\nexport const reducers: ActionReducerMap<any> = {\r\n    nwGraph: graphReducer\r\n}\r\n\r\nexport function logger(reducer: ActionReducer<any>) : ActionReducer<any> { \r\n    const output = (state: any, action: any) => {\r\n        const result = reducer(state, action); \r\n        console.groupCollapsed(action.type);\r\n        console.log('prev state', state); \r\n        console.log('action', action); \r\n        console.log('next state', result); \r\n        console.groupEnd(); \r\n        return result;\r\n    };\r\n    return output;\r\n}\r\nexport const metaReducers: MetaReducer<any>[] = [logger];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule, \r\n        NetworkGraphStateModule, \r\n        StoreModule.forRoot(reducers, { \r\n            metaReducers, \r\n            runtimeChecks: {\r\n                // strictStateImmutability and strictActionImmutability are enabled by default\r\n                strictStateSerializability: false,\r\n                strictActionSerializability: false,\r\n                strictActionWithinNgZone: false,\r\n                strictActionTypeUniqueness: false,\r\n                // if you want to change complexe objects and that we have. We need to disable these settings\r\n                // change strictStateImmutability, strictActionImmutability\r\n                strictStateImmutability: false, // set this to false\r\n                strictActionImmutability: false,\r\n            },\r\n        }), \r\n        EffectsModule.forRoot([]), \r\n        StoreDevtoolsModule.instrument({\r\n            maxAge: 25, // Retains last 25 states\r\n        })\r\n    ],\r\n    declarations: []\r\n})\r\nexport class RootStateModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NetworkGraphStateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RootStateModule",
            "id": "module-RootStateModule-f67995989f95ac8a75ba2967d9259f88-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common'; \r\nimport { NgModule } from '@angular/core'; \r\nimport { EffectsModule } from '@ngrx/effects'; \r\nimport { ActionReducer, ActionReducerMap, MetaReducer, StoreModule } from '@ngrx/store';\r\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools'; \r\nimport { NetworkGraphStateModule } from './network-graph-state.module';\r\nimport { graphReducer } from './store/reducer';\r\n\r\nexport const reducers: ActionReducerMap<any> = {\r\n    nwGraph: graphReducer\r\n}\r\n\r\nexport function logger(reducer: ActionReducer<any>) : ActionReducer<any> { \r\n    const output = (state: any, action: any) => {\r\n        const result = reducer(state, action); \r\n        console.groupCollapsed(action.type);\r\n        console.log('prev state', state); \r\n        console.log('action', action); \r\n        console.log('next state', result); \r\n        console.groupEnd(); \r\n        return result;\r\n    };\r\n    return output;\r\n}\r\nexport const metaReducers: MetaReducer<any>[] = [logger];\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule, \r\n        NetworkGraphStateModule, \r\n        StoreModule.forRoot(reducers, { \r\n            metaReducers\r\n        }), \r\n        EffectsModule.forRoot([]), \r\n        StoreDevtoolsModule.instrument({\r\n            maxAge: 25, // Retains last 25 states\r\n        })\r\n    ],\r\n    declarations: []\r\n})\r\nexport class RootStateModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "NetworkGraphStateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-ccdf2176eeeb62c1cddabbfe58fe22e9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "apps/demo-angular5/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { AppStateModule } from '../app-state.module';\r\nimport { NetworkGraphHostModule } from '../network-graph/network-graph-host.module';\r\n\r\n@NgModule({\r\n    imports: [MatTabsModule,\r\n                AppStateModule,\r\n                NetworkGraphHostModule],\r\n    declarations: [],\r\n    exports: [MatTabsModule,\r\n                AppStateModule,\r\n                NetworkGraphHostModule]\r\n})\r\nexport class SharedModule { }",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppStateModule"
                        },
                        {
                            "name": "NetworkGraphHostModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AppStateModule"
                        },
                        {
                            "name": "NetworkGraphHostModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_graphNodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "_graphNodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "_nodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "_nodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "_sets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "_sets",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "ALL_NOTIFICATION_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message))"
            },
            {
                "name": "ALL_NOTIFICATION_MESSAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "[\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message))"
            },
            {
                "name": "AppConstants",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    user_object: 'user_object',\r\n    access_token: 'access_token'\r\n}"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    \"maxSelectedNodes\": 100,\r\n    \"displayLabel\": true,\r\n    \"autoExpand\": false,\r\n    \"processNodeWithUnknownNodeType\": true,\r\n    \"numHops\": 2,\r\n    \"maxNodeCount\": 5,\r\n    \"viewportHeight\": 700,\r\n    \"nodeRadius\": 20,\r\n    \"rootNodeRadius\": 27,\r\n    \"node\": { \"parentRawPath\": [\"data\", \"0\", \"printSet\"],\r\n              \"nodeIdAttributeKey\": \"v_id\",\r\n              \"nodeTypeAttributeKey\": \"v_type\",\r\n              \"nodeTitleAttributeKey\": \"label\",\r\n              \"nodeTypes\": [{ \"name\": \"gfctEntity\",\r\n                              \"displayName\": \"Entity\",\r\n                              \"color\": \"#80B9E7\",\r\n                              \"imagePath\": \"assets/images/entity.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"entitylabel\", \"displayName\": \"Entity Label\", \"rawPath\": [\"attributes\", \"entitylabel\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Entity Label\", \"rawPath\": [\"attributes\", \"entitylabel\"], \"tooltip\": true },\r\n                                                  { \"key\": \"entityid\", \"displayName\": \"Entity Id\", \"rawPath\": [\"attributes\", \"entityid\"], \"tooltip\": true },\r\n                                                  { \"key\": \"src\", \"displayName\": \"Source\", \"rawPath\": [\"attributes\", \"src\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctParty\",\r\n                            \"displayName\": \"Party\",\r\n                            \"color\": \"#CCEBF8\",\r\n                            \"imagePath\": \"assets/images/party.png\",\r\n                            \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true }, \r\n                                                { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                { \"key\": \"label\", \"displayName\": \"Party Full Name\", \"rawPath\": [\"attributes\", \"partyfullname\"], \"tooltip\": true },\r\n                                                { \"key\": \"amlptyId\", \"displayName\": \"AML Party Id\", \"rawPath\": [\"attributes\", \"amlptyId\"], \"tooltip\": true },\r\n                                                { \"key\": \"ptyid\", \"displayName\": \"Party Id\", \"rawPath\": [\"attributes\", \"ptyid\"], \"tooltip\": true },\r\n                                                { \"key\": \"gcino\", \"displayName\": \"GCI Number\", \"rawPath\": [\"attributes\", \"gcino\"], \"tooltip\": true },\r\n                                                { \"key\": \"mlid\", \"displayName\": \"ML Id\", \"rawPath\": [\"attributes\", \"mlid\"], \"tooltip\": true },\r\n                                                { \"key\": \"itn\", \"displayName\": \"ITN\", \"rawPath\": [\"attributes\", \"itn\"], \"tooltip\": true },\r\n                                                { \"key\": \"ssn\", \"displayName\": \"SSN\", \"rawPath\": [\"attributes\", \"ssn\"], \"tooltip\": true },\r\n                                                { \"key\": \"ein\", \"displayName\": \"EIN\", \"rawPath\": [\"attributes\", \"ein\"], \"tooltip\": true },\r\n                                                { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                { \"key\": \"scorecat\", \"displayName\": \"scorecat\", \"rawPath\": [\"attributes\", \"scorecat\"], \"tooltip\": true },\r\n                                                { \"key\": \"prdcd\", \"displayName\": \"prdcd\", \"rawPath\": [\"attributes\", \"prdcd\"], \"tooltip\": true },\r\n                                                { \"key\": \"naicscd\", \"displayName\": \"naicscd\", \"rawPath\": [\"attributes\", \"naicscd\"], \"tooltip\": true },\r\n                                                { \"key\": \"naicsde\", \"displayName\": \"naicsde\", \"rawPath\": [\"attributes\", \"naicsde\"], \"tooltip\": true },\r\n                                                { \"key\": \"ptytypcd\", \"displayName\": \"ptytypcd\", \"rawPath\": [\"attributes\", \"ptytypcd\"], \"tooltip\": true },\r\n                                                { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctAccount\",\r\n                              \"displayName\": \"Account\",\r\n                              \"color\": \"#93CF80\",\r\n                              \"imagePath\": \"assets/images/account.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Account Number\", \"rawPath\": [\"attributes\", \"accno\"], \"tooltip\": true },\r\n                                                  { \"key\": \"amlaccid\", \"displayName\": \"AML Account Id\", \"rawPath\": [\"attributes\", \"amlaccid\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accnm\", \"displayName\": \"Account Name\", \"rawPath\": [\"attributes\", \"accnm\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accopendate\", \"displayName\": \"Account Open Date\", \"rawPath\": [\"attributes\", \"accopendate\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accptyrolecd\", \"displayName\": \"Account Party Role Code\", \"rawPath\": [\"attributes\", \"accptyrolecd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true }, \r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctAddress\",\r\n                            \"displayName\": \"Address\",\r\n                            \"color\": \"#AF90B3\",\r\n                            \"imagePath\": \"assets/images/address.png\",\r\n                            \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                { \"key\": \"label\", \"displayName\": \"Party Address\", \"rawPath\": [\"attributes\", \"partyaddress\"], \"tooltip\": true },\r\n                                                { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctSSN\",\r\n                              \"displayName\": \"SSN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/ssn.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"SSN\", \"rawPath\": [\"attributes\", \"ssn\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctPhone\",\r\n                              \"displayName\": \"Phone\",\r\n                              \"color\": \"#66CDBD\",\r\n                              \"imagePath\": \"assets/images/phone.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Phone Number\", \"rawPath\": [\"attributes\", \"phonenumber\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctEmail\",\r\n                              \"displayName\": \"Email\",\r\n                              \"color\": \"#EA7600\",\r\n                              \"imagePath\": \"assets/images/email.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Email Address\", \"rawPath\": [\"attributes\", \"emailaddress\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctEIN\",\r\n                              \"displayName\": \"EIN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/ein.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"EIN\", \"rawPath\": [\"attributes\", \"ein\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctITN\",\r\n                              \"displayName\": \"ITN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/itn.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"ITN\", \"rawPath\": [\"attributes\", \"itn\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]}\r\n            ]},\r\n            \"edge\": { \"parentRawPath\": [\"data\", \"1\", \"@@edgeSet\"],\r\n                      \"edgeSourceIdAttribute\": { \"key\": \"from_id\", \"displayName\": \"Source Node Id\", \"rawPath\": [\"from_id\"], \"tooltip\": true },\r\n                      \"edgeTargetIdAttribute\": { \"key\": \"to_id\", \"displayName\": \"Target Node Id\", \"rawPath\": [\"to_id\"], \"tooltip\": true },\r\n                      \"edgeTitleAttribute\": { \"key\": \"e_type\", \"displayName\": \"Type\", \"rawPath\": [\"e_type\"], \"tooltip\": true },\r\n                      \"edgeSourceIdAttributeKey\": \"from_id\",\r\n                      \"edgeTargetIdAttributeKey\": \"to_id\",\r\n                      \"edgeTitleAttributeKey\": \"e_type\",\r\n                      \"edgeAttributes\": [ { \"key\": \"e_type\", \"displayName\": \"Edge Type\", \"rawPath\": [\"e_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"from_id\", \"displayName\": \"Source Id\", \"rawPath\": [\"from_id\"], \"tooltip\": true },\r\n                                          { \"key\": \"from_type\", \"displayName\": \"Source Type\", \"rawPath\": [\"from_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"to_id\", \"displayName\": \"Target Id\", \"rawPath\": [\"to_id\"], \"tooltip\": true },\r\n                                          { \"key\": \"to_type\", \"displayName\": \"Target Type\", \"rawPath\": [\"to_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"directed\", \"displayName\": \"Directed\", \"rawPath\": [\"directed\"], \"tooltip\": true }]\r\n            }\r\n  }"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular12/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  \"status\": \"success\",\r\n  \"timestamp\": \"2021-05-23\",\r\n  \"data\": [\r\n    {\r\n      \"printSet\": [\r\n        {\r\n          \"v_id\": \"90098302633\",\r\n          \"v_type\": \"gfctEntity\",\r\n          \"attributes\": {\r\n            \"entityid\": \"90098302633\",\r\n            \"entitylabel\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"src\": \"CP\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"90098302744\",\r\n          \"v_type\": \"gfctEntity\",\r\n          \"attributes\": {\r\n            \"entityid\": \"90098302744\",\r\n            \"entitylabel\": \"SID TOMAR\",\r\n            \"src\": \"CP\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190803\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190803\",\r\n            \"partyfullname\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"ptyid\": \"10000637301\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n          \"v_type\": \"gfctAddress\",\r\n          \"attributes\": {\r\n            \"partyaddress\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n          \"v_type\": \"gfctAddress\",\r\n          \"attributes\": {\r\n            \"partyaddress\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"150347655\",\r\n          \"v_type\": \"gfctSSN\",\r\n          \"attributes\": {\r\n            \"ssn\": \"150347655\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"834527376\",\r\n          \"v_type\": \"gfctSSN\",\r\n          \"attributes\": {\r\n            \"ssn\": \"834527376\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"564738\",\r\n          \"v_type\": \"gfctEIN\",\r\n          \"attributes\": {\r\n            \"ein\": \"564738\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190804\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190804\",\r\n            \"partyfullname\": \"SURESH SADASIVAN NAIR\",\r\n            \"ptyid\": \"10000637302\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190805\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190805\",\r\n            \"partyfullname\": \"Manish Singhal\",\r\n            \"ptyid\": \"10000637303\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190704\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190704\",\r\n            \"partyfullname\": \"Saurabh Sharma\",\r\n            \"ptyid\": \"10000637704\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9137353861\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9137353861\",\r\n            \"accno\": \"4147342071409744\",\r\n            \"accnm\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-02-19\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500632\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500632\",\r\n            \"accno\": \"4147342080775721\",\r\n            \"accnm\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-02-19\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"7326402365\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"7326402365\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"7326738930\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"7326738930\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"5016402366\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"5016402366\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"ap@globallines.com\",\r\n          \"v_type\": \"gfctEmail\",\r\n          \"attributes\": {\r\n            \"emailaddress\": \"ap@globallines.com\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"unknown@whoami.com\",\r\n          \"v_type\": \"gfctEmail\",\r\n          \"attributes\": {\r\n            \"emailaddress\": \"unknown@whoami.com\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9137353862\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9137353862\",\r\n            \"accno\": \"4147342071409745\",\r\n            \"accnm\": \"SURESH SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-09-09\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500633\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500633\",\r\n            \"accno\": \"4147342080775722\",\r\n            \"accnm\": \"SURESH SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-05-29\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500044\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500044\",\r\n            \"accno\": \"4147342080770833\",\r\n            \"accnm\": \"SID TOMAR\",\r\n            \"accopendate\": \"2019-05-29\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"@@edgeSet\": [\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEntity\",\r\n          \"to_id\": \"90098302633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        // {\r\n        //   \"e_type\": \"contains\",\r\n        //   \"from_id\": \"90098302633\",\r\n        //   \"from_type\": \"gfctEntity\",\r\n        //   \"to_type\": \"gfctParty\",\r\n        //   \"to_id\": \"302190803\",\r\n        //   \"directed\": false,\r\n        //   \"attributes\": {}\r\n        // },\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"90098302744\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctParty\",\r\n          \"to_id\": \"302190704\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"90098302633\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctParty\",\r\n          \"to_id\": \"302190804\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"90098302633\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"unknown@whoami.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"unknown@whoami.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"7326738930\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9137353861\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500632\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_address\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAddress\",\r\n          \"to_id\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"150347655\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"834527376\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ein\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEIN\",\r\n          \"to_id\": \"564738\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"150347655\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_phone\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"7326402365\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_phone\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"5016402366\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"ap@globallines.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9137353862\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500044\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_address\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAddress\",\r\n          \"to_id\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190805\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
            },
            {
                "name": "dataLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "DEFAULT_LABEL_LENGTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "40"
            },
            {
                "name": "DEFAULT_LINK_OPACITY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "1"
            },
            {
                "name": "DEFAULT_MAX_NODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "150"
            },
            {
                "name": "DEFAULT_MAX_NODES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "150"
            },
            {
                "name": "DEFAULT_NODE_RADIUS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "20"
            },
            {
                "name": "DEFAULT_NUM_HOPS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DEFAULT_NUM_HOPS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "DEFAULT_WIDGET_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "720"
            },
            {
                "name": "DEFAULT_WIDGET_HEIGHT",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "720"
            },
            {
                "name": "DEFAULT_WIDGET_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2000"
            },
            {
                "name": "DEFAULT_WIDGET_WIDTH",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2000"
            },
            {
                "name": "defaultNwAttribute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwAttribute>",
                "defaultValue": "Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n})"
            },
            {
                "name": "defaultNwAttribute",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwAttribute>",
                "defaultValue": "Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n})"
            },
            {
                "name": "defaultNwConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwConfig>",
                "defaultValue": "Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n})"
            },
            {
                "name": "defaultNwConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwConfig>",
                "defaultValue": "Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n})"
            },
            {
                "name": "defaultNwEdgeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwEdge>",
                "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n})"
            },
            {
                "name": "defaultNwEdgeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwEdge>",
                "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n})"
            },
            {
                "name": "defaultNwNodeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwNode>",
                "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n})"
            },
            {
                "name": "defaultNwNodeConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Readonly<NwNode>",
                "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n})"
            },
            {
                "name": "EMPTY_STRING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"\""
            },
            {
                "name": "EMPTY_STRING",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"\""
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular12/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular12/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "getAppState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>(STORE_APP_SLICE_NAME)"
            },
            {
                "name": "getNetworkGraphState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, GraphState>",
                "defaultValue": "createFeatureSelector<GraphState>(STORE_GRAPH_SLICE_NAME)"
            },
            {
                "name": "getNetworkGraphState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, GraphState>",
                "defaultValue": "createFeatureSelector<GraphState>(STORE_GRAPH_SLICE_NAME)"
            },
            {
                "name": "httpOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
            },
            {
                "name": "INDEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "INDEX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n    activeTabCustomer360: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "State",
                "defaultValue": "{\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n}"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[logger]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "[logger]"
            },
            {
                "name": "metaReducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MetaReducer[]",
                "defaultValue": "!environment.production\r\n    ? [logger]\r\n    : []"
            },
            {
                "name": "nwGraphErrorName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"NwGraphError\""
            },
            {
                "name": "nwGraphErrorName",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"NwGraphError\""
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => ({\r\n  props: {\r\n    rootNodeId: nwRootNodeId,\r\n    dataLoading: nwDataLoading,\r\n    config: nwConfig,\r\n    data: nwData,\r\n    nodeCount: 0\r\n  },\r\n})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<any>",
                "defaultValue": "{\r\n    nwGraph: graphReducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<any>",
                "defaultValue": "{\r\n    nwGraph: graphReducer\r\n}"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ActionReducerMap<any>",
                "defaultValue": "{\r\n    app: appReducer\r\n}"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular12/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "rootNodeId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"90098302633\""
            },
            {
                "name": "selectActiveLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, number>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.activeLayout\r\n)"
            },
            {
                "name": "selectActiveLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, number>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.activeLayout\r\n)"
            },
            {
                "name": "selectActiveLayoutTransform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, TransformInfo>",
                "defaultValue": "createSelector(\r\n    selectActiveLayout,\r\n    selectLayoutTransform,\r\n    (activeLayout, layoutTransform) => {\r\n        return layoutTransform[activeLayout];\r\n    }\r\n)"
            },
            {
                "name": "selectActiveLayoutTransform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, TransformInfo>",
                "defaultValue": "createSelector(\r\n    selectActiveLayout,\r\n    selectLayoutTransform,\r\n    (activeLayout, layoutTransform) => {\r\n        return layoutTransform[activeLayout];\r\n    }\r\n)"
            },
            {
                "name": "selectActiveTabIndexCustomer360",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n    getAppState,\r\n    state => state.activeTabCustomer360\r\n)"
            },
            {
                "name": "selectAutoNetworkExpand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, state => state. autoNetworkExpand\r\n)"
            },
            {
                "name": "selectAutoNetworkExpand",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, state => state. autoNetworkExpand\r\n)"
            },
            {
                "name": "selectDirectLinked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, any>",
                "defaultValue": "createSelector(\r\n    selectRootNodeId, \r\n    selectGraphData, \r\n    (rootNodeId, graphData) => {\r\n        const nodes = graphData ? graphData.nodes: new Map<string, INode>(); \r\n        const edges = graphData ? graphData.edges: new Map<string, IEdge>(); \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n        \r\n        if(rootNodeId) {\r\n            const rootNode = nodes.get(rootNodeId); \r\n            if(rootNode && rootNode.collapsed) {\r\n                filteredNodes.set(rootNodeId, rootNode);\r\n            } else {\r\n                const queue = [rootNodeId]; \r\n                let current: string; \r\n                let currentNode: INode; \r\n                let neighborIds: string[];\r\n                \r\n                while (queue. length != 0) {\r\n                    current = queue.shift()!; \r\n                    if(current && nodes.has(current)) {\r\n                        currentNode = nodes.get(current)!; \r\n                        filteredNodes.set(current, currentNode); \r\n                        neighborIds = [...(currentNode.sourceIds as string[]), ...(currentNode. targetIds as string[])];\r\n                        for (var j = 0; j < neighborIds.length; j++) {\r\n                            const neighNode = nodes.get(neighborIds[j]); \r\n                            if (neighNode && neighNode.collapsed) {\r\n                                filteredNodes.set(neighborIds[j], nodes.get(neighborIds[j])!);\r\n                            } else { \r\n                                if (!filteredNodes.has(neighborIds[j])) {\r\n                                    queue.push(neighborIds[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let [key, value] of edges) { \r\n                if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                    filteredLinks.set(key, value);\r\n                }\r\n            }\r\n        }    \r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
            },
            {
                "name": "selectDirectLinked",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, any>",
                "defaultValue": "createSelector(\r\n    selectRootNodeId, \r\n    selectGraphData, \r\n    (rootNodeId, graphData) => {\r\n        const nodes = graphData ? graphData.nodes: new Map<string, INode>(); \r\n        const edges = graphData ? graphData.edges: new Map<string, IEdge>(); \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n        \r\n        if(rootNodeId) {\r\n            const rootNode = nodes.get(rootNodeId); \r\n            if(rootNode && rootNode.collapsed) {\r\n                filteredNodes.set(rootNodeId, rootNode);\r\n            } else {\r\n                const queue = [rootNodeId]; \r\n                let current: string; \r\n                let currentNode: INode; \r\n                let neighborIds: string[];\r\n                \r\n                while (queue. length != 0) {\r\n                    current = queue.shift()!; \r\n                    if(current && nodes.has(current)) {\r\n                        currentNode = nodes.get(current)!; \r\n                        filteredNodes.set(current, currentNode); \r\n                        neighborIds = [...(currentNode.sourceIds as string[]), ...(currentNode. targetIds as string[])];\r\n                        for (var j = 0; j < neighborIds.length; j++) {\r\n                            const neighNode = nodes.get(neighborIds[j]); \r\n                            if (neighNode && neighNode.collapsed) {\r\n                                filteredNodes.set(neighborIds[j], nodes.get(neighborIds[j])!);\r\n                            } else { \r\n                                if (!filteredNodes.has(neighborIds[j])) {\r\n                                    queue.push(neighborIds[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let [key, value] of edges) { \r\n                if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                    filteredLinks.set(key, value);\r\n                }\r\n            }\r\n        }    \r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
            },
            {
                "name": "selectDirectLinkedFilterByNodeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, any>",
                "defaultValue": "createSelector(\r\n    selectDirectLinked, \r\n    selectExcludedNodeTypes, \r\n    (directLinked, excludeNodeTypes) => {\r\n        const nodes = directLinked.nodes; \r\n        const edges = directLinked.edges; \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n\r\n        for(let [key, value] of nodes) { \r\n            if (excludeNodeTypes.indexOf(value.nodeType) === -1) {\r\n                filteredNodes.set(key, value);\r\n            }\r\n        }\r\n        for(let [key, value] of edges) {\r\n            if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                filteredLinks.set(key, value);\r\n            }\r\n        }\r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
            },
            {
                "name": "selectDirectLinkedFilterByNodeType",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, any>",
                "defaultValue": "createSelector(\r\n    selectDirectLinked, \r\n    selectExcludedNodeTypes, \r\n    (directLinked, excludeNodeTypes) => {\r\n        const nodes = directLinked.nodes; \r\n        const edges = directLinked.edges; \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n\r\n        for(let [key, value] of nodes) { \r\n            if (excludeNodeTypes.indexOf(value.nodeType) === -1) {\r\n                filteredNodes.set(key, value);\r\n            }\r\n        }\r\n        for(let [key, value] of edges) {\r\n            if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                filteredLinks.set(key, value);\r\n            }\r\n        }\r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
            },
            {
                "name": "selectExcludedNodeTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, string[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.excludedNodeTypes\r\n)"
            },
            {
                "name": "selectExcludedNodeTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, string[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.excludedNodeTypes\r\n)"
            },
            {
                "name": "selectGraphData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, INwData | null>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.data\r\n)"
            },
            {
                "name": "selectGraphData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, INwData | null>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.data\r\n)"
            },
            {
                "name": "selectIsHideLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.hideLabel\r\n)"
            },
            {
                "name": "selectIsHideLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.hideLabel\r\n)"
            },
            {
                "name": "selectLayoutTransform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, TransformInfo[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.layoutTransform\r\n)"
            },
            {
                "name": "selectLayoutTransform",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, TransformInfo[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.layoutTransform\r\n)"
            },
            {
                "name": "selectLogs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, GraphLog[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.logs\r\n)"
            },
            {
                "name": "selectLogs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, GraphLog[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.logs\r\n)"
            },
            {
                "name": "selectMaxNodesExceeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.maxNodesExceeded\r\n)"
            },
            {
                "name": "selectMaxNodesExceeded",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, boolean>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.maxNodesExceeded\r\n)"
            },
            {
                "name": "selectRootNodeId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, string | undefined>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.rootNodeId\r\n)"
            },
            {
                "name": "selectRootNodeId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, string | undefined>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.rootNodeId\r\n)"
            },
            {
                "name": "selectSelectedNodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, INode[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.selectedNodes\r\n)"
            },
            {
                "name": "selectSelectedNodes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "MemoizedSelector<object, INode[]>",
                "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.selectedNodes\r\n)"
            },
            {
                "name": "setcola",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{}"
            },
            {
                "name": "setcola",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any",
                "defaultValue": "{}"
            },
            {
                "name": "SOURCE_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "2"
            },
            {
                "name": "STORE_APP_SLICE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "apps/demo-angular5/src/app/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'app'"
            },
            {
                "name": "STORE_GRAPH_SLICE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"nwGraph\""
            },
            {
                "name": "STORE_GRAPH_SLICE_NAME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular5/src/app/store/state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "\"nwGraph\""
            },
            {
                "name": "TARGET_MARGIN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "5.5"
            }
        ],
        "functions": [
            {
                "name": "alignment",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>****************** Alignment Constraints *******************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "alignment",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>****************** Alignment Constraints *******************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "appReducer",
                "file": "apps/demo-angular5/src/app/store/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "calculateDegree",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "calculateDegree",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "calculateDepths",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "calculateDepths",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "centerArray",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "centerArray",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "T[]",
                "jsdoctags": [
                    {
                        "name": "arr",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "circle",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************** Circle Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "circle",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************** Circle Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cloneNwData",
                "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cloneNwData",
                "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "data",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cluster",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Cluster Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "cluster",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Cluster Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "CoLaAlignment",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>**************** Generate CoLa Constraints *****************</p>\n",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "offsets",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "offsets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "CoLaAlignment",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>**************** Generate CoLa Constraints *****************</p>\n",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "offsets",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "offsets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "CoLaPosition",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "CoLaPosition",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "left",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "right",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "axis",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "collectSet",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "collectSet",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeBuiltInProperties",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<hr>\n",
                "args": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeBuiltInProperties",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<hr>\n",
                "args": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeConstraints",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphNodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphLinks",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphGroups",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphNodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphLinks",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphGroups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeConstraints",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphNodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphLinks",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "graphGroups",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphNodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphLinks",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "graphGroups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeSets",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "computeSets",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sets",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "constraints",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "constraints",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraints",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "contains",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "contains",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "list",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "existingSet",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "existingSet",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exprSet",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "exprSet",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "index",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extractGraphLogFromError",
                "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GraphLog",
                "jsdoctags": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "extractGraphLogFromError",
                "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "GraphLog",
                "jsdoctags": [
                    {
                        "name": "err",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "gap",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "gap",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "gap",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateConstraints",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateConstraints",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateGuides",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "guide",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "guide",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateGuides",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "guide",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "guide",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateOrderFunc",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************** Order Constraints *********************</p>\n",
                "args": [
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateOrderFunc",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************** Order Constraints *********************</p>\n",
                "args": [
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateSets",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateSets",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "constraintDef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateUniqueId",
                "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "number"
            },
            {
                "name": "generateUniqueId",
                "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [],
                "returnType": "number"
            },
            {
                "name": "getDegree",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDegree",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDepth",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDepth",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEdges",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getEdges",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstChild",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getFirstChild",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getIncoming",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getIncoming",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNeighbors",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getNeighbors",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getOutgoing",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getOutgoing",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSources",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getSources",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTargets",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTargets",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "graphReducer",
                "file": "libs/nw-graph-angular/src/lib/store/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "graphReducer",
                "file": "libs/nw-graph-angular5/src/app/store/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "graphSources",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "graphSources",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "gridConstrainsts",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/grid.constraints.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "types",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "types",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "gridConstrainsts",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/grid.constraints.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "types",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "types",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groups",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "groups",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "groups",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "guides",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "guides",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "guides",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "guides",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "guides",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "guides",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hull",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>********************* Hull Constraints *********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "hull",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>********************* Hull Constraints *********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isArrayOfNonEmptyStrings",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isArrayOfNonEmptyStrings",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isStringNullorEmpty",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "isStringNullorEmpty",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "layout",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "layout",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "links",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "links",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<any>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<any>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "logger",
                "file": "apps/demo-angular5/src/app/store/reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ActionReducer<State>",
                "jsdoctags": [
                    {
                        "name": "reducer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nodes",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nodes",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "optional": true,
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nwToString",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "nwToString",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "value",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "onNumHopChange",
                "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "numHop",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "numHop",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderElements",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderElements",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderNodes",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderNodes",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderSets",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "orderSets",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "padding",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Padding Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "padding",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Padding Constraints ********************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "partitionSet",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "partitionSet",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "position",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Position Constraints *******************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "position",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>******************* Position Constraints *******************</p>\n",
                "args": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "elements",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "definition",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cid",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setID",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setID",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setLinkID",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "setLinkID",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "link",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "sets",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "sets",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            },
            {
                "name": "toBoolean",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toBoolean",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toPositiveInteger",
                "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "toPositiveInteger",
                "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "param",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "defaultValue",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "treeConstrainsts",
                "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/tree.constraints.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "linkDistance",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "treeConstrainsts",
                "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/tree.constraints.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "d3Cola",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "nodes",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "links",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SetActiveTab | ResetActiveTab",
                "file": "apps/demo-angular5/src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ExcludeNodeTypes | ExpandNode | ToggleLabel | CollapseNode | ResetGraph | ResetNodesPositions | SelectNode | SelectOnlyClickedNode | UnselectAllNodes | LoadExternalData | ExpandOnlyRootNode | ExpandAllNodes | ExpandNodesAfterLoad | CollapseAllNodes | ChangeActiveLayout | ToggleRender",
                "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Actions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ExcludeNodeTypes | ExpandNode | ToggleLabel | CollapseNode | ResetGraph | ResetNodesPositions | SelectNode | SelectOnlyClickedNode | UnselectAllNodes | LoadExternalData | ExpandOnlyRootNode | ChangeActiveLayout | ToggleRender",
                "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "EdgeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "EdgeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "NodeAttributeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "NodeAttributeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "NodeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            },
            {
                "name": "NodeId",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 190
            }
        ],
        "enumerations": [
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "SET_ACTIVE_TAB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[APP]SET_ACTIVE_TAB"
                    },
                    {
                        "name": "RESET_ACTIVE_TAB",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[APP]RESET_ACTIVE_TAB"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "apps/demo-angular5/src/app/store/actions.ts"
            },
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "EXCLUDE_NODE_TYPES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXCLUDE_NODE_TYPES"
                    },
                    {
                        "name": "EXPAND_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_NODE"
                    },
                    {
                        "name": "SELECT_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]SELECT_NODE"
                    },
                    {
                        "name": "SELECT_ONLY_CLICKED_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]SELECT_ONLY_CLICKED_NODE"
                    },
                    {
                        "name": "UNSELECT_ALL_NODES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]UNSELECT_ALL_NODES"
                    },
                    {
                        "name": "TOGGLE_LABEL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]TOGGLE_LABEL"
                    },
                    {
                        "name": "COLLAPSE_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]COLLAPSE_NODE"
                    },
                    {
                        "name": "RESET_GRAPH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]RESET_GRAPH"
                    },
                    {
                        "name": "RESET_NODES_POSITIONS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]RESET_NODES_POSITIONS"
                    },
                    {
                        "name": "LOAD_EXTERNAL_DATA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]LOAD_EXTERNAL_DATA"
                    },
                    {
                        "name": "EXPAND_ONLY_ROOT_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_ONLY_ROOT_NODE"
                    },
                    {
                        "name": "EXPAND_ALL_NODES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_ALL_NODES"
                    },
                    {
                        "name": "EXPAND_NODES_AFTER_LOAD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_NODES_AFTER_LOAD"
                    },
                    {
                        "name": "COLLAPSE_ALL_NODES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]COLLAPSE_ALL_NODES"
                    },
                    {
                        "name": "CHANGE_ACTIVE_LAYOUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]CHANGE_ACTIVE_LAYOUT"
                    },
                    {
                        "name": "TOGGLE_RENDER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]TOGGLE_RENDER"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular/src/lib/store/actions.ts"
            },
            {
                "name": "ActionTypes",
                "childs": [
                    {
                        "name": "EXCLUDE_NODE_TYPES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXCLUDE_NODE_TYPES"
                    },
                    {
                        "name": "EXPAND_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_NODE"
                    },
                    {
                        "name": "SELECT_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]SELECT_NODE"
                    },
                    {
                        "name": "SELECT_ONLY_CLICKED_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]SELECT_ONLY_CLICKED_NODE"
                    },
                    {
                        "name": "UNSELECT_ALL_NODES",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]UNSELECT_ALL_NODES"
                    },
                    {
                        "name": "TOGGLE_LABEL",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]TOGGLE_LABEL"
                    },
                    {
                        "name": "COLLAPSE_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]COLLAPSE_NODE"
                    },
                    {
                        "name": "RESET_GRAPH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]RESET_GRAPH"
                    },
                    {
                        "name": "RESET_NODES_POSITIONS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]RESET_NODES_POSITIONS"
                    },
                    {
                        "name": "LOAD_EXTERNAL_DATA",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]LOAD_EXTERNAL_DATA"
                    },
                    {
                        "name": "EXPAND_ONLY_ROOT_NODE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]EXPAND_ONLY_ROOT_NODE"
                    },
                    {
                        "name": "CHANGE_ACTIVE_LAYOUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]CHANGE_ACTIVE_LAYOUT"
                    },
                    {
                        "name": "TOGGLE_RENDER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "[NW]TOGGLE_RENDER"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular5/src/app/store/actions.ts"
            },
            {
                "name": "GraphLogErrorSeverity",
                "childs": [
                    {
                        "name": "Low",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "High",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "Critical",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts"
            },
            {
                "name": "GraphLogErrorSeverity",
                "childs": [
                    {
                        "name": "Low",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "Medium",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "High",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "Critical",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts"
            },
            {
                "name": "GraphLogType",
                "childs": [
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "RetryableError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts"
            },
            {
                "name": "GraphLogType",
                "childs": [
                    {
                        "name": "Info",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "0"
                    },
                    {
                        "name": "Warning",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "Error",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "2"
                    },
                    {
                        "name": "RetryableError",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "3"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts"
            },
            {
                "name": "IdTypes",
                "childs": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "entity",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "party",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular/src/lib/models/node-request.ts"
            },
            {
                "name": "IdTypes",
                "childs": [
                    {
                        "name": "node",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "1"
                    },
                    {
                        "name": "entity",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "party",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular5/src/app/models/node-request.ts"
            },
            {
                "name": "NeighboursStateType",
                "childs": [
                    {
                        "name": "NOT_LOADED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING_THEN_EXPAND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING_FAILED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts"
            },
            {
                "name": "NeighboursStateType",
                "childs": [
                    {
                        "name": "NOT_LOADED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING_THEN_EXPAND",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADING_FAILED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "LOADED",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts"
            }
        ],
        "groupedVariables": {
            "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts": [
                {
                    "name": "_graphNodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "_nodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "_sets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "INDEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "setcola",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{}"
                }
            ],
            "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts": [
                {
                    "name": "_graphNodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "_nodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "_sets",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "INDEX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                },
                {
                    "name": "setcola",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "defaultValue": "{}"
                }
            ],
            "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts": [
                {
                    "name": "ALL_NOTIFICATION_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message))"
                }
            ],
            "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts": [
                {
                    "name": "ALL_NOTIFICATION_MESSAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "[\r\n    { name: 'max_nodes_exceeded', message: \"Max Nodes Exceeded. It might affect the performance.\" }\r\n ].map((anm) => new Notification(anm.name, anm.message))"
                }
            ],
            "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts": [
                {
                    "name": "AppConstants",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    user_object: 'user_object',\r\n    access_token: 'access_token'\r\n}"
                },
                {
                    "name": "httpOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n}"
                }
            ],
            "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n    \"maxSelectedNodes\": 100,\r\n    \"displayLabel\": true,\r\n    \"autoExpand\": false,\r\n    \"processNodeWithUnknownNodeType\": true,\r\n    \"numHops\": 2,\r\n    \"maxNodeCount\": 5,\r\n    \"viewportHeight\": 700,\r\n    \"nodeRadius\": 20,\r\n    \"rootNodeRadius\": 27,\r\n    \"node\": { \"parentRawPath\": [\"data\", \"0\", \"printSet\"],\r\n              \"nodeIdAttributeKey\": \"v_id\",\r\n              \"nodeTypeAttributeKey\": \"v_type\",\r\n              \"nodeTitleAttributeKey\": \"label\",\r\n              \"nodeTypes\": [{ \"name\": \"gfctEntity\",\r\n                              \"displayName\": \"Entity\",\r\n                              \"color\": \"#80B9E7\",\r\n                              \"imagePath\": \"assets/images/entity.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"entitylabel\", \"displayName\": \"Entity Label\", \"rawPath\": [\"attributes\", \"entitylabel\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Entity Label\", \"rawPath\": [\"attributes\", \"entitylabel\"], \"tooltip\": true },\r\n                                                  { \"key\": \"entityid\", \"displayName\": \"Entity Id\", \"rawPath\": [\"attributes\", \"entityid\"], \"tooltip\": true },\r\n                                                  { \"key\": \"src\", \"displayName\": \"Source\", \"rawPath\": [\"attributes\", \"src\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctParty\",\r\n                            \"displayName\": \"Party\",\r\n                            \"color\": \"#CCEBF8\",\r\n                            \"imagePath\": \"assets/images/party.png\",\r\n                            \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true }, \r\n                                                { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                { \"key\": \"label\", \"displayName\": \"Party Full Name\", \"rawPath\": [\"attributes\", \"partyfullname\"], \"tooltip\": true },\r\n                                                { \"key\": \"amlptyId\", \"displayName\": \"AML Party Id\", \"rawPath\": [\"attributes\", \"amlptyId\"], \"tooltip\": true },\r\n                                                { \"key\": \"ptyid\", \"displayName\": \"Party Id\", \"rawPath\": [\"attributes\", \"ptyid\"], \"tooltip\": true },\r\n                                                { \"key\": \"gcino\", \"displayName\": \"GCI Number\", \"rawPath\": [\"attributes\", \"gcino\"], \"tooltip\": true },\r\n                                                { \"key\": \"mlid\", \"displayName\": \"ML Id\", \"rawPath\": [\"attributes\", \"mlid\"], \"tooltip\": true },\r\n                                                { \"key\": \"itn\", \"displayName\": \"ITN\", \"rawPath\": [\"attributes\", \"itn\"], \"tooltip\": true },\r\n                                                { \"key\": \"ssn\", \"displayName\": \"SSN\", \"rawPath\": [\"attributes\", \"ssn\"], \"tooltip\": true },\r\n                                                { \"key\": \"ein\", \"displayName\": \"EIN\", \"rawPath\": [\"attributes\", \"ein\"], \"tooltip\": true },\r\n                                                { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                { \"key\": \"scorecat\", \"displayName\": \"scorecat\", \"rawPath\": [\"attributes\", \"scorecat\"], \"tooltip\": true },\r\n                                                { \"key\": \"prdcd\", \"displayName\": \"prdcd\", \"rawPath\": [\"attributes\", \"prdcd\"], \"tooltip\": true },\r\n                                                { \"key\": \"naicscd\", \"displayName\": \"naicscd\", \"rawPath\": [\"attributes\", \"naicscd\"], \"tooltip\": true },\r\n                                                { \"key\": \"naicsde\", \"displayName\": \"naicsde\", \"rawPath\": [\"attributes\", \"naicsde\"], \"tooltip\": true },\r\n                                                { \"key\": \"ptytypcd\", \"displayName\": \"ptytypcd\", \"rawPath\": [\"attributes\", \"ptytypcd\"], \"tooltip\": true },\r\n                                                { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctAccount\",\r\n                              \"displayName\": \"Account\",\r\n                              \"color\": \"#93CF80\",\r\n                              \"imagePath\": \"assets/images/account.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Account Number\", \"rawPath\": [\"attributes\", \"accno\"], \"tooltip\": true },\r\n                                                  { \"key\": \"amlaccid\", \"displayName\": \"AML Account Id\", \"rawPath\": [\"attributes\", \"amlaccid\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accnm\", \"displayName\": \"Account Name\", \"rawPath\": [\"attributes\", \"accnm\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accopendate\", \"displayName\": \"Account Open Date\", \"rawPath\": [\"attributes\", \"accopendate\"], \"tooltip\": true },\r\n                                                  { \"key\": \"accptyrolecd\", \"displayName\": \"Account Party Role Code\", \"rawPath\": [\"attributes\", \"accptyrolecd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true }, \r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctAddress\",\r\n                            \"displayName\": \"Address\",\r\n                            \"color\": \"#AF90B3\",\r\n                            \"imagePath\": \"assets/images/address.png\",\r\n                            \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                { \"key\": \"label\", \"displayName\": \"Party Address\", \"rawPath\": [\"attributes\", \"partyaddress\"], \"tooltip\": true },\r\n                                                { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctSSN\",\r\n                              \"displayName\": \"SSN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/ssn.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"SSN\", \"rawPath\": [\"attributes\", \"ssn\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctPhone\",\r\n                              \"displayName\": \"Phone\",\r\n                              \"color\": \"#66CDBD\",\r\n                              \"imagePath\": \"assets/images/phone.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Phone Number\", \"rawPath\": [\"attributes\", \"phonenumber\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctEmail\",\r\n                              \"displayName\": \"Email\",\r\n                              \"color\": \"#EA7600\",\r\n                              \"imagePath\": \"assets/images/email.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"Email Address\", \"rawPath\": [\"attributes\", \"emailaddress\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctEIN\",\r\n                              \"displayName\": \"EIN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/ein.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"EIN\", \"rawPath\": [\"attributes\", \"ein\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]},\r\n                            { \"name\": \"gfctITN\",\r\n                              \"displayName\": \"ITN\",\r\n                              \"color\": \"#F8D480\",\r\n                              \"imagePath\": \"assets/images/itn.png\",\r\n                              \"nodeAttributes\": [ { \"key\": \"v_id\", \"displayName\": \"Node ID\", \"rawPath\": [\"v_id\"], \"tooltip\": true },\r\n                                                  { \"key\": \"v_type\", \"displayName\": \"Node Type\", \"rawPath\": [\"v_type\"], \"tooltip\": true },\r\n                                                  { \"key\": \"label\", \"displayName\": \"ITN\", \"rawPath\": [\"attributes\", \"itn\"], \"tooltip\": true },\r\n                                                  { \"key\": \"flucd\", \"displayName\": \"FLU Code\", \"rawPath\": [\"attributes\", \"flucd\"], \"tooltip\": true },\r\n                                                  { \"key\": \"fludescription\", \"displayName\": \"FLU Description\", \"rawPath\": [\"attributes\", \"fludescription\"], \"tooltip\": true },\r\n                                                  { \"key\": \"isskewed\", \"displayName\": \"isskewed\", \"rawPath\": [\"attributes\", \"isskewed\"], \"tooltip\": true },\r\n                                                  { \"key\": \"@visited\", \"displayName\": \"@visited\", \"rawPath\": [\"attributes\", \"@visited\"], \"tooltip\": true } ]}\r\n            ]},\r\n            \"edge\": { \"parentRawPath\": [\"data\", \"1\", \"@@edgeSet\"],\r\n                      \"edgeSourceIdAttribute\": { \"key\": \"from_id\", \"displayName\": \"Source Node Id\", \"rawPath\": [\"from_id\"], \"tooltip\": true },\r\n                      \"edgeTargetIdAttribute\": { \"key\": \"to_id\", \"displayName\": \"Target Node Id\", \"rawPath\": [\"to_id\"], \"tooltip\": true },\r\n                      \"edgeTitleAttribute\": { \"key\": \"e_type\", \"displayName\": \"Type\", \"rawPath\": [\"e_type\"], \"tooltip\": true },\r\n                      \"edgeSourceIdAttributeKey\": \"from_id\",\r\n                      \"edgeTargetIdAttributeKey\": \"to_id\",\r\n                      \"edgeTitleAttributeKey\": \"e_type\",\r\n                      \"edgeAttributes\": [ { \"key\": \"e_type\", \"displayName\": \"Edge Type\", \"rawPath\": [\"e_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"from_id\", \"displayName\": \"Source Id\", \"rawPath\": [\"from_id\"], \"tooltip\": true },\r\n                                          { \"key\": \"from_type\", \"displayName\": \"Source Type\", \"rawPath\": [\"from_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"to_id\", \"displayName\": \"Target Id\", \"rawPath\": [\"to_id\"], \"tooltip\": true },\r\n                                          { \"key\": \"to_type\", \"displayName\": \"Target Type\", \"rawPath\": [\"to_type\"], \"tooltip\": true },\r\n                                          { \"key\": \"directed\", \"displayName\": \"Directed\", \"rawPath\": [\"directed\"], \"tooltip\": true }]\r\n            }\r\n  }"
                },
                {
                    "name": "data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  \"status\": \"success\",\r\n  \"timestamp\": \"2021-05-23\",\r\n  \"data\": [\r\n    {\r\n      \"printSet\": [\r\n        {\r\n          \"v_id\": \"90098302633\",\r\n          \"v_type\": \"gfctEntity\",\r\n          \"attributes\": {\r\n            \"entityid\": \"90098302633\",\r\n            \"entitylabel\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"src\": \"CP\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"90098302744\",\r\n          \"v_type\": \"gfctEntity\",\r\n          \"attributes\": {\r\n            \"entityid\": \"90098302744\",\r\n            \"entitylabel\": \"SID TOMAR\",\r\n            \"src\": \"CP\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190803\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190803\",\r\n            \"partyfullname\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"ptyid\": \"10000637301\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n          \"v_type\": \"gfctAddress\",\r\n          \"attributes\": {\r\n            \"partyaddress\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n          \"v_type\": \"gfctAddress\",\r\n          \"attributes\": {\r\n            \"partyaddress\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"150347655\",\r\n          \"v_type\": \"gfctSSN\",\r\n          \"attributes\": {\r\n            \"ssn\": \"150347655\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"834527376\",\r\n          \"v_type\": \"gfctSSN\",\r\n          \"attributes\": {\r\n            \"ssn\": \"834527376\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"564738\",\r\n          \"v_type\": \"gfctEIN\",\r\n          \"attributes\": {\r\n            \"ein\": \"564738\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190804\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190804\",\r\n            \"partyfullname\": \"SURESH SADASIVAN NAIR\",\r\n            \"ptyid\": \"10000637302\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190805\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190805\",\r\n            \"partyfullname\": \"Manish Singhal\",\r\n            \"ptyid\": \"10000637303\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"302190704\",\r\n          \"v_type\": \"gfctParty\",\r\n          \"attributes\": {\r\n            \"amlptyId\": \"302190704\",\r\n            \"partyfullname\": \"Saurabh Sharma\",\r\n            \"ptyid\": \"10000637704\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9137353861\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9137353861\",\r\n            \"accno\": \"4147342071409744\",\r\n            \"accnm\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-02-19\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500632\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500632\",\r\n            \"accno\": \"4147342080775721\",\r\n            \"accnm\": \"SURESH KUMAR SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-02-19\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"7326402365\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"7326402365\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"7326738930\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"7326738930\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"5016402366\",\r\n          \"v_type\": \"gfctPhone\",\r\n          \"attributes\": {\r\n            \"phonenumber\": \"5016402366\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"ap@globallines.com\",\r\n          \"v_type\": \"gfctEmail\",\r\n          \"attributes\": {\r\n            \"emailaddress\": \"ap@globallines.com\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"unknown@whoami.com\",\r\n          \"v_type\": \"gfctEmail\",\r\n          \"attributes\": {\r\n            \"emailaddress\": \"unknown@whoami.com\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9137353862\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9137353862\",\r\n            \"accno\": \"4147342071409745\",\r\n            \"accnm\": \"SURESH SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-09-09\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500633\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500633\",\r\n            \"accno\": \"4147342080775722\",\r\n            \"accnm\": \"SURESH SADASIVAN NAIR\",\r\n            \"accopendate\": \"2019-05-29\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        },\r\n        {\r\n          \"v_id\": \"9063500044\",\r\n          \"v_type\": \"gfctAccount\",\r\n          \"attributes\": {\r\n            \"amlaccid\": \"9063500044\",\r\n            \"accno\": \"4147342080770833\",\r\n            \"accnm\": \"SID TOMAR\",\r\n            \"accopendate\": \"2019-05-29\",\r\n            \"accptyrolecd\": \"BOR\",\r\n            \"flucd\": \"CNS_RTL_BNK\",\r\n            \"fludescription\": \"Consumer Retail Banking\",\r\n            \"isskewed\": \"false\",\r\n            \"@visited\": true\r\n          }\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      \"@@edgeSet\": [\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEntity\",\r\n          \"to_id\": \"90098302633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        // {\r\n        //   \"e_type\": \"contains\",\r\n        //   \"from_id\": \"90098302633\",\r\n        //   \"from_type\": \"gfctEntity\",\r\n        //   \"to_type\": \"gfctParty\",\r\n        //   \"to_id\": \"302190803\",\r\n        //   \"directed\": false,\r\n        //   \"attributes\": {}\r\n        // },\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"90098302744\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctParty\",\r\n          \"to_id\": \"302190704\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"contains\",\r\n          \"from_id\": \"90098302633\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctParty\",\r\n          \"to_id\": \"302190804\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"90098302633\",\r\n          \"from_type\": \"gfctEntity\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"unknown@whoami.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"unknown@whoami.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"7326738930\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9137353861\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500632\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_address\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAddress\",\r\n          \"to_id\": \"140 ETHEL RD W STE S 08854, PISCATAWAY, NJ, US\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"150347655\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"834527376\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ein\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEIN\",\r\n          \"to_id\": \"564738\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_ssn\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctSSN\",\r\n          \"to_id\": \"150347655\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_phone\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"7326402365\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_phone\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctPhone\",\r\n          \"to_id\": \"5016402366\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_email\",\r\n          \"from_id\": \"302190803\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctEmail\",\r\n          \"to_id\": \"ap@globallines.com\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9137353862\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190804\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500044\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_address\",\r\n          \"from_id\": \"302190704\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAddress\",\r\n          \"to_id\": \"140 LINCKON ST 08821, FREEHOLD, NJ, US\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        },\r\n        {\r\n          \"e_type\": \"has_acct\",\r\n          \"from_id\": \"302190805\",\r\n          \"from_type\": \"gfctParty\",\r\n          \"to_type\": \"gfctAccount\",\r\n          \"to_id\": \"9063500633\",\r\n          \"directed\": false,\r\n          \"attributes\": {}\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                },
                {
                    "name": "dataLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "rootNodeId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"90098302633\""
                }
            ],
            "apps/demo-angular12/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular12/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular12/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "libs/nw-graph-angular5/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "libs/nw-graph-angular/src/lib/components/link/link.component.ts": [
                {
                    "name": "DEFAULT_LABEL_LENGTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "40"
                },
                {
                    "name": "DEFAULT_LINK_OPACITY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "1"
                },
                {
                    "name": "DEFAULT_NODE_RADIUS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "20"
                },
                {
                    "name": "SOURCE_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "TARGET_MARGIN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "5.5"
                }
            ],
            "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts": [
                {
                    "name": "DEFAULT_MAX_NODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "150"
                },
                {
                    "name": "DEFAULT_NUM_HOPS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "DEFAULT_WIDGET_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "720"
                },
                {
                    "name": "DEFAULT_WIDGET_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2000"
                }
            ],
            "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts": [
                {
                    "name": "DEFAULT_MAX_NODES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "150"
                },
                {
                    "name": "DEFAULT_NUM_HOPS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2"
                },
                {
                    "name": "DEFAULT_WIDGET_HEIGHT",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "720"
                },
                {
                    "name": "DEFAULT_WIDGET_WIDTH",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "2000"
                }
            ],
            "libs/nw-graph-angular/src/lib/models/nw-config.ts": [
                {
                    "name": "defaultNwAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwAttribute>",
                    "defaultValue": "Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n})"
                },
                {
                    "name": "defaultNwConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwConfig>",
                    "defaultValue": "Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n})"
                },
                {
                    "name": "defaultNwEdgeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwEdge>",
                    "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n})"
                },
                {
                    "name": "defaultNwNodeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwNode>",
                    "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n})"
                }
            ],
            "libs/nw-graph-angular5/src/app/models/nw-config.ts": [
                {
                    "name": "defaultNwAttribute",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwAttribute>",
                    "defaultValue": "Object.freeze({ \r\n    key: EMPTY_STRING, \r\n    displayName: EMPTY_STRING, \r\n    rawPath: undefined, \r\n    tooltip: false\r\n})"
                },
                {
                    "name": "defaultNwConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwConfig>",
                    "defaultValue": "Object.freeze({\r\n    maxSelectedNodes: 2, \r\n    displayLabel: true, \r\n    autoExpand: false, \r\n    numHops: 2, \r\n    maxNodeCount: 200, \r\n    viewportHeight: 700, \r\n    nodeRadius: 20, \r\n    node: null, \r\n    edge: null\r\n})"
                },
                {
                    "name": "defaultNwEdgeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwEdge>",
                    "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    edgeSourceIdAttribute: null, \r\n    edgeTargetIdAttribute: null, \r\n    edgeTitleAttribute: null, \r\n    edgeAttributes: []\r\n})"
                },
                {
                    "name": "defaultNwNodeConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Readonly<NwNode>",
                    "defaultValue": "Object.freeze({\r\n    parentRawPath: [], \r\n    nodeIdAttribute: null, \r\n    nodeTypeAttribute: null, \r\n    nodeTitleAttribute: null, \r\n    nodeTypes: [] \r\n})"
                }
            ],
            "libs/nw-graph-angular/src/lib/utils/index.ts": [
                {
                    "name": "EMPTY_STRING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"\""
                }
            ],
            "libs/nw-graph-angular5/src/app/utils/index.ts": [
                {
                    "name": "EMPTY_STRING",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"\""
                }
            ],
            "apps/demo-angular12/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular12/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "apps/demo-angular12/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular12/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "apps/demo-angular5/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "apps/demo-angular5/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "libs/nw-graph-angular5/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "libs/nw-graph-angular5/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "apps/demo-angular5/src/app/store/selectors.ts": [
                {
                    "name": "getAppState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>(STORE_APP_SLICE_NAME)"
                },
                {
                    "name": "selectActiveTabIndexCustomer360",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n    getAppState,\r\n    state => state.activeTabCustomer360\r\n)"
                }
            ],
            "libs/nw-graph-angular/src/lib/store/selectors.ts": [
                {
                    "name": "getNetworkGraphState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, GraphState>",
                    "defaultValue": "createFeatureSelector<GraphState>(STORE_GRAPH_SLICE_NAME)"
                },
                {
                    "name": "selectActiveLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, number>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.activeLayout\r\n)"
                },
                {
                    "name": "selectActiveLayoutTransform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, TransformInfo>",
                    "defaultValue": "createSelector(\r\n    selectActiveLayout,\r\n    selectLayoutTransform,\r\n    (activeLayout, layoutTransform) => {\r\n        return layoutTransform[activeLayout];\r\n    }\r\n)"
                },
                {
                    "name": "selectAutoNetworkExpand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, state => state. autoNetworkExpand\r\n)"
                },
                {
                    "name": "selectDirectLinked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, any>",
                    "defaultValue": "createSelector(\r\n    selectRootNodeId, \r\n    selectGraphData, \r\n    (rootNodeId, graphData) => {\r\n        const nodes = graphData ? graphData.nodes: new Map<string, INode>(); \r\n        const edges = graphData ? graphData.edges: new Map<string, IEdge>(); \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n        \r\n        if(rootNodeId) {\r\n            const rootNode = nodes.get(rootNodeId); \r\n            if(rootNode && rootNode.collapsed) {\r\n                filteredNodes.set(rootNodeId, rootNode);\r\n            } else {\r\n                const queue = [rootNodeId]; \r\n                let current: string; \r\n                let currentNode: INode; \r\n                let neighborIds: string[];\r\n                \r\n                while (queue. length != 0) {\r\n                    current = queue.shift()!; \r\n                    if(current && nodes.has(current)) {\r\n                        currentNode = nodes.get(current)!; \r\n                        filteredNodes.set(current, currentNode); \r\n                        neighborIds = [...(currentNode.sourceIds as string[]), ...(currentNode. targetIds as string[])];\r\n                        for (var j = 0; j < neighborIds.length; j++) {\r\n                            const neighNode = nodes.get(neighborIds[j]); \r\n                            if (neighNode && neighNode.collapsed) {\r\n                                filteredNodes.set(neighborIds[j], nodes.get(neighborIds[j])!);\r\n                            } else { \r\n                                if (!filteredNodes.has(neighborIds[j])) {\r\n                                    queue.push(neighborIds[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let [key, value] of edges) { \r\n                if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                    filteredLinks.set(key, value);\r\n                }\r\n            }\r\n        }    \r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
                },
                {
                    "name": "selectDirectLinkedFilterByNodeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, any>",
                    "defaultValue": "createSelector(\r\n    selectDirectLinked, \r\n    selectExcludedNodeTypes, \r\n    (directLinked, excludeNodeTypes) => {\r\n        const nodes = directLinked.nodes; \r\n        const edges = directLinked.edges; \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n\r\n        for(let [key, value] of nodes) { \r\n            if (excludeNodeTypes.indexOf(value.nodeType) === -1) {\r\n                filteredNodes.set(key, value);\r\n            }\r\n        }\r\n        for(let [key, value] of edges) {\r\n            if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                filteredLinks.set(key, value);\r\n            }\r\n        }\r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
                },
                {
                    "name": "selectExcludedNodeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, string[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.excludedNodeTypes\r\n)"
                },
                {
                    "name": "selectGraphData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, INwData | null>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.data\r\n)"
                },
                {
                    "name": "selectIsHideLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.hideLabel\r\n)"
                },
                {
                    "name": "selectLayoutTransform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, TransformInfo[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.layoutTransform\r\n)"
                },
                {
                    "name": "selectLogs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, GraphLog[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.logs\r\n)"
                },
                {
                    "name": "selectMaxNodesExceeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.maxNodesExceeded\r\n)"
                },
                {
                    "name": "selectRootNodeId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, string | undefined>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.rootNodeId\r\n)"
                },
                {
                    "name": "selectSelectedNodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, INode[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.selectedNodes\r\n)"
                }
            ],
            "libs/nw-graph-angular5/src/app/store/selectors.ts": [
                {
                    "name": "getNetworkGraphState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, GraphState>",
                    "defaultValue": "createFeatureSelector<GraphState>(STORE_GRAPH_SLICE_NAME)"
                },
                {
                    "name": "selectActiveLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, number>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.activeLayout\r\n)"
                },
                {
                    "name": "selectActiveLayoutTransform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, TransformInfo>",
                    "defaultValue": "createSelector(\r\n    selectActiveLayout,\r\n    selectLayoutTransform,\r\n    (activeLayout, layoutTransform) => {\r\n        return layoutTransform[activeLayout];\r\n    }\r\n)"
                },
                {
                    "name": "selectAutoNetworkExpand",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, state => state. autoNetworkExpand\r\n)"
                },
                {
                    "name": "selectDirectLinked",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, any>",
                    "defaultValue": "createSelector(\r\n    selectRootNodeId, \r\n    selectGraphData, \r\n    (rootNodeId, graphData) => {\r\n        const nodes = graphData ? graphData.nodes: new Map<string, INode>(); \r\n        const edges = graphData ? graphData.edges: new Map<string, IEdge>(); \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n        \r\n        if(rootNodeId) {\r\n            const rootNode = nodes.get(rootNodeId); \r\n            if(rootNode && rootNode.collapsed) {\r\n                filteredNodes.set(rootNodeId, rootNode);\r\n            } else {\r\n                const queue = [rootNodeId]; \r\n                let current: string; \r\n                let currentNode: INode; \r\n                let neighborIds: string[];\r\n                \r\n                while (queue. length != 0) {\r\n                    current = queue.shift()!; \r\n                    if(current && nodes.has(current)) {\r\n                        currentNode = nodes.get(current)!; \r\n                        filteredNodes.set(current, currentNode); \r\n                        neighborIds = [...(currentNode.sourceIds as string[]), ...(currentNode. targetIds as string[])];\r\n                        for (var j = 0; j < neighborIds.length; j++) {\r\n                            const neighNode = nodes.get(neighborIds[j]); \r\n                            if (neighNode && neighNode.collapsed) {\r\n                                filteredNodes.set(neighborIds[j], nodes.get(neighborIds[j])!);\r\n                            } else { \r\n                                if (!filteredNodes.has(neighborIds[j])) {\r\n                                    queue.push(neighborIds[j]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for(let [key, value] of edges) { \r\n                if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                    filteredLinks.set(key, value);\r\n                }\r\n            }\r\n        }    \r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
                },
                {
                    "name": "selectDirectLinkedFilterByNodeType",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, any>",
                    "defaultValue": "createSelector(\r\n    selectDirectLinked, \r\n    selectExcludedNodeTypes, \r\n    (directLinked, excludeNodeTypes) => {\r\n        const nodes = directLinked.nodes; \r\n        const edges = directLinked.edges; \r\n        const filteredNodes = new Map<string, INode>(); \r\n        const filteredLinks = new Map<string, IEdge>();\r\n\r\n        for(let [key, value] of nodes) { \r\n            if (excludeNodeTypes.indexOf(value.nodeType) === -1) {\r\n                filteredNodes.set(key, value);\r\n            }\r\n        }\r\n        for(let [key, value] of edges) {\r\n            if(filteredNodes.has(value.sourceNodeId) && filteredNodes.has(value.targetNodeId)) {\r\n                filteredLinks.set(key, value);\r\n            }\r\n        }\r\n        /**Node Type Filter */ \r\n        return { nodes: filteredNodes, edges: filteredLinks};\r\n    }\r\n)"
                },
                {
                    "name": "selectExcludedNodeTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, string[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.excludedNodeTypes\r\n)"
                },
                {
                    "name": "selectGraphData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, INwData | null>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.data\r\n)"
                },
                {
                    "name": "selectIsHideLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.hideLabel\r\n)"
                },
                {
                    "name": "selectLayoutTransform",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, TransformInfo[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.layoutTransform\r\n)"
                },
                {
                    "name": "selectLogs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, GraphLog[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.logs\r\n)"
                },
                {
                    "name": "selectMaxNodesExceeded",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, boolean>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.maxNodesExceeded\r\n)"
                },
                {
                    "name": "selectRootNodeId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, string | undefined>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.rootNodeId\r\n)"
                },
                {
                    "name": "selectSelectedNodes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MemoizedSelector<object, INode[]>",
                    "defaultValue": "createSelector(\r\n    getNetworkGraphState, \r\n    state => state.selectedNodes\r\n)"
                }
            ],
            "apps/demo-angular5/src/app/store/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n    activeTabCustomer360: null\r\n}"
                },
                {
                    "name": "STORE_APP_SLICE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'app'"
                }
            ],
            "libs/nw-graph-angular/src/lib/store/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n}"
                },
                {
                    "name": "STORE_GRAPH_SLICE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"nwGraph\""
                }
            ],
            "libs/nw-graph-angular5/src/app/store/state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "State",
                    "defaultValue": "{\r\n    data: null,\r\n    nodeTypes: [],\r\n    autoNetworkExpand: true, \r\n    selectedNodes: [], \r\n    rootNodeId: undefined, \r\n    excludedNodeTypes: [], \r\n    hideLabel: true,\r\n    logs: [], \r\n    maxNodesExceeded: false,\r\n    activeLayout: 0,\r\n    layouts: [{ nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}, \r\n                    { nodes: new Map<NodeId, INode>(), edges: new Map<EdgeId, IEdge>()}],\r\n    layoutTransform: [{x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}, {x: 0, y: 0, k: 1}],\r\n    hasLayoutLoaded: [false, false, false],\r\n    enableRender: true\r\n}"
                },
                {
                    "name": "STORE_GRAPH_SLICE_NAME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/store/state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"nwGraph\""
                }
            ],
            "libs/nw-graph-angular/src/lib/root-state.module.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[logger]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<any>",
                    "defaultValue": "{\r\n    nwGraph: graphReducer\r\n}"
                }
            ],
            "libs/nw-graph-angular5/src/app/root-state.module.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "[logger]"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<any>",
                    "defaultValue": "{\r\n    nwGraph: graphReducer\r\n}"
                }
            ],
            "apps/demo-angular5/src/app/store/reducer.ts": [
                {
                    "name": "metaReducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaReducer[]",
                    "defaultValue": "!environment.production\r\n    ? [logger]\r\n    : []"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "apps/demo-angular5/src/app/store/reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActionReducerMap<any>",
                    "defaultValue": "{\r\n    app: appReducer\r\n}"
                }
            ],
            "libs/nw-graph-angular/src/lib/models/graph-log.ts": [
                {
                    "name": "nwGraphErrorName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"NwGraphError\""
                }
            ],
            "libs/nw-graph-angular5/src/app/models/graph-log.ts": [
                {
                    "name": "nwGraphErrorName",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "\"NwGraphError\""
                }
            ],
            "libs/nw-graph-angular/src/lib/components/graph/graph.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => ({\r\n  props: {\r\n    rootNodeId: nwRootNodeId,\r\n    dataLoading: nwDataLoading,\r\n    config: nwConfig,\r\n    data: nwData,\r\n    nodeCount: 0\r\n  },\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts": [
                {
                    "name": "alignment",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>****************** Alignment Constraints *******************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDegree",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "calculateDepths",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "circle",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************** Circle Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cluster",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Cluster Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CoLaAlignment",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>**************** Generate CoLa Constraints *****************</p>\n",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offsets",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offsets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CoLaPosition",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "collectSet",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeBuiltInProperties",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<hr>\n",
                    "args": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeConstraints",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphNodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphLinks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphGroups",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphNodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphLinks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphGroups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeSets",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "constraints",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "contains",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "existingSet",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exprSet",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gap",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateConstraints",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateGuides",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "guide",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "guide",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateOrderFunc",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************** Order Constraints *********************</p>\n",
                    "args": [
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSets",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDegree",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDepth",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEdges",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstChild",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIncoming",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNeighbors",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOutgoing",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSources",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTargets",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graphSources",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "groups",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "guides",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "guides",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "guides",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hull",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>********************* Hull Constraints *********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "layout",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "links",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodes",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderElements",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderNodes",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderSets",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "padding",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Padding Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "partitionSet",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "position",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Position Constraints *******************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setID",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLinkID",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sets",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts": [
                {
                    "name": "alignment",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>****************** Alignment Constraints *******************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "calculateDegree",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "calculateDepths",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "circle",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************** Circle Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cluster",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Cluster Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CoLaAlignment",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>**************** Generate CoLa Constraints *****************</p>\n",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "offsets",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "offsets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "CoLaPosition",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "left",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "right",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "axis",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "collectSet",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeBuiltInProperties",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<hr>\n",
                    "args": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeConstraints",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphNodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphLinks",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "graphGroups",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphNodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphLinks",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "graphGroups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "computeSets",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sets",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "constraints",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "contains",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "list",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "existingSet",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exprSet",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "gap",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "gap",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateConstraints",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateGuides",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "guide",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "guide",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateOrderFunc",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************** Order Constraints *********************</p>\n",
                    "args": [
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSets",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "constraintDef",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDegree",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDepth",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEdges",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFirstChild",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getIncoming",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNeighbors",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOutgoing",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSources",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTargets",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "graphSources",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "groups",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "groups",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "guides",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "guides",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "guides",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hull",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>********************* Hull Constraints *********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "layout",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                },
                {
                    "name": "links",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nodes",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderElements",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderNodes",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "orderSets",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "padding",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Padding Constraints ********************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "partitionSet",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "position",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>******************* Position Constraints *******************</p>\n",
                    "args": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "elements",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "definition",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "cid",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setID",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setLinkID",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "link",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sets",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ],
            "apps/demo-angular5/src/app/store/reducer.ts": [
                {
                    "name": "appReducer",
                    "file": "apps/demo-angular5/src/app/store/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logger",
                    "file": "apps/demo-angular5/src/app/store/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<State>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/utils/index.ts": [
                {
                    "name": "centerArray",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArrayOfNonEmptyStrings",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isStringNullorEmpty",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nwToString",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toBoolean",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toPositiveInteger",
                    "file": "libs/nw-graph-angular/src/lib/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/utils/index.ts": [
                {
                    "name": "centerArray",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T[]",
                    "jsdoctags": [
                        {
                            "name": "arr",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isArrayOfNonEmptyStrings",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isStringNullorEmpty",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "nwToString",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toBoolean",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toPositiveInteger",
                    "file": "libs/nw-graph-angular5/src/app/utils/index.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "param",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "defaultValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/models/nw-data.ts": [
                {
                    "name": "cloneNwData",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/models/nw-data.ts": [
                {
                    "name": "cloneNwData",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/models/graph-log.ts": [
                {
                    "name": "extractGraphLogFromError",
                    "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GraphLog",
                    "jsdoctags": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateUniqueId",
                    "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "number"
                }
            ],
            "libs/nw-graph-angular5/src/app/models/graph-log.ts": [
                {
                    "name": "extractGraphLogFromError",
                    "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "GraphLog",
                    "jsdoctags": [
                        {
                            "name": "err",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateUniqueId",
                    "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [],
                    "returnType": "number"
                }
            ],
            "libs/nw-graph-angular/src/lib/store/reducer.ts": [
                {
                    "name": "graphReducer",
                    "file": "libs/nw-graph-angular/src/lib/store/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/store/reducer.ts": [
                {
                    "name": "graphReducer",
                    "file": "libs/nw-graph-angular5/src/app/store/reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/graph-adapters/webcola/grid.constraints.ts": [
                {
                    "name": "gridConstrainsts",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/grid.constraints.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "types",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "types",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/graph-adapters/webcola/grid.constraints.ts": [
                {
                    "name": "gridConstrainsts",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/grid.constraints.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "types",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "types",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/root-state.module.ts": [
                {
                    "name": "logger",
                    "file": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<any>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/root-state.module.ts": [
                {
                    "name": "logger",
                    "file": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ActionReducer<any>",
                    "jsdoctags": [
                        {
                            "name": "reducer",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts": [
                {
                    "name": "onNumHopChange",
                    "file": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "numHop",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "numHop",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular/src/lib/graph-adapters/webcola/tree.constraints.ts": [
                {
                    "name": "treeConstrainsts",
                    "file": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/tree.constraints.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "linkDistance",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "libs/nw-graph-angular5/src/app/graph-adapters/webcola/tree.constraints.ts": [
                {
                    "name": "treeConstrainsts",
                    "file": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/tree.constraints.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "d3Cola",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "nodes",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "links",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "apps/demo-angular5/src/app/store/actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "SET_ACTIVE_TAB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[APP]SET_ACTIVE_TAB"
                        },
                        {
                            "name": "RESET_ACTIVE_TAB",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[APP]RESET_ACTIVE_TAB"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "apps/demo-angular5/src/app/store/actions.ts"
                }
            ],
            "libs/nw-graph-angular/src/lib/store/actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "EXCLUDE_NODE_TYPES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXCLUDE_NODE_TYPES"
                        },
                        {
                            "name": "EXPAND_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_NODE"
                        },
                        {
                            "name": "SELECT_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]SELECT_NODE"
                        },
                        {
                            "name": "SELECT_ONLY_CLICKED_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]SELECT_ONLY_CLICKED_NODE"
                        },
                        {
                            "name": "UNSELECT_ALL_NODES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]UNSELECT_ALL_NODES"
                        },
                        {
                            "name": "TOGGLE_LABEL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]TOGGLE_LABEL"
                        },
                        {
                            "name": "COLLAPSE_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]COLLAPSE_NODE"
                        },
                        {
                            "name": "RESET_GRAPH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]RESET_GRAPH"
                        },
                        {
                            "name": "RESET_NODES_POSITIONS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]RESET_NODES_POSITIONS"
                        },
                        {
                            "name": "LOAD_EXTERNAL_DATA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]LOAD_EXTERNAL_DATA"
                        },
                        {
                            "name": "EXPAND_ONLY_ROOT_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_ONLY_ROOT_NODE"
                        },
                        {
                            "name": "EXPAND_ALL_NODES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_ALL_NODES"
                        },
                        {
                            "name": "EXPAND_NODES_AFTER_LOAD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_NODES_AFTER_LOAD"
                        },
                        {
                            "name": "COLLAPSE_ALL_NODES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]COLLAPSE_ALL_NODES"
                        },
                        {
                            "name": "CHANGE_ACTIVE_LAYOUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]CHANGE_ACTIVE_LAYOUT"
                        },
                        {
                            "name": "TOGGLE_RENDER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]TOGGLE_RENDER"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular/src/lib/store/actions.ts"
                }
            ],
            "libs/nw-graph-angular5/src/app/store/actions.ts": [
                {
                    "name": "ActionTypes",
                    "childs": [
                        {
                            "name": "EXCLUDE_NODE_TYPES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXCLUDE_NODE_TYPES"
                        },
                        {
                            "name": "EXPAND_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_NODE"
                        },
                        {
                            "name": "SELECT_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]SELECT_NODE"
                        },
                        {
                            "name": "SELECT_ONLY_CLICKED_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]SELECT_ONLY_CLICKED_NODE"
                        },
                        {
                            "name": "UNSELECT_ALL_NODES",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]UNSELECT_ALL_NODES"
                        },
                        {
                            "name": "TOGGLE_LABEL",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]TOGGLE_LABEL"
                        },
                        {
                            "name": "COLLAPSE_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]COLLAPSE_NODE"
                        },
                        {
                            "name": "RESET_GRAPH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]RESET_GRAPH"
                        },
                        {
                            "name": "RESET_NODES_POSITIONS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]RESET_NODES_POSITIONS"
                        },
                        {
                            "name": "LOAD_EXTERNAL_DATA",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]LOAD_EXTERNAL_DATA"
                        },
                        {
                            "name": "EXPAND_ONLY_ROOT_NODE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]EXPAND_ONLY_ROOT_NODE"
                        },
                        {
                            "name": "CHANGE_ACTIVE_LAYOUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]CHANGE_ACTIVE_LAYOUT"
                        },
                        {
                            "name": "TOGGLE_RENDER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "[NW]TOGGLE_RENDER"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular5/src/app/store/actions.ts"
                }
            ],
            "libs/nw-graph-angular/src/lib/models/graph-log.ts": [
                {
                    "name": "GraphLogErrorSeverity",
                    "childs": [
                        {
                            "name": "Low",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "High",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "Critical",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts"
                },
                {
                    "name": "GraphLogType",
                    "childs": [
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "RetryableError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular/src/lib/models/graph-log.ts"
                }
            ],
            "libs/nw-graph-angular5/src/app/models/graph-log.ts": [
                {
                    "name": "GraphLogErrorSeverity",
                    "childs": [
                        {
                            "name": "Low",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "Medium",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "High",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "Critical",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts"
                },
                {
                    "name": "GraphLogType",
                    "childs": [
                        {
                            "name": "Info",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "0"
                        },
                        {
                            "name": "Warning",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "Error",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "2"
                        },
                        {
                            "name": "RetryableError",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "3"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular5/src/app/models/graph-log.ts"
                }
            ],
            "libs/nw-graph-angular/src/lib/models/node-request.ts": [
                {
                    "name": "IdTypes",
                    "childs": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "party",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular/src/lib/models/node-request.ts"
                }
            ],
            "libs/nw-graph-angular5/src/app/models/node-request.ts": [
                {
                    "name": "IdTypes",
                    "childs": [
                        {
                            "name": "node",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "1"
                        },
                        {
                            "name": "entity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "party",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular5/src/app/models/node-request.ts"
                }
            ],
            "libs/nw-graph-angular/src/lib/models/nw-data.ts": [
                {
                    "name": "NeighboursStateType",
                    "childs": [
                        {
                            "name": "NOT_LOADED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING_THEN_EXPAND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING_FAILED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts"
                }
            ],
            "libs/nw-graph-angular5/src/app/models/nw-data.ts": [
                {
                    "name": "NeighboursStateType",
                    "childs": [
                        {
                            "name": "NOT_LOADED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING_THEN_EXPAND",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADING_FAILED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "LOADED",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "apps/demo-angular5/src/app/store/actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SetActiveTab | ResetActiveTab",
                    "file": "apps/demo-angular5/src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/nw-graph-angular/src/lib/store/actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ExcludeNodeTypes | ExpandNode | ToggleLabel | CollapseNode | ResetGraph | ResetNodesPositions | SelectNode | SelectOnlyClickedNode | UnselectAllNodes | LoadExternalData | ExpandOnlyRootNode | ExpandAllNodes | ExpandNodesAfterLoad | CollapseAllNodes | ChangeActiveLayout | ToggleRender",
                    "file": "libs/nw-graph-angular/src/lib/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/nw-graph-angular5/src/app/store/actions.ts": [
                {
                    "name": "Actions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ExcludeNodeTypes | ExpandNode | ToggleLabel | CollapseNode | ResetGraph | ResetNodesPositions | SelectNode | SelectOnlyClickedNode | UnselectAllNodes | LoadExternalData | ExpandOnlyRootNode | ChangeActiveLayout | ToggleRender",
                    "file": "libs/nw-graph-angular5/src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "libs/nw-graph-angular/src/lib/models/nw-data.ts": [
                {
                    "name": "EdgeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "NodeAttributeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "NodeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ],
            "libs/nw-graph-angular5/src/app/models/nw-data.ts": [
                {
                    "name": "EdgeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "NodeAttributeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                },
                {
                    "name": "NodeId",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 190
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 5,
        "status": "low",
        "files": [
            {
                "filePath": "apps/demo-angular12/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular12/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular12/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular12/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular12/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/network-graph/network-graph-host.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NetworkGraphHostComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NetworkGraphHostService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AppConstants",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/network-graph/network-graph-host.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetActiveTab",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SetActiveTab",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "appReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getAppState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveTabIndexCustomer360",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/app/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_APP_SLICE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "apps/demo-angular5/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/fadein-notification/fadein-notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FadeinNotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_MAX_NODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_NUM_HOPS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_WIDGET_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_WIDGET_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "onNumHopChange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "dataLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "rootNodeId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/graph/graph.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/legend/legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LABEL_LENGTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_LINK_OPACITY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_NODE_RADIUS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SOURCE_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/link/link.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TARGET_MARGIN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/node-label/node-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/node/node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/sidebar/filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/sidebar/filter/filter.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/sidebar/param-list/param-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParamListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/directives/draggable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DraggableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/directives/node-menu-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NodeMenuOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/directives/zoomable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ZoomableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/grid.constraints.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gridConstrainsts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "alignment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateDegree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateDepths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "circle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cluster",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "CoLaAlignment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "CoLaPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "collectSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeBuiltInProperties",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeConstraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "constraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "existingSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "exprSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateConstraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateGuides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateOrderFunc",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDegree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDepth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEdges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstChild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getIncoming",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNeighbors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getOutgoing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSources",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTargets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "graphSources",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "guides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hull",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "links",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "padding",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "partitionSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "position",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setLinkID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_graphNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_nodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_sets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INDEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setcola",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/tree.constraints.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "treeConstrainsts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/graph-adapters/webcola/webcola.adapter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WebcolaAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GraphError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphLog",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "extractGraphLogFromError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-log.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nwGraphErrorName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/graph-user-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/load-nodes-payload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadNodesPayload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/load-nodes-payload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TransformInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/node-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NodeRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/notification.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwConfig",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwEdge",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwNode",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwNodeType",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwEdgeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwNodeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEdge",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INode",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeDescAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeType",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INwData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/nw-data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cloneNwData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/root-state.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/config-parser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigParserService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/config-parser.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwRawConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/d3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "D3Service",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/data-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/dispatch-node-load.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DispatchNodeLoadService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FadeinNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/fadein-notification.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_NOTIFICATION_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/graph-engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GraphEngineService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/node-relation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeRelationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/node-relation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentMouseOverNodeOrEdge",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationBrokerService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LayoutChangeMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/services/notification-broker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChangeActiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CollapseAllNodes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CollapseNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExcludeNodeTypes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandAllNodes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandNodesAfterLoad",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandOnlyRootNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadExternalData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetGraph",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetNodesPositions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOnlyClickedNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleRender",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnselectAllNodes",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangeLayoutPayload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExternalDataPayload",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NetworkGraphEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "graphReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getNetworkGraphState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveLayoutTransform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAutoNetworkExpand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDirectLinked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDirectLinkedFilterByNodeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectExcludedNodeTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGraphData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsHideLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLayoutTransform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLogs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMaxNodesExceeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRootNodeId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_GRAPH_SLICE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "centerArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isArrayOfNonEmptyStrings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isStringNullorEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nwToString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toPositiveInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular/src/lib/utils/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_STRING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/fadein-notification/fadein-notification.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FadeinNotificationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GraphComponent",
                "coveragePercent": 0,
                "coverageCount": "0/58",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_MAX_NODES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_NUM_HOPS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_WIDGET_HEIGHT",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/graph/graph.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_WIDGET_WIDTH",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/legend/legend.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LegendComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/link/link.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LinkComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/node-label/node-label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeLabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/node/node.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NodeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/sidebar/filter/filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/sidebar/filter/filter.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/sidebar/param-list/param-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ParamListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/directives/draggable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "DraggableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/directives/node-menu-option.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NodeMenuOptionDirective",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/directives/tooltip.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "TooltipDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/directives/zoomable.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "ZoomableDirective",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/grid.constraints.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gridConstrainsts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "alignment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateDegree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "calculateDepths",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "circle",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cluster",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "CoLaAlignment",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "CoLaPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "collectSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeBuiltInProperties",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeConstraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "computeSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "constraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "contains",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "existingSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "exprSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "gap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateConstraints",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateGuides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateOrderFunc",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDegree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getDepth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getEdges",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getFirstChild",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getIncoming",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getNeighbors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getOutgoing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getSources",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getTargets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "graphSources",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "groups",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "guides",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "hull",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "layout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "links",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderElements",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "orderSets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "padding",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "partitionSet",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "position",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "setLinkID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "sets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_graphNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_nodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_sets",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "INDEX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/setcola.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setcola",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/tree.constraints.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "treeConstrainsts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/graph-adapters/webcola/webcola.adapter.ts",
                "type": "class",
                "linktype": "classe",
                "name": "WebcolaAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphAdapter",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-adapter.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphOptions",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GraphError",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphLog",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "extractGraphLogFromError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateUniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-log.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "nwGraphErrorName",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/graph-user-info.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GraphUserInfo",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/load-nodes-payload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoadNodesPayload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/load-nodes-payload.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TransformInfo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/node-request.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NodeRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/notification.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwConfig",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwEdge",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwNode",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwNodeType",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwEdgeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultNwNodeConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEdge",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INode",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeDescAttribute",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INodeType",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INwData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/nw-data.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "cloneNwData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "logger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metaReducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/root-state.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/config-parser.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigParserService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/config-parser.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NwRawConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/d3.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "D3Service",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/data-builder.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DataBuilderService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/dispatch-node-load.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DispatchNodeLoadService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FadeinNotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/fadein-notification.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_NOTIFICATION_MESSAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/graph-engine.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GraphEngineService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/node-relation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NodeRelationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/node-relation.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CurrentMouseOverNodeOrEdge",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationBrokerService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LayoutChangeMessage",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/services/notification-broker.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationMessage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ChangeActiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "CollapseNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExcludeNodeTypes",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ExpandOnlyRootNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadExternalData",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetGraph",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ResetNodesPositions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SelectOnlyClickedNode",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleLabel",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ToggleRender",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UnselectAllNodes",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ChangeLayoutPayload",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/actions.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExternalDataPayload",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NetworkGraphEffects",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/reducer.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "graphReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getNetworkGraphState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveLayoutTransform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAutoNetworkExpand",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDirectLinked",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDirectLinkedFilterByNodeType",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectExcludedNodeTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGraphData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsHideLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLayoutTransform",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectLogs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectMaxNodesExceeded",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRootNodeId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedNodes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/store/state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STORE_GRAPH_SLICE_NAME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "centerArray",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isArrayOfNonEmptyStrings",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "isStringNullorEmpty",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "nwToString",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toBoolean",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "toPositiveInteger",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/app/utils/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EMPTY_STRING",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "libs/nw-graph-angular5/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}